-- SPDX-License-Identifier: Apache-2.0
-- Licensed to the Ed-Fi Alliance under one or more agreements.
-- The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
-- See the LICENSE and NOTICES files in the project root for more information.

PRINT N'Updating ODS Database With ChangeQueries enabled and no TPDM extension to 7.3';
GO

PRINT N'Dropping Extended Property [edfi].[StudentParticipationCodeDescriptor].[StudentParticipationCodeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_dropextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentParticipationCodeDescriptor', @level2type = N'COLUMN', @level2name = N'StudentParticipationCodeDescriptorId';


GO
PRINT N'Dropping Index [edfi].[DisciplineAction].[FK_DisciplineAction_Student]...';


GO
DROP INDEX [FK_DisciplineAction_Student]
    ON [edfi].[DisciplineAction];


GO
PRINT N'Dropping Index [edfi].[GeneralStudentProgramAssociation].[FK_GeneralStudentProgramAssociation_Student]...';


GO
DROP INDEX [FK_GeneralStudentProgramAssociation_Student]
    ON [edfi].[GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Index [edfi].[LocalContractedStaff].[FK_LocalContractedStaff_Staff]...';


GO
DROP INDEX [FK_LocalContractedStaff_Staff]
    ON [edfi].[LocalContractedStaff];


GO
PRINT N'Dropping Index [edfi].[LocalPayroll].[FK_LocalPayroll_Staff]...';


GO
DROP INDEX [FK_LocalPayroll_Staff]
    ON [edfi].[LocalPayroll];


GO
PRINT N'Dropping Index [edfi].[PostSecondaryEvent].[FK_PostSecondaryEvent_Student]...';


GO
DROP INDEX [FK_PostSecondaryEvent_Student]
    ON [edfi].[PostSecondaryEvent];


GO
PRINT N'Dropping Index [edfi].[ReportCard].[FK_ReportCard_Student]...';


GO
DROP INDEX [FK_ReportCard_Student]
    ON [edfi].[ReportCard];


GO
PRINT N'Dropping Index [edfi].[RestraintEvent].[FK_RestraintEvent_Student]...';


GO
DROP INDEX [FK_RestraintEvent_Student]
    ON [edfi].[RestraintEvent];


GO
PRINT N'Dropping Index [edfi].[SectionAttendanceTakenEvent].[FK_SectionAttendanceTakenEvent_Staff]...';


GO
DROP INDEX [FK_SectionAttendanceTakenEvent_Staff]
    ON [edfi].[SectionAttendanceTakenEvent];


GO
PRINT N'Dropping Index [edfi].[StaffAbsenceEvent].[FK_StaffAbsenceEvent_Staff]...';


GO
DROP INDEX [FK_StaffAbsenceEvent_Staff]
    ON [edfi].[StaffAbsenceEvent];


GO
PRINT N'Dropping Index [edfi].[StaffCohortAssociation].[FK_StaffCohortAssociation_Staff]...';


GO
DROP INDEX [FK_StaffCohortAssociation_Staff]
    ON [edfi].[StaffCohortAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffDisciplineIncidentAssociation].[FK_StaffDisciplineIncidentAssociation_Staff]...';


GO
DROP INDEX [FK_StaffDisciplineIncidentAssociation_Staff]
    ON [edfi].[StaffDisciplineIncidentAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[FK_StaffEducationOrganizationAssignmentAssociation_Staff]...';


GO
DROP INDEX [FK_StaffEducationOrganizationAssignmentAssociation_Staff]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffEducationOrganizationContactAssociation].[FK_StaffEducationOrganizationContactAssociation_Staff]...';


GO
DROP INDEX [FK_StaffEducationOrganizationContactAssociation_Staff]
    ON [edfi].[StaffEducationOrganizationContactAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[FK_StaffEducationOrganizationEmploymentAssociation_Staff]...';


GO
DROP INDEX [FK_StaffEducationOrganizationEmploymentAssociation_Staff]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffLeave].[FK_StaffLeave_Staff]...';


GO
DROP INDEX [FK_StaffLeave_Staff]
    ON [edfi].[StaffLeave];


GO
PRINT N'Dropping Index [edfi].[StaffProgramAssociation].[FK_StaffProgramAssociation_Staff]...';


GO
DROP INDEX [FK_StaffProgramAssociation_Staff]
    ON [edfi].[StaffProgramAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffSchoolAssociation].[FK_StaffSchoolAssociation_Staff]...';


GO
DROP INDEX [FK_StaffSchoolAssociation_Staff]
    ON [edfi].[StaffSchoolAssociation];


GO
PRINT N'Dropping Index [edfi].[StaffSectionAssociation].[FK_StaffSectionAssociation_Staff]...';


GO
DROP INDEX [FK_StaffSectionAssociation_Staff]
    ON [edfi].[StaffSectionAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_Student]...';


GO
DROP INDEX [FK_StudentAcademicRecord_Student]
    ON [edfi].[StudentAcademicRecord];


GO
PRINT N'Dropping Index [edfi].[StudentAssessment].[FK_StudentAssessment_Student]...';


GO
DROP INDEX [FK_StudentAssessment_Student]
    ON [edfi].[StudentAssessment];


GO
PRINT N'Dropping Index [edfi].[StudentCohortAssociation].[FK_StudentCohortAssociation_Student]...';


GO
DROP INDEX [FK_StudentCohortAssociation_Student]
    ON [edfi].[StudentCohortAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentCompetencyObjective].[FK_StudentCompetencyObjective_Student]...';


GO
DROP INDEX [FK_StudentCompetencyObjective_Student]
    ON [edfi].[StudentCompetencyObjective];


GO
PRINT N'Dropping Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[FK_StudentDisciplineIncidentBehaviorAssociation_Student]...';


GO
DROP INDEX [FK_StudentDisciplineIncidentBehaviorAssociation_Student]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[FK_StudentDisciplineIncidentNonOffenderAssociation_Student]...';


GO
DROP INDEX [FK_StudentDisciplineIncidentNonOffenderAssociation_Student]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_Student]...';


GO
DROP INDEX [FK_StudentEducationOrganizationAssociation_Student]
    ON [edfi].[StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[FK_StudentEducationOrganizationResponsibilityAssociation_Student]...';


GO
DROP INDEX [FK_StudentEducationOrganizationResponsibilityAssociation_Student]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentGradebookEntry].[FK_StudentGradebookEntry_Student]...';


GO
DROP INDEX [FK_StudentGradebookEntry_Student]
    ON [edfi].[StudentGradebookEntry];


GO
PRINT N'Dropping Index [edfi].[StudentHealth].[FK_StudentHealth_Student]...';


GO
DROP INDEX [FK_StudentHealth_Student]
    ON [edfi].[StudentHealth];


GO
PRINT N'Dropping Index [edfi].[StudentInterventionAssociation].[FK_StudentInterventionAssociation_Student]...';


GO
DROP INDEX [FK_StudentInterventionAssociation_Student]
    ON [edfi].[StudentInterventionAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentInterventionAttendanceEvent].[FK_StudentInterventionAttendanceEvent_Student]...';


GO
DROP INDEX [FK_StudentInterventionAttendanceEvent_Student]
    ON [edfi].[StudentInterventionAttendanceEvent];


GO
PRINT N'Dropping Index [edfi].[StudentProgramAttendanceEvent].[FK_StudentProgramAttendanceEvent_Student]...';


GO
DROP INDEX [FK_StudentProgramAttendanceEvent_Student]
    ON [edfi].[StudentProgramAttendanceEvent];


GO
PRINT N'Dropping Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_Student]...';


GO
DROP INDEX [FK_StudentSchoolAssociation_Student]
    ON [edfi].[StudentSchoolAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentSchoolAttendanceEvent].[FK_StudentSchoolAttendanceEvent_Student]...';


GO
DROP INDEX [FK_StudentSchoolAttendanceEvent_Student]
    ON [edfi].[StudentSchoolAttendanceEvent];


GO
PRINT N'Dropping Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_Student]...';


GO
DROP INDEX [FK_StudentSectionAssociation_Student]
    ON [edfi].[StudentSectionAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentSectionAttendanceEvent].[FK_StudentSectionAttendanceEvent_Student]...';


GO
DROP INDEX [FK_StudentSectionAttendanceEvent_Student]
    ON [edfi].[StudentSectionAttendanceEvent];


GO
PRINT N'Dropping Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_Student]...';


GO
DROP INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_Student]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation];


GO
PRINT N'Dropping Index [edfi].[StudentTransportation].[FK_StudentTransportation_Student]...';


GO
DROP INDEX [FK_StudentTransportation_Student]
    ON [edfi].[StudentTransportation];


GO
PRINT N'Dropping Index [edfi].[SurveyResponseStaffTargetAssociation].[FK_SurveyResponseStaffTargetAssociation_Staff]...';


GO
DROP INDEX [FK_SurveyResponseStaffTargetAssociation_Staff]
    ON [edfi].[SurveyResponseStaffTargetAssociation];


GO
PRINT N'Dropping Index [edfi].[SurveySectionResponseStaffTargetAssociation].[FK_SurveySectionResponseStaffTargetAssociation_Staff]...';


GO
DROP INDEX [FK_SurveySectionResponseStaffTargetAssociation_Staff]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation];


GO
PRINT N'Dropping Default Constraint [edfi].[AcademicWeek_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AcademicWeek] DROP CONSTRAINT [AcademicWeek_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AcademicWeek_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AcademicWeek] DROP CONSTRAINT [AcademicWeek_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AcademicWeek_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AcademicWeek] DROP CONSTRAINT [AcademicWeek_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[AcademicWeek_DF_Id]...';


GO
ALTER TABLE [edfi].[AcademicWeek] DROP CONSTRAINT [AcademicWeek_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[AccountabilityRating_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [AccountabilityRating_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AccountabilityRating_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [AccountabilityRating_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AccountabilityRating_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [AccountabilityRating_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[AccountabilityRating_DF_Id]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [AccountabilityRating_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Assessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [Assessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Assessment_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [Assessment_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Assessment_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [Assessment_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Assessment_DF_Id]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [Assessment_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItem_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [AssessmentItem_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItem_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [AssessmentItem_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItem_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [AssessmentItem_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItem_DF_Id]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [AssessmentItem_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScoreRangeLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScoreRangeLearningStandard_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScoreRangeLearningStandard_DF_Id]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScoreRangeLearningStandard_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[BalanceSheetDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimension] DROP CONSTRAINT [BalanceSheetDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[BalanceSheetDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimension] DROP CONSTRAINT [BalanceSheetDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[BalanceSheetDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimension] DROP CONSTRAINT [BalanceSheetDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BalanceSheetDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimension] DROP CONSTRAINT [BalanceSheetDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BellSchedule_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellSchedule] DROP CONSTRAINT [BellSchedule_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BellSchedule_DF_Id]...';


GO
ALTER TABLE [edfi].[BellSchedule] DROP CONSTRAINT [BellSchedule_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[BellSchedule_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[BellSchedule] DROP CONSTRAINT [BellSchedule_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[BellSchedule_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[BellSchedule] DROP CONSTRAINT [BellSchedule_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Calendar_DF_Id]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [Calendar_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Calendar_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [Calendar_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Calendar_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [Calendar_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Calendar_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [Calendar_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarDate_DF_Id]...';


GO
ALTER TABLE [edfi].[CalendarDate] DROP CONSTRAINT [CalendarDate_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarDate_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CalendarDate] DROP CONSTRAINT [CalendarDate_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarDate_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CalendarDate] DROP CONSTRAINT [CalendarDate_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CalendarDate] DROP CONSTRAINT [CalendarDate_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ChartOfAccount_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [ChartOfAccount_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ChartOfAccount_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [ChartOfAccount_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ChartOfAccount_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [ChartOfAccount_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ChartOfAccount_DF_Id]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [ChartOfAccount_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ClassPeriod] DROP CONSTRAINT [ClassPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ClassPeriod_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ClassPeriod] DROP CONSTRAINT [ClassPeriod_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ClassPeriod_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ClassPeriod] DROP CONSTRAINT [ClassPeriod_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ClassPeriod_DF_Id]...';


GO
ALTER TABLE [edfi].[ClassPeriod] DROP CONSTRAINT [ClassPeriod_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Cohort_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [Cohort_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Cohort_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [Cohort_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Cohort_DF_Id]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [Cohort_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Cohort_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [Cohort_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CommunityProviderLicense_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [CommunityProviderLicense_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CommunityProviderLicense_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [CommunityProviderLicense_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CommunityProviderLicense_DF_Id]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [CommunityProviderLicense_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CommunityProviderLicense_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [CommunityProviderLicense_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CompetencyObjective_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [CompetencyObjective_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CompetencyObjective_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [CompetencyObjective_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CompetencyObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [CompetencyObjective_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CompetencyObjective_DF_Id]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [CompetencyObjective_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Contact_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [Contact_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Contact_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [Contact_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Contact_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [Contact_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Contact_DF_Id]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [Contact_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Course_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [Course_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Course_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [Course_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Course_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [Course_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Course_DF_Id]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [Course_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOffering_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [CourseOffering_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOffering_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [CourseOffering_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOffering_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [CourseOffering_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOffering_DF_Id]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [CourseOffering_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscript_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [CourseTranscript_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscript_DF_Id]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [CourseTranscript_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscript_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [CourseTranscript_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscript_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [CourseTranscript_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Credential_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [Credential_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Credential_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [Credential_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Credential_DF_Id]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [Credential_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Credential_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [Credential_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CrisisEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[CrisisEvent] DROP CONSTRAINT [CrisisEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[CrisisEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CrisisEvent] DROP CONSTRAINT [CrisisEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CrisisEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[CrisisEvent] DROP CONSTRAINT [CrisisEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CrisisEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[CrisisEvent] DROP CONSTRAINT [CrisisEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Descriptor_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Descriptor] DROP CONSTRAINT [Descriptor_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Descriptor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Descriptor] DROP CONSTRAINT [Descriptor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Descriptor_DF_Id]...';


GO
ALTER TABLE [edfi].[Descriptor] DROP CONSTRAINT [Descriptor_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Descriptor_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Descriptor] DROP CONSTRAINT [Descriptor_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DescriptorMapping_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DescriptorMapping] DROP CONSTRAINT [DescriptorMapping_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DescriptorMapping_DF_Id]...';


GO
ALTER TABLE [edfi].[DescriptorMapping] DROP CONSTRAINT [DescriptorMapping_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[DescriptorMapping_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[DescriptorMapping] DROP CONSTRAINT [DescriptorMapping_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[DescriptorMapping_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[DescriptorMapping] DROP CONSTRAINT [DescriptorMapping_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineAction_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [DisciplineAction_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineAction_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [DisciplineAction_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineAction_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [DisciplineAction_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineAction_DF_Id]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [DisciplineAction_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncident_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [DisciplineIncident_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncident_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [DisciplineIncident_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncident_DF_Id]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [DisciplineIncident_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncident_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [DisciplineIncident_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [EducationContent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [EducationContent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [EducationContent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContent_DF_Id]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [EducationContent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganization] DROP CONSTRAINT [EducationOrganization_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganization_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EducationOrganization] DROP CONSTRAINT [EducationOrganization_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganization_DF_Id]...';


GO
ALTER TABLE [edfi].[EducationOrganization] DROP CONSTRAINT [EducationOrganization_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganization_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EducationOrganization] DROP CONSTRAINT [EducationOrganization_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInterventionPrescriptionAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInterventionPrescriptionAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationNetworkAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [EducationOrganizationNetworkAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationNetworkAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [EducationOrganizationNetworkAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationNetworkAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [EducationOrganizationNetworkAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationNetworkAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [EducationOrganizationNetworkAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationPeerAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [EducationOrganizationPeerAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationPeerAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [EducationOrganizationPeerAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationPeerAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [EducationOrganizationPeerAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationPeerAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [EducationOrganizationPeerAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EvaluationRubricDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [EvaluationRubricDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EvaluationRubricDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [EvaluationRubricDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EvaluationRubricDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [EvaluationRubricDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[EvaluationRubricDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [EvaluationRubricDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[FeederSchoolAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FeederSchoolAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FeederSchoolAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FeederSchoolAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[FeederSchoolAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FeederSchoolAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FeederSchoolAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FeederSchoolAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[FunctionDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FunctionDimension] DROP CONSTRAINT [FunctionDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FunctionDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[FunctionDimension] DROP CONSTRAINT [FunctionDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FunctionDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[FunctionDimension] DROP CONSTRAINT [FunctionDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[FunctionDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[FunctionDimension] DROP CONSTRAINT [FunctionDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[FundDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[FundDimension] DROP CONSTRAINT [FundDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[FundDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[FundDimension] DROP CONSTRAINT [FundDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[FundDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FundDimension] DROP CONSTRAINT [FundDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FundDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[FundDimension] DROP CONSTRAINT [FundDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GeneralStudentProgramAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [GeneralStudentProgramAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GeneralStudentProgramAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [GeneralStudentProgramAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GeneralStudentProgramAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [GeneralStudentProgramAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[GeneralStudentProgramAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [GeneralStudentProgramAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Grade_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [Grade_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Grade_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [Grade_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Grade_DF_Id]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [Grade_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Grade_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [Grade_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradebookEntry_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [GradebookEntry_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[GradebookEntry_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [GradebookEntry_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradebookEntry_DF_Id]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [GradebookEntry_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[GradebookEntry_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [GradebookEntry_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradingPeriod_DF_Id]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [GradingPeriod_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[GradingPeriod_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [GradingPeriod_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradingPeriod_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [GradingPeriod_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[GradingPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [GradingPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlan_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [GraduationPlan_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlan_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [GraduationPlan_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlan_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [GraduationPlan_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlan_DF_Id]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [GraduationPlan_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Intervention_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [Intervention_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Intervention_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [Intervention_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Intervention_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [Intervention_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Intervention_DF_Id]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [Intervention_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescription_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [InterventionPrescription_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescription_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [InterventionPrescription_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescription_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [InterventionPrescription_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescription_DF_Id]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [InterventionPrescription_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudy_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [InterventionStudy_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudy_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [InterventionStudy_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudy_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [InterventionStudy_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudy_DF_Id]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [InterventionStudy_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandard_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [LearningStandard_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandard_DF_Id]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [LearningStandard_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [LearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandard_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [LearningStandard_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardEquivalenceAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [LearningStandardEquivalenceAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardEquivalenceAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [LearningStandardEquivalenceAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardEquivalenceAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [LearningStandardEquivalenceAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardEquivalenceAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [LearningStandardEquivalenceAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalAccount_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [LocalAccount_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalAccount_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [LocalAccount_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalAccount_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [LocalAccount_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalAccount_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [LocalAccount_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalActual_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [LocalActual_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalActual_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [LocalActual_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalActual_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [LocalActual_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalActual_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [LocalActual_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalBudget_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [LocalBudget_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalBudget_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [LocalBudget_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalBudget_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [LocalBudget_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalBudget_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [LocalBudget_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalContractedStaff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [LocalContractedStaff_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalContractedStaff_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [LocalContractedStaff_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalContractedStaff_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [LocalContractedStaff_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalContractedStaff_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [LocalContractedStaff_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEncumbrance_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [LocalEncumbrance_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEncumbrance_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [LocalEncumbrance_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEncumbrance_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [LocalEncumbrance_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEncumbrance_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [LocalEncumbrance_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalPayroll_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [LocalPayroll_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalPayroll_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [LocalPayroll_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalPayroll_DF_Id]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [LocalPayroll_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalPayroll_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [LocalPayroll_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Location_DF_Id]...';


GO
ALTER TABLE [edfi].[Location] DROP CONSTRAINT [Location_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Location_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Location] DROP CONSTRAINT [Location_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Location_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Location] DROP CONSTRAINT [Location_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Location_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Location] DROP CONSTRAINT [Location_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectDimension] DROP CONSTRAINT [ObjectDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ObjectDimension] DROP CONSTRAINT [ObjectDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ObjectDimension] DROP CONSTRAINT [ObjectDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[ObjectDimension] DROP CONSTRAINT [ObjectDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [ObjectiveAssessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessment_DF_Id]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [ObjectiveAssessment_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessment_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [ObjectiveAssessment_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessment_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [ObjectiveAssessment_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPosition_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [OpenStaffPosition_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPosition_DF_Id]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [OpenStaffPosition_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPosition_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [OpenStaffPosition_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPosition_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [OpenStaffPosition_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[OperationalUnitDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimension] DROP CONSTRAINT [OperationalUnitDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OperationalUnitDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimension] DROP CONSTRAINT [OperationalUnitDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[OperationalUnitDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimension] DROP CONSTRAINT [OperationalUnitDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OperationalUnitDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimension] DROP CONSTRAINT [OperationalUnitDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Person_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Person] DROP CONSTRAINT [Person_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Person_DF_Id]...';


GO
ALTER TABLE [edfi].[Person] DROP CONSTRAINT [Person_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Person_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Person] DROP CONSTRAINT [Person_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Person_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Person] DROP CONSTRAINT [Person_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[PostSecondaryEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [PostSecondaryEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[PostSecondaryEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [PostSecondaryEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[PostSecondaryEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [PostSecondaryEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[PostSecondaryEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [PostSecondaryEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Program_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [Program_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Program_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [Program_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Program_DF_Id]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [Program_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Program_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [Program_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[ProgramDimension] DROP CONSTRAINT [ProgramDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ProgramDimension] DROP CONSTRAINT [ProgramDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramDimension] DROP CONSTRAINT [ProgramDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ProgramDimension] DROP CONSTRAINT [ProgramDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [ProgramEvaluation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [ProgramEvaluation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [ProgramEvaluation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluation_DF_Id]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [ProgramEvaluation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationElement_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [ProgramEvaluationElement_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationElement_DF_Id]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [ProgramEvaluationElement_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationElement_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [ProgramEvaluationElement_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationElement_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [ProgramEvaluationElement_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] DROP CONSTRAINT [ProgramEvaluationObjective_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationObjective_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] DROP CONSTRAINT [ProgramEvaluationObjective_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationObjective_DF_Id]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] DROP CONSTRAINT [ProgramEvaluationObjective_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationObjective_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] DROP CONSTRAINT [ProgramEvaluationObjective_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ProjectDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProjectDimension] DROP CONSTRAINT [ProjectDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProjectDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ProjectDimension] DROP CONSTRAINT [ProjectDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProjectDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[ProjectDimension] DROP CONSTRAINT [ProjectDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ProjectDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ProjectDimension] DROP CONSTRAINT [ProjectDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [ReportCard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCard_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [ReportCard_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCard_DF_Id]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [ReportCard_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCard_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [ReportCard_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [RestraintEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [RestraintEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [RestraintEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [RestraintEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolYearType_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SchoolYearType] DROP CONSTRAINT [SchoolYearType_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolYearType_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SchoolYearType] DROP CONSTRAINT [SchoolYearType_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolYearType_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SchoolYearType] DROP CONSTRAINT [SchoolYearType_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolYearType_DF_Id]...';


GO
ALTER TABLE [edfi].[SchoolYearType] DROP CONSTRAINT [SchoolYearType_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Section_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [Section_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Section_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [Section_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Section_DF_Id]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [Section_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Section_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [Section_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionAttendanceTakenEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [SectionAttendanceTakenEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionAttendanceTakenEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [SectionAttendanceTakenEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionAttendanceTakenEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [SectionAttendanceTakenEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionAttendanceTakenEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [SectionAttendanceTakenEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Session_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [Session_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Session_DF_Id]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [Session_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Session_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [Session_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Session_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [Session_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SourceDimension_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SourceDimension] DROP CONSTRAINT [SourceDimension_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SourceDimension_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SourceDimension] DROP CONSTRAINT [SourceDimension_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SourceDimension_DF_Id]...';


GO
ALTER TABLE [edfi].[SourceDimension] DROP CONSTRAINT [SourceDimension_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SourceDimension_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SourceDimension] DROP CONSTRAINT [SourceDimension_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Staff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [Staff_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Staff_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [Staff_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Staff_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [Staff_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Staff_DF_Id]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [Staff_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAbsenceEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [StaffAbsenceEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAbsenceEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [StaffAbsenceEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAbsenceEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [StaffAbsenceEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAbsenceEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [StaffAbsenceEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffCohortAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [StaffCohortAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffCohortAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [StaffCohortAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffCohortAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [StaffCohortAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffCohortAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [StaffCohortAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffDisciplineIncidentAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [StaffDisciplineIncidentAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffDisciplineIncidentAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [StaffDisciplineIncidentAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffDisciplineIncidentAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [StaffDisciplineIncidentAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffDisciplineIncidentAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [StaffDisciplineIncidentAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationAssignmentAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationAssignmentAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationAssignmentAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationEmploymentAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationEmploymentAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationEmploymentAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLeave_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [StaffLeave_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLeave_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [StaffLeave_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLeave_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [StaffLeave_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLeave_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [StaffLeave_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffProgramAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [StaffProgramAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffProgramAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [StaffProgramAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffProgramAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [StaffProgramAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffProgramAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [StaffProgramAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [StaffSchoolAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [StaffSchoolAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [StaffSchoolAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [StaffSchoolAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSectionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [StaffSectionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSectionAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [StaffSectionAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSectionAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [StaffSectionAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSectionAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [StaffSectionAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[Student_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [Student_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Student_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [Student_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Student_DF_Id]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [Student_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Student_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [Student_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecord_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [StudentAcademicRecord_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecord_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [StudentAcademicRecord_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecord_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [StudentAcademicRecord_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecord_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [StudentAcademicRecord_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [StudentAssessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessment_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [StudentAssessment_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessment_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [StudentAssessment_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessment_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [StudentAssessment_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentEducationOrganizationAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentEducationOrganizationAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentEducationOrganizationAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentEducationOrganizationAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCohortAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [StudentCohortAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCohortAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [StudentCohortAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCohortAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [StudentCohortAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCohortAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [StudentCohortAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [StudentCompetencyObjective_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjective_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [StudentCompetencyObjective_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjective_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [StudentCompetencyObjective_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjective_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [StudentCompetencyObjective_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentContactAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [StudentContactAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentContactAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [StudentContactAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentContactAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [StudentContactAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentContactAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [StudentContactAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [StudentEducationOrganizationAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [StudentEducationOrganizationAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [StudentEducationOrganizationAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [StudentEducationOrganizationAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationResponsibilityAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationResponsibilityAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationResponsibilityAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationResponsibilityAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentGradebookEntry_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [StudentGradebookEntry_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentGradebookEntry_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [StudentGradebookEntry_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentGradebookEntry_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [StudentGradebookEntry_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentGradebookEntry_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [StudentGradebookEntry_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealth_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [StudentHealth_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealth_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [StudentHealth_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealth_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [StudentHealth_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealth_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [StudentHealth_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [StudentInterventionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [StudentInterventionAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [StudentInterventionAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [StudentInterventionAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAttendanceEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [StudentInterventionAttendanceEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAttendanceEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [StudentInterventionAttendanceEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAttendanceEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [StudentInterventionAttendanceEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAttendanceEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [StudentInterventionAttendanceEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramAttendanceEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [StudentProgramAttendanceEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramAttendanceEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [StudentProgramAttendanceEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramAttendanceEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [StudentProgramAttendanceEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramAttendanceEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [StudentProgramAttendanceEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [StudentProgramEvaluation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [StudentProgramEvaluation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [StudentProgramEvaluation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [StudentProgramEvaluation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [StudentSchoolAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [StudentSchoolAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [StudentSchoolAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [StudentSchoolAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAttendanceEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [StudentSchoolAttendanceEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAttendanceEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [StudentSchoolAttendanceEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAttendanceEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [StudentSchoolAttendanceEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAttendanceEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [StudentSchoolAttendanceEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [StudentSectionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [StudentSectionAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [StudentSectionAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [StudentSectionAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAttendanceEvent_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [StudentSectionAttendanceEvent_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAttendanceEvent_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [StudentSectionAttendanceEvent_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAttendanceEvent_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [StudentSectionAttendanceEvent_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAttendanceEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [StudentSectionAttendanceEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramEligibilityAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramEligibilityAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramEligibilityAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramEligibilityAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [StudentTransportation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [StudentTransportation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [StudentTransportation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [StudentTransportation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Survey_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [Survey_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Survey_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [Survey_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[Survey_DF_Id]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [Survey_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[Survey_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [Survey_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyCourseAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [SurveyCourseAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyCourseAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [SurveyCourseAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyCourseAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [SurveyCourseAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyCourseAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [SurveyCourseAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyProgramAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [SurveyProgramAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyProgramAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [SurveyProgramAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyProgramAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [SurveyProgramAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyProgramAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [SurveyProgramAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestion_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [SurveyQuestion_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestion_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [SurveyQuestion_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestion_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [SurveyQuestion_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestion_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [SurveyQuestion_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponse_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [SurveyQuestionResponse_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [SurveyQuestionResponse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponse_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [SurveyQuestionResponse_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponse_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [SurveyQuestionResponse_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [SurveyResponse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponse_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [SurveyResponse_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponse_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [SurveyResponse_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponse_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [SurveyResponse_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseEducationOrganizationTargetAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseEducationOrganizationTargetAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseEducationOrganizationTargetAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseStaffTargetAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseStaffTargetAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseStaffTargetAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseStaffTargetAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveySection] DROP CONSTRAINT [SurveySection_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySection_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveySection] DROP CONSTRAINT [SurveySection_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySection_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveySection] DROP CONSTRAINT [SurveySection_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySection_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveySection] DROP CONSTRAINT [SurveySection_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [SurveySectionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [SurveySectionAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [SurveySectionAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [SurveySectionAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponse_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [SurveySectionResponse_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponse_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [SurveySectionResponse_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponse_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [SurveySectionResponse_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [SurveySectionResponse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseStaffTargetAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseStaffTargetAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_LastModifiedDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseStaffTargetAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_Id];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveySectionResponseStaffTargetAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_ChangeVersion];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation]...';


GO
ALTER TABLE [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [DF__StudentSp__Creat__1B29CEB6];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAcademicSubject] DROP CONSTRAINT [AssessmentAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentAssessedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAssessedGradeLevel] DROP CONSTRAINT [AssessmentAssessedGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentContentStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard] DROP CONSTRAINT [AssessmentContentStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentContentStandardAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandardAuthor] DROP CONSTRAINT [AssessmentContentStandardAuthor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationCode] DROP CONSTRAINT [AssessmentIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItemLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] DROP CONSTRAINT [AssessmentItemLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentItemPossibleResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentItemPossibleResponse] DROP CONSTRAINT [AssessmentItemPossibleResponse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentLanguage] DROP CONSTRAINT [AssessmentLanguage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPerformanceLevel] DROP CONSTRAINT [AssessmentPerformanceLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPeriod] DROP CONSTRAINT [AssessmentPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentPlatformType_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPlatformType] DROP CONSTRAINT [AssessmentPlatformType_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentProgram] DROP CONSTRAINT [AssessmentProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentScore] DROP CONSTRAINT [AssessmentScore_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentScoreRangeLearningStandardLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] DROP CONSTRAINT [AssessmentScoreRangeLearningStandardLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[AssessmentSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentSection] DROP CONSTRAINT [AssessmentSection_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BalanceSheetDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimensionReportingTag] DROP CONSTRAINT [BalanceSheetDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BellScheduleClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod] DROP CONSTRAINT [BellScheduleClassPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BellScheduleDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleDate] DROP CONSTRAINT [BellScheduleDate_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[BellScheduleGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleGradeLevel] DROP CONSTRAINT [BellScheduleGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarDateCalendarEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CalendarDateCalendarEvent] DROP CONSTRAINT [CalendarDateCalendarEvent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CalendarGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CalendarGradeLevel] DROP CONSTRAINT [CalendarGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ChartOfAccountReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ChartOfAccountReportingTag] DROP CONSTRAINT [ChartOfAccountReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ClassPeriodMeetingTime_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ClassPeriodMeetingTime] DROP CONSTRAINT [ClassPeriodMeetingTime_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CohortProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CohortProgram] DROP CONSTRAINT [CohortProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactAddress] DROP CONSTRAINT [ContactAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactAddressPeriod] DROP CONSTRAINT [ContactAddressPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactElectronicMail] DROP CONSTRAINT [ContactElectronicMail_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactInternationalAddress] DROP CONSTRAINT [ContactInternationalAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactLanguage] DROP CONSTRAINT [ContactLanguage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactLanguageUse] DROP CONSTRAINT [ContactLanguageUse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactOtherName] DROP CONSTRAINT [ContactOtherName_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactPersonalIdentificationDocument] DROP CONSTRAINT [ContactPersonalIdentificationDocument_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ContactTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactTelephone] DROP CONSTRAINT [ContactTelephone_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseAcademicSubject] DROP CONSTRAINT [CourseAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseCompetencyLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseCompetencyLevel] DROP CONSTRAINT [CourseCompetencyLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseIdentificationCode] DROP CONSTRAINT [CourseIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard] DROP CONSTRAINT [CourseLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristic] DROP CONSTRAINT [CourseLevelCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferedGradeLevel] DROP CONSTRAINT [CourseOfferedGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOfferingCourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingCourseLevelCharacteristic] DROP CONSTRAINT [CourseOfferingCourseLevelCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOfferingCurriculumUsed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] DROP CONSTRAINT [CourseOfferingCurriculumUsed_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseOfferingOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingOfferedGradeLevel] DROP CONSTRAINT [CourseOfferingOfferedGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAcademicSubject] DROP CONSTRAINT [CourseTranscriptAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptAlternativeCourseIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAlternativeCourseIdentificationCode] DROP CONSTRAINT [CourseTranscriptAlternativeCourseIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptCourseProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram] DROP CONSTRAINT [CourseTranscriptCourseProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptCreditCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCreditCategory] DROP CONSTRAINT [CourseTranscriptCreditCategory_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptEarnedAdditionalCredits_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] DROP CONSTRAINT [CourseTranscriptEarnedAdditionalCredits_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptPartialCourseTranscriptAwards_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptPartialCourseTranscriptAwards] DROP CONSTRAINT [CourseTranscriptPartialCourseTranscriptAwards_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CourseTranscriptSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection] DROP CONSTRAINT [CourseTranscriptSection_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CredentialAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialAcademicSubject] DROP CONSTRAINT [CredentialAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CredentialEndorsement_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialEndorsement] DROP CONSTRAINT [CredentialEndorsement_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[CredentialGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialGradeLevel] DROP CONSTRAINT [CredentialGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DescriptorMappingModelEntity_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DescriptorMappingModelEntity] DROP CONSTRAINT [DescriptorMappingModelEntity_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineActionDiscipline_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionDiscipline] DROP CONSTRAINT [DisciplineActionDiscipline_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineActionStaff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff] DROP CONSTRAINT [DisciplineActionStaff_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncidentBehavior_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentBehavior] DROP CONSTRAINT [DisciplineIncidentBehavior_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncidentExternalParticipant_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentExternalParticipant] DROP CONSTRAINT [DisciplineIncidentExternalParticipant_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[DisciplineIncidentWeapon_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentWeapon] DROP CONSTRAINT [DisciplineIncidentWeapon_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] DROP CONSTRAINT [EducationContentAppropriateGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateSex] DROP CONSTRAINT [EducationContentAppropriateSex_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAuthor] DROP CONSTRAINT [EducationContentAuthor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentDerivativeSourceEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] DROP CONSTRAINT [EducationContentDerivativeSourceEducationContent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] DROP CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentDerivativeSourceURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] DROP CONSTRAINT [EducationContentDerivativeSourceURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationContentLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentLanguage] DROP CONSTRAINT [EducationContentLanguage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddress] DROP CONSTRAINT [EducationOrganizationAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddressPeriod] DROP CONSTRAINT [EducationOrganizationAddressPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategory] DROP CONSTRAINT [EducationOrganizationCategory_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] DROP CONSTRAINT [EducationOrganizationIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationIndicator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicator] DROP CONSTRAINT [EducationOrganizationIndicator_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationIndicatorPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicatorPeriod] DROP CONSTRAINT [EducationOrganizationIndicatorPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInstitutionTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] DROP CONSTRAINT [EducationOrganizationInstitutionTelephone_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[EducationOrganizationInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] DROP CONSTRAINT [EducationOrganizationInternationalAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FunctionDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FunctionDimensionReportingTag] DROP CONSTRAINT [FunctionDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[FundDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FundDimensionReportingTag] DROP CONSTRAINT [FundDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus] DROP CONSTRAINT [GeneralStudentProgramAssociationProgramParticipationStatus_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradebookEntryLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] DROP CONSTRAINT [GradebookEntryLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GradeLearningStandardGrade_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade] DROP CONSTRAINT [GradeLearningStandardGrade_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanCreditsByCourse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] DROP CONSTRAINT [GraduationPlanCreditsByCourse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanCreditsByCourseCourse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] DROP CONSTRAINT [GraduationPlanCreditsByCourseCourse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanCreditsByCreditCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCreditCategory] DROP CONSTRAINT [GraduationPlanCreditsByCreditCategory_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanCreditsBySubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] DROP CONSTRAINT [GraduationPlanCreditsBySubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanRequiredAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] DROP CONSTRAINT [GraduationPlanRequiredAssessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanRequiredAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentPerformanceLevel] DROP CONSTRAINT [GraduationPlanRequiredAssessmentPerformanceLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[GraduationPlanRequiredAssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] DROP CONSTRAINT [GraduationPlanRequiredAssessmentScore_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] DROP CONSTRAINT [InterventionAppropriateGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateSex] DROP CONSTRAINT [InterventionAppropriateSex_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionDiagnosis_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionDiagnosis] DROP CONSTRAINT [InterventionDiagnosis_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent] DROP CONSTRAINT [InterventionEducationContent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionInterventionPrescription_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] DROP CONSTRAINT [InterventionInterventionPrescription_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] DROP CONSTRAINT [InterventionLearningResourceMetadataURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionMeetingTime_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionMeetingTime] DROP CONSTRAINT [InterventionMeetingTime_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPopulationServed] DROP CONSTRAINT [InterventionPopulationServed_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] DROP CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] DROP CONSTRAINT [InterventionPrescriptionAppropriateSex_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionDiagnosis_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] DROP CONSTRAINT [InterventionPrescriptionDiagnosis_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] DROP CONSTRAINT [InterventionPrescriptionEducationContent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] DROP CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] DROP CONSTRAINT [InterventionPrescriptionPopulationServed_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionPrescriptionURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionURI] DROP CONSTRAINT [InterventionPrescriptionURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStaff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStaff] DROP CONSTRAINT [InterventionStaff_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] DROP CONSTRAINT [InterventionStudyAppropriateGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateSex] DROP CONSTRAINT [InterventionStudyAppropriateSex_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] DROP CONSTRAINT [InterventionStudyEducationContent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyInterventionEffectiveness_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] DROP CONSTRAINT [InterventionStudyInterventionEffectiveness_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] DROP CONSTRAINT [InterventionStudyLearningResourceMetadataURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyPopulationServed] DROP CONSTRAINT [InterventionStudyPopulationServed_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyStateAbbreviation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] DROP CONSTRAINT [InterventionStudyStateAbbreviation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionStudyURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyURI] DROP CONSTRAINT [InterventionStudyURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[InterventionURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionURI] DROP CONSTRAINT [InterventionURI_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardAcademicSubject] DROP CONSTRAINT [LearningStandardAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardContentStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard] DROP CONSTRAINT [LearningStandardContentStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardContentStandardAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandardAuthor] DROP CONSTRAINT [LearningStandardContentStandardAuthor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardGradeLevel] DROP CONSTRAINT [LearningStandardGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LearningStandardIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardIdentificationCode] DROP CONSTRAINT [LearningStandardIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalAccountReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalAccountReportingTag] DROP CONSTRAINT [LocalAccountReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEducationAgencyAccountability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyAccountability] DROP CONSTRAINT [LocalEducationAgencyAccountability_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[LocalEducationAgencyFederalFunds_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] DROP CONSTRAINT [LocalEducationAgencyFederalFunds_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectDimensionReportingTag] DROP CONSTRAINT [ObjectDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessmentAssessmentItem_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] DROP CONSTRAINT [ObjectiveAssessmentAssessmentItem_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessmentLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] DROP CONSTRAINT [ObjectiveAssessmentLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] DROP CONSTRAINT [ObjectiveAssessmentPerformanceLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ObjectiveAssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentScore] DROP CONSTRAINT [ObjectiveAssessmentScore_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPositionAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] DROP CONSTRAINT [OpenStaffPositionAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OpenStaffPositionInstructionalGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] DROP CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[OperationalUnitDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimensionReportingTag] DROP CONSTRAINT [OperationalUnitDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[PostSecondaryInstitutionMediumOfInstruction_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitutionMediumOfInstruction] DROP CONSTRAINT [PostSecondaryInstitutionMediumOfInstruction_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristic] DROP CONSTRAINT [ProgramCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramDimensionReportingTag] DROP CONSTRAINT [ProgramDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationElementProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElementProgramEvaluationLevel] DROP CONSTRAINT [ProgramEvaluationElementProgramEvaluationLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationLevel] DROP CONSTRAINT [ProgramEvaluationLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel] DROP CONSTRAINT [ProgramEvaluationObjectiveProgramEvaluationLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard] DROP CONSTRAINT [ProgramLearningStandard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProgramSponsor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramSponsor] DROP CONSTRAINT [ProgramSponsor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ProjectDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProjectDimensionReportingTag] DROP CONSTRAINT [ProjectDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCardGrade_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardGrade] DROP CONSTRAINT [ReportCardGrade_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCardGradePointAverage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardGradePointAverage] DROP CONSTRAINT [ReportCardGradePointAverage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[ReportCardStudentCompetencyObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] DROP CONSTRAINT [ReportCardStudentCompetencyObjective_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEventProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram] DROP CONSTRAINT [RestraintEventProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[RestraintEventReason_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[RestraintEventReason] DROP CONSTRAINT [RestraintEventReason_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SchoolCategory] DROP CONSTRAINT [SchoolCategory_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SchoolGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SchoolGradeLevel] DROP CONSTRAINT [SchoolGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionCharacteristic] DROP CONSTRAINT [SectionCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod] DROP CONSTRAINT [SectionClassPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionCourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionCourseLevelCharacteristic] DROP CONSTRAINT [SectionCourseLevelCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionOfferedGradeLevel] DROP CONSTRAINT [SectionOfferedGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SectionProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionProgram] DROP CONSTRAINT [SectionProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SessionAcademicWeek_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek] DROP CONSTRAINT [SessionAcademicWeek_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SessionGradingPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod] DROP CONSTRAINT [SessionGradingPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SourceDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SourceDimensionReportingTag] DROP CONSTRAINT [SourceDimensionReportingTag_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAddress] DROP CONSTRAINT [StaffAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAddressPeriod] DROP CONSTRAINT [StaffAddressPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffAncestryEthnicOrigin_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAncestryEthnicOrigin] DROP CONSTRAINT [StaffAncestryEthnicOrigin_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffCredential_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffCredential] DROP CONSTRAINT [StaffCredential_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddress] DROP CONSTRAINT [StaffEducationOrganizationContactAssociationAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod] DROP CONSTRAINT [StaffEducationOrganizationContactAssociationAddressPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffEducationOrganizationContactAssociationTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationTelephone] DROP CONSTRAINT [StaffEducationOrganizationContactAssociationTelephone_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffElectronicMail] DROP CONSTRAINT [StaffElectronicMail_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffIdentificationCode] DROP CONSTRAINT [StaffIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffIdentificationDocument] DROP CONSTRAINT [StaffIdentificationDocument_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffInternationalAddress] DROP CONSTRAINT [StaffInternationalAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffLanguage] DROP CONSTRAINT [StaffLanguage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffLanguageUse] DROP CONSTRAINT [StaffLanguageUse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffOtherName] DROP CONSTRAINT [StaffOtherName_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffPersonalIdentificationDocument] DROP CONSTRAINT [StaffPersonalIdentificationDocument_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffRace_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffRace] DROP CONSTRAINT [StaffRace_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffRecognition_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffRecognition] DROP CONSTRAINT [StaffRecognition_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociationAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] DROP CONSTRAINT [StaffSchoolAssociationAcademicSubject_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffSchoolAssociationGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] DROP CONSTRAINT [StaffSchoolAssociationGradeLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffTelephone] DROP CONSTRAINT [StaffTelephone_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffTribalAffiliation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffTribalAffiliation] DROP CONSTRAINT [StaffTribalAffiliation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StaffVisa_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffVisa] DROP CONSTRAINT [StaffVisa_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StateEducationAgencyAccountability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyAccountability] DROP CONSTRAINT [StateEducationAgencyAccountability_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StateEducationAgencyFederalFunds_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] DROP CONSTRAINT [StateEducationAgencyFederalFunds_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordAcademicHonor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] DROP CONSTRAINT [StudentAcademicRecordAcademicHonor_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordClassRanking_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] DROP CONSTRAINT [StudentAcademicRecordClassRanking_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordDiploma_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordDiploma] DROP CONSTRAINT [StudentAcademicRecordDiploma_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordGradePointAverage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordGradePointAverage] DROP CONSTRAINT [StudentAcademicRecordGradePointAverage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordRecognition_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordRecognition] DROP CONSTRAINT [StudentAcademicRecordRecognition_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAcademicRecordReportCard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] DROP CONSTRAINT [StudentAcademicRecordReportCard_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentAccommodation] DROP CONSTRAINT [StudentAssessmentAccommodation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentItem_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem] DROP CONSTRAINT [StudentAssessmentItem_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] DROP CONSTRAINT [StudentAssessmentPerformanceLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPeriod] DROP CONSTRAINT [StudentAssessmentPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentScoreResult_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentScoreResult] DROP CONSTRAINT [StudentAssessmentScoreResult_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] DROP CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] DROP CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] DROP CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCohortAssociationSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] DROP CONSTRAINT [StudentCohortAssociationSection_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] DROP CONSTRAINT [StudentCompetencyObjectiveGeneralStudentProgramAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCompetencyObjectiveStudentSectionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] DROP CONSTRAINT [StudentCompetencyObjectiveStudentSectionAssociation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentCTEProgramAssociationCTEProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgramService] DROP CONSTRAINT [StudentCTEProgramAssociationCTEProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddress] DROP CONSTRAINT [StudentEducationOrganizationAssociationAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddressPeriod] DROP CONSTRAINT [StudentEducationOrganizationAssociationAddressPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin] DROP CONSTRAINT [StudentEducationOrganizationAssociationAncestryEthnicOrigin_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationCohortYear_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] DROP CONSTRAINT [StudentEducationOrganizationAssociationCohortYear_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationDisability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisability] DROP CONSTRAINT [StudentEducationOrganizationAssociationDisability_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationDisabilityDesignation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisabilityDesignation] DROP CONSTRAINT [StudentEducationOrganizationAssociationDisabilityDesignation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationDisplacedStudent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] DROP CONSTRAINT [StudentEducationOrganizationAssociationDisplacedStudent_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationElectronicMail] DROP CONSTRAINT [StudentEducationOrganizationAssociationElectronicMail_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationInternationalAddress] DROP CONSTRAINT [StudentEducationOrganizationAssociationInternationalAddress_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguage] DROP CONSTRAINT [StudentEducationOrganizationAssociationLanguage_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguageUse] DROP CONSTRAINT [StudentEducationOrganizationAssociationLanguageUse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationRace_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationRace] DROP CONSTRAINT [StudentEducationOrganizationAssociationRace_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] DROP CONSTRAINT [StudentEducationOrganizationAssociationStudentCharacteristic_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod] DROP CONSTRAINT [StudentEducationOrganizationAssociationStudentCharacteristicPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] DROP CONSTRAINT [StudentEducationOrganizationAssociationStudentIdentificationCode_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIndicator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicator] DROP CONSTRAINT [StudentEducationOrganizationAssociationStudentIndicator_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod] DROP CONSTRAINT [StudentEducationOrganizationAssociationStudentIndicatorPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTelephone] DROP CONSTRAINT [StudentEducationOrganizationAssociationTelephone_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentEducationOrganizationAssociationTribalAffiliation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTribalAffiliation] DROP CONSTRAINT [StudentEducationOrganizationAssociationTribalAffiliation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealthAdditionalImmunization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunization] DROP CONSTRAINT [StudentHealthAdditionalImmunization_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealthAdditionalImmunizationDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunizationDate] DROP CONSTRAINT [StudentHealthAdditionalImmunizationDate_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealthRequiredImmunization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunization] DROP CONSTRAINT [StudentHealthRequiredImmunization_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHealthRequiredImmunizationDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunizationDate] DROP CONSTRAINT [StudentHealthRequiredImmunizationDate_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentHomelessProgramAssociationHomelessProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHomelessProgramAssociationHomelessProgramService] DROP CONSTRAINT [StudentHomelessProgramAssociationHomelessProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentIdentificationDocument] DROP CONSTRAINT [StudentIdentificationDocument_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] DROP CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment] DROP CONSTRAINT [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService] DROP CONSTRAINT [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService] DROP CONSTRAINT [StudentMigrantEducationProgramAssociationMigrantEducationProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService] DROP CONSTRAINT [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentOtherName] DROP CONSTRAINT [StudentOtherName_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentPersonalIdentificationDocument] DROP CONSTRAINT [StudentPersonalIdentificationDocument_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramAssociationService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramAssociationService] DROP CONSTRAINT [StudentProgramAssociationService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluationExternalEvaluator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationExternalEvaluator] DROP CONSTRAINT [StudentProgramEvaluationExternalEvaluator_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluationStudentEvaluationElement_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] DROP CONSTRAINT [StudentProgramEvaluationStudentEvaluationElement_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentProgramEvaluationStudentEvaluationObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] DROP CONSTRAINT [StudentProgramEvaluationStudentEvaluationObjective_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociationAlternativeGraduationPlan_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] DROP CONSTRAINT [StudentSchoolAssociationAlternativeGraduationPlan_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolAssociationEducationPlan_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] DROP CONSTRAINT [StudentSchoolAssociationEducationPlan_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService] DROP CONSTRAINT [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAssociationProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram] DROP CONSTRAINT [StudentSectionAssociationProgram_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSectionAttendanceEventClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] DROP CONSTRAINT [StudentSectionAttendanceEventClassPeriod_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramAssociationDisability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisability] DROP CONSTRAINT [StudentSpecialEducationProgramAssociationDisability_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramAssociationDisabilityDesignation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisabilityDesignation] DROP CONSTRAINT [StudentSpecialEducationProgramAssociationDisabilityDesignation_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] DROP CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService] DROP CONSTRAINT [StudentSpecialEducationProgramAssociationSpecialEducationProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider] DROP CONSTRAINT [StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService] DROP CONSTRAINT [StudentTitleIPartAProgramAssociationTitleIPartAProgramService_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportationStudentBusDetails_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetails] DROP CONSTRAINT [StudentTransportationStudentBusDetails_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportationStudentBusDetailsTravelDayofWeek_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetailsTravelDayofWeek] DROP CONSTRAINT [StudentTransportationStudentBusDetailsTravelDayofWeek_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentTransportationStudentBusDetailsTravelDirection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetailsTravelDirection] DROP CONSTRAINT [StudentTransportationStudentBusDetailsTravelDirection_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[StudentVisa_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentVisa] DROP CONSTRAINT [StudentVisa_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionMatrix_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionMatrix] DROP CONSTRAINT [SurveyQuestionMatrix_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponseChoice_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseChoice] DROP CONSTRAINT [SurveyQuestionResponseChoice_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] DROP CONSTRAINT [SurveyQuestionResponseSurveyQuestionMatrixElementResponse_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyQuestionResponseValue_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseValue] DROP CONSTRAINT [SurveyQuestionResponseValue_DF_CreateDate];


GO
PRINT N'Dropping Default Constraint [edfi].[SurveyResponseSurveyLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseSurveyLevel] DROP CONSTRAINT [SurveyResponseSurveyLevel_DF_CreateDate];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AcademicWeek_School]...';


GO
ALTER TABLE [edfi].[AcademicWeek] DROP CONSTRAINT [FK_AcademicWeek_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SessionAcademicWeek_AcademicWeek]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek] DROP CONSTRAINT [FK_SessionAcademicWeek_AcademicWeek];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AccountabilityRating_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [FK_AccountabilityRating_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AccountabilityRating_SchoolYearType]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] DROP CONSTRAINT [FK_AccountabilityRating_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentSection_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentSection] DROP CONSTRAINT [FK_AssessmentSection_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Assessment_AssessmentCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [FK_Assessment_AssessmentCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Assessment_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Assessment] DROP CONSTRAINT [FK_Assessment_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentAcademicSubject_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentAcademicSubject] DROP CONSTRAINT [FK_AssessmentAcademicSubject_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentAssessedGradeLevel_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentAssessedGradeLevel] DROP CONSTRAINT [FK_AssessmentAssessedGradeLevel_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentContentStandard_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard] DROP CONSTRAINT [FK_AssessmentContentStandard_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentIdentificationCode_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationCode] DROP CONSTRAINT [FK_AssessmentIdentificationCode_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItem_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [FK_AssessmentItem_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [FK_ObjectiveAssessment_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentLanguage_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentLanguage] DROP CONSTRAINT [FK_AssessmentLanguage_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentPerformanceLevel_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPerformanceLevel] DROP CONSTRAINT [FK_AssessmentPerformanceLevel_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentPeriod_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPeriod] DROP CONSTRAINT [FK_AssessmentPeriod_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanRequiredAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] DROP CONSTRAINT [FK_GraduationPlanRequiredAssessment_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentPlatformType_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPlatformType] DROP CONSTRAINT [FK_AssessmentPlatformType_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentProgram_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentProgram] DROP CONSTRAINT [FK_AssessmentProgram_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScore_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentScore] DROP CONSTRAINT [FK_AssessmentScore_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_Assessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentItem_AssessmentItem]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem] DROP CONSTRAINT [FK_StudentAssessmentItem_AssessmentItem];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItem_AssessmentItemCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItem] DROP CONSTRAINT [FK_AssessmentItem_AssessmentItemCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItemLearningStandard_AssessmentItem]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] DROP CONSTRAINT [FK_AssessmentItemLearningStandard_AssessmentItem];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItemPossibleResponse_AssessmentItem]...';


GO
ALTER TABLE [edfi].[AssessmentItemPossibleResponse] DROP CONSTRAINT [FK_AssessmentItemPossibleResponse_AssessmentItem];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentAssessmentItem_AssessmentItem]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] DROP CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandardLearningStandard_AssessmentScoreRangeLearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] DROP CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_AssessmentScoreRangeLearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] DROP CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BalanceSheetDimensionReportingTag_BalanceSheetDimension]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimensionReportingTag] DROP CONSTRAINT [FK_BalanceSheetDimensionReportingTag_BalanceSheetDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_BalanceSheetDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_BalanceSheetDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BellSchedule_School]...';


GO
ALTER TABLE [edfi].[BellSchedule] DROP CONSTRAINT [FK_BellSchedule_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BellScheduleClassPeriod_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod] DROP CONSTRAINT [FK_BellScheduleClassPeriod_BellSchedule];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BellScheduleDate_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleDate] DROP CONSTRAINT [FK_BellScheduleDate_BellSchedule];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BellScheduleGradeLevel_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleGradeLevel] DROP CONSTRAINT [FK_BellScheduleGradeLevel_BellSchedule];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_Calendar]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_Calendar];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Calendar_CalendarTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [FK_Calendar_CalendarTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Calendar_School]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [FK_Calendar_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Calendar_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Calendar] DROP CONSTRAINT [FK_Calendar_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CalendarDate_Calendar]...';


GO
ALTER TABLE [edfi].[CalendarDate] DROP CONSTRAINT [FK_CalendarDate_Calendar];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CalendarGradeLevel_Calendar]...';


GO
ALTER TABLE [edfi].[CalendarGradeLevel] DROP CONSTRAINT [FK_CalendarGradeLevel_Calendar];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociation_Calendar]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [FK_StaffSchoolAssociation_Calendar];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CalendarDateCalendarEvent_CalendarDate]...';


GO
ALTER TABLE [edfi].[CalendarDateCalendarEvent] DROP CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarDate];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_CalendarDate]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [FK_SectionAttendanceTakenEvent_CalendarDate];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalAccount_ChartOfAccount]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [FK_LocalAccount_ChartOfAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_AccountTypeDescriptor]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_AccountTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_EducationOrganization]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_FunctionDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_FunctionDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_FundDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_FundDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_ObjectDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_ObjectDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_OperationalUnitDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_OperationalUnitDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_ProgramDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_ProgramDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_ProjectDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_ProjectDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccount_SourceDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_SourceDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ChartOfAccountReportingTag_ChartOfAccount]...';


GO
ALTER TABLE [edfi].[ChartOfAccountReportingTag] DROP CONSTRAINT [FK_ChartOfAccountReportingTag_ChartOfAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BellScheduleClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod] DROP CONSTRAINT [FK_BellScheduleClassPeriod_ClassPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEventClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] DROP CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_ClassPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ClassPeriod_School]...';


GO
ALTER TABLE [edfi].[ClassPeriod] DROP CONSTRAINT [FK_ClassPeriod_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ClassPeriodMeetingTime_ClassPeriod]...';


GO
ALTER TABLE [edfi].[ClassPeriodMeetingTime] DROP CONSTRAINT [FK_ClassPeriodMeetingTime_ClassPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod] DROP CONSTRAINT [FK_SectionClassPeriod_ClassPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffCohortAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [FK_StaffCohortAssociation_Cohort];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCohortAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [FK_StudentCohortAssociation_Cohort];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Cohort_AcademicSubjectDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [FK_Cohort_AcademicSubjectDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Cohort_CohortScopeDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [FK_Cohort_CohortScopeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Cohort_CohortTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [FK_Cohort_CohortTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Cohort_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Cohort] DROP CONSTRAINT [FK_Cohort_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [FK_StudentInterventionAssociation_Cohort];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CohortProgram_Cohort]...';


GO
ALTER TABLE [edfi].[CohortProgram] DROP CONSTRAINT [FK_CohortProgram_Cohort];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CommunityProviderLicense_CommunityProvider]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [FK_CommunityProviderLicense_CommunityProvider];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CommunityProviderLicense_LicenseStatusDescriptor]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [FK_CommunityProviderLicense_LicenseStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CommunityProviderLicense_LicenseTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] DROP CONSTRAINT [FK_CommunityProviderLicense_LicenseTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjective_CompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [FK_StudentCompetencyObjective_CompetencyObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CompetencyObjective_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [FK_CompetencyObjective_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CompetencyObjective_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] DROP CONSTRAINT [FK_CompetencyObjective_GradeLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactLanguage_Contact]...';


GO
ALTER TABLE [edfi].[ContactLanguage] DROP CONSTRAINT [FK_ContactLanguage_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactOtherName_Contact]...';


GO
ALTER TABLE [edfi].[ContactOtherName] DROP CONSTRAINT [FK_ContactOtherName_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactPersonalIdentificationDocument_Contact]...';


GO
ALTER TABLE [edfi].[ContactPersonalIdentificationDocument] DROP CONSTRAINT [FK_ContactPersonalIdentificationDocument_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponse_Contact]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [FK_SurveyResponse_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactTelephone_Contact]...';


GO
ALTER TABLE [edfi].[ContactTelephone] DROP CONSTRAINT [FK_ContactTelephone_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentContactAssociation_Contact]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [FK_StudentContactAssociation_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Contact_LevelOfEducationDescriptor]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [FK_Contact_LevelOfEducationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Contact_Person]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [FK_Contact_Person];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Contact_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Contact] DROP CONSTRAINT [FK_Contact_SexDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactAddress_Contact]...';


GO
ALTER TABLE [edfi].[ContactAddress] DROP CONSTRAINT [FK_ContactAddress_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactElectronicMail_Contact]...';


GO
ALTER TABLE [edfi].[ContactElectronicMail] DROP CONSTRAINT [FK_ContactElectronicMail_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactInternationalAddress_Contact]...';


GO
ALTER TABLE [edfi].[ContactInternationalAddress] DROP CONSTRAINT [FK_ContactInternationalAddress_Contact];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_CareerPathwayDescriptor]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_CareerPathwayDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_CourseDefinedByDescriptor]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_CourseDefinedByDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_CourseGPAApplicabilityDescriptor]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_CourseGPAApplicabilityDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_CreditTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_CreditTypeDescriptor1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Course_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Course] DROP CONSTRAINT [FK_Course_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseAcademicSubject_Course]...';


GO
ALTER TABLE [edfi].[CourseAcademicSubject] DROP CONSTRAINT [FK_CourseAcademicSubject_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseCompetencyLevel_Course]...';


GO
ALTER TABLE [edfi].[CourseCompetencyLevel] DROP CONSTRAINT [FK_CourseCompetencyLevel_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseIdentificationCode_Course]...';


GO
ALTER TABLE [edfi].[CourseIdentificationCode] DROP CONSTRAINT [FK_CourseIdentificationCode_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseLearningStandard_Course]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard] DROP CONSTRAINT [FK_CourseLearningStandard_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseLevelCharacteristic_Course]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristic] DROP CONSTRAINT [FK_CourseLevelCharacteristic_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOfferedGradeLevel_Course]...';


GO
ALTER TABLE [edfi].[CourseOfferedGradeLevel] DROP CONSTRAINT [FK_CourseOfferedGradeLevel_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOffering_Course]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [FK_CourseOffering_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_Course]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanCreditsByCourseCourse_Course]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] DROP CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyCourseAssociation_Course]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [FK_SurveyCourseAssociation_Course];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOffering_Session]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [FK_CourseOffering_Session];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOffering_School]...';


GO
ALTER TABLE [edfi].[CourseOffering] DROP CONSTRAINT [FK_CourseOffering_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOfferingCourseLevelCharacteristic_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingCourseLevelCharacteristic] DROP CONSTRAINT [FK_CourseOfferingCourseLevelCharacteristic_CourseOffering];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOfferingCurriculumUsed_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] DROP CONSTRAINT [FK_CourseOfferingCurriculumUsed_CourseOffering];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseOfferingOfferedGradeLevel_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingOfferedGradeLevel] DROP CONSTRAINT [FK_CourseOfferingOfferedGradeLevel_CourseOffering];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_CourseOffering]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_CourseOffering];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_CourseAttemptResultDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_CourseAttemptResultDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_CourseRepeatCodeDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_CourseRepeatCodeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_GradeLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_MethodCreditEarnedDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_MethodCreditEarnedDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_Staff]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscript_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[CourseTranscript] DROP CONSTRAINT [FK_CourseTranscript_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptAcademicSubject_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAcademicSubject] DROP CONSTRAINT [FK_CourseTranscriptAcademicSubject_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptAlternativeCourseIdentificationCode_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAlternativeCourseIdentificationCode] DROP CONSTRAINT [FK_CourseTranscriptAlternativeCourseIdentificationCode_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptCourseProgram_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram] DROP CONSTRAINT [FK_CourseTranscriptCourseProgram_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptCreditCategory_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCreditCategory] DROP CONSTRAINT [FK_CourseTranscriptCreditCategory_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] DROP CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptPartialCourseTranscriptAwards_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptPartialCourseTranscriptAwards] DROP CONSTRAINT [FK_CourseTranscriptPartialCourseTranscriptAwards_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptSection_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection] DROP CONSTRAINT [FK_CourseTranscriptSection_CourseTranscript];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffCredential_Credential]...';


GO
ALTER TABLE [edfi].[StaffCredential] DROP CONSTRAINT [FK_StaffCredential_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_Credential]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_Credential]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Credential_CredentialFieldDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [FK_Credential_CredentialFieldDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Credential_CredentialTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [FK_Credential_CredentialTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Credential_StateAbbreviationDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [FK_Credential_StateAbbreviationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Credential_TeachingCredentialBasisDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [FK_Credential_TeachingCredentialBasisDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Credential_TeachingCredentialDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] DROP CONSTRAINT [FK_Credential_TeachingCredentialDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CredentialAcademicSubject_Credential]...';


GO
ALTER TABLE [edfi].[CredentialAcademicSubject] DROP CONSTRAINT [FK_CredentialAcademicSubject_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CredentialEndorsement_Credential]...';


GO
ALTER TABLE [edfi].[CredentialEndorsement] DROP CONSTRAINT [FK_CredentialEndorsement_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CredentialGradeLevel_Credential]...';


GO
ALTER TABLE [edfi].[CredentialGradeLevel] DROP CONSTRAINT [FK_CredentialGradeLevel_Credential];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisplacedStudent_CrisisEvent]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_CrisisEvent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CrisisEvent_CrisisTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CrisisEvent] DROP CONSTRAINT [FK_CrisisEvent_CrisisTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IDEAPartDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IDEAPartDescriptor] DROP CONSTRAINT [FK_IDEAPartDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OperationalStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[OperationalStatusDescriptor] DROP CONSTRAINT [FK_OperationalStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_QuestionFormDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[QuestionFormDescriptor] DROP CONSTRAINT [FK_QuestionFormDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IdentificationDocumentUseDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IdentificationDocumentUseDescriptor] DROP CONSTRAINT [FK_IdentificationDocumentUseDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SourceSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SourceSystemDescriptor] DROP CONSTRAINT [FK_SourceSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RaceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RaceDescriptor] DROP CONSTRAINT [FK_RaceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ImmunizationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ImmunizationTypeDescriptor] DROP CONSTRAINT [FK_ImmunizationTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SpecialEducationExitReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationExitReasonDescriptor] DROP CONSTRAINT [FK_SpecialEducationExitReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RatingLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RatingLevelDescriptor] DROP CONSTRAINT [FK_RatingLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IncidentLocationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IncidentLocationDescriptor] DROP CONSTRAINT [FK_IncidentLocationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StateAbbreviationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StateAbbreviationDescriptor] DROP CONSTRAINT [FK_StateAbbreviationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SpecialEducationProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationProgramServiceDescriptor] DROP CONSTRAINT [FK_SpecialEducationProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReasonExitedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReasonExitedDescriptor] DROP CONSTRAINT [FK_ReasonExitedDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssignmentLateStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssignmentLateStatusDescriptor] DROP CONSTRAINT [FK_AssignmentLateStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorDescriptor] DROP CONSTRAINT [FK_IndicatorDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SpecialEducationSettingDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] DROP CONSTRAINT [FK_SpecialEducationSettingDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationPlanDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationPlanDescriptor] DROP CONSTRAINT [FK_EducationPlanDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReasonNotTestedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReasonNotTestedDescriptor] DROP CONSTRAINT [FK_ReasonNotTestedDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AttemptStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AttemptStatusDescriptor] DROP CONSTRAINT [FK_AttemptStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IndicatorGroupDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorGroupDescriptor] DROP CONSTRAINT [FK_IndicatorGroupDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardEquivalenceStrengthDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceStrengthDescriptor] DROP CONSTRAINT [FK_LearningStandardEquivalenceStrengthDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RecognitionTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RecognitionTypeDescriptor] DROP CONSTRAINT [FK_RecognitionTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AttendanceEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] DROP CONSTRAINT [FK_AttendanceEventCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_IndicatorLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorLevelDescriptor] DROP CONSTRAINT [FK_IndicatorLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OtherNameTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[OtherNameTypeDescriptor] DROP CONSTRAINT [FK_OtherNameTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ElectronicMailTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ElectronicMailTypeDescriptor] DROP CONSTRAINT [FK_ElectronicMailTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RelationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RelationDescriptor] DROP CONSTRAINT [FK_RelationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InstitutionTelephoneNumberTypeDescriptor] DROP CONSTRAINT [FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ParticipationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ParticipationDescriptor] DROP CONSTRAINT [FK_ParticipationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EligibilityDelayReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EligibilityDelayReasonDescriptor] DROP CONSTRAINT [FK_EligibilityDelayReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RepeatIdentifierDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RepeatIdentifierDescriptor] DROP CONSTRAINT [FK_RepeatIdentifierDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DiagnosisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiagnosisDescriptor] DROP CONSTRAINT [FK_DiagnosisDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContactTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContactTypeDescriptor] DROP CONSTRAINT [FK_ContactTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InteractivityStyleDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InteractivityStyleDescriptor] DROP CONSTRAINT [FK_InteractivityStyleDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ParticipationStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ParticipationStatusDescriptor] DROP CONSTRAINT [FK_ParticipationStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EligibilityEvaluationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EligibilityEvaluationTypeDescriptor] DROP CONSTRAINT [FK_EligibilityEvaluationTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DiplomaLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiplomaLevelDescriptor] DROP CONSTRAINT [FK_DiplomaLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContentClassDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContentClassDescriptor] DROP CONSTRAINT [FK_ContentClassDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InternetAccessDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetAccessDescriptor] DROP CONSTRAINT [FK_InternetAccessDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PerformanceBaseConversionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PerformanceBaseConversionDescriptor] DROP CONSTRAINT [FK_PerformanceBaseConversionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardScopeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardScopeDescriptor] DROP CONSTRAINT [FK_LearningStandardScopeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EmploymentStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EmploymentStatusDescriptor] DROP CONSTRAINT [FK_EmploymentStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DiplomaTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiplomaTypeDescriptor] DROP CONSTRAINT [FK_DiplomaTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ContinuationOfServicesReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] DROP CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InternetAccessTypeInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetAccessTypeInResidenceDescriptor] DROP CONSTRAINT [FK_InternetAccessTypeInResidenceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PerformanceLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PerformanceLevelDescriptor] DROP CONSTRAINT [FK_PerformanceLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LevelOfEducationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LevelOfEducationDescriptor] DROP CONSTRAINT [FK_LevelOfEducationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EnrollmentTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EnrollmentTypeDescriptor] DROP CONSTRAINT [FK_EnrollmentTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDescriptor] DROP CONSTRAINT [FK_DisabilityDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CostRateDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CostRateDescriptor] DROP CONSTRAINT [FK_CostRateDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BarrierToInternetAccessInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BarrierToInternetAccessInResidenceDescriptor] DROP CONSTRAINT [FK_BarrierToInternetAccessInResidenceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InternetPerformanceInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetPerformanceInResidenceDescriptor] DROP CONSTRAINT [FK_InternetPerformanceInResidenceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LicenseStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LicenseStatusDescriptor] DROP CONSTRAINT [FK_LicenseStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EntryGradeLevelReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EntryGradeLevelReasonDescriptor] DROP CONSTRAINT [FK_EntryGradeLevelReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisabilityDesignationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDesignationDescriptor] DROP CONSTRAINT [FK_DisabilityDesignationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CountryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CountryDescriptor] DROP CONSTRAINT [FK_CountryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BehaviorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BehaviorDescriptor] DROP CONSTRAINT [FK_BehaviorDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LicenseTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LicenseTypeDescriptor] DROP CONSTRAINT [FK_LicenseTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EntryTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EntryTypeDescriptor] DROP CONSTRAINT [FK_EntryTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDeterminationSourceTypeDescriptor] DROP CONSTRAINT [FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LimitedEnglishProficiencyDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] DROP CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EvaluationDelayReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EvaluationDelayReasonDescriptor] DROP CONSTRAINT [FK_EvaluationDelayReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PersonalInformationVerificationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PersonalInformationVerificationDescriptor] DROP CONSTRAINT [FK_PersonalInformationVerificationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PlatformTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PlatformTypeDescriptor] DROP CONSTRAINT [FK_PlatformTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffClassificationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffClassificationDescriptor] DROP CONSTRAINT [FK_StaffClassificationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReporterDescriptionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReporterDescriptionDescriptor] DROP CONSTRAINT [FK_ReporterDescriptionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PopulationServedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PopulationServedDescriptor] DROP CONSTRAINT [FK_PopulationServedDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportingTagDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReportingTagDescriptor] DROP CONSTRAINT [FK_ReportingTagDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostingResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostingResultDescriptor] DROP CONSTRAINT [FK_PostingResultDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseAttemptResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseAttemptResultDescriptor] DROP CONSTRAINT [FK_CourseAttemptResultDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EventCircumstanceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EventCircumstanceDescriptor] DROP CONSTRAINT [FK_EventCircumstanceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionClassDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InterventionClassDescriptor] DROP CONSTRAINT [FK_InterventionClassDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ResidencyStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResidencyStatusDescriptor] DROP CONSTRAINT [FK_ResidencyStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonDescriptor] DROP CONSTRAINT [FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ExitWithdrawTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] DROP CONSTRAINT [FK_ExitWithdrawTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ResponseIndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResponseIndicatorDescriptor] DROP CONSTRAINT [FK_ResponseIndicatorDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AbsenceEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AbsenceEventCategoryDescriptor] DROP CONSTRAINT [FK_AbsenceEventCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseDefinedByDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseDefinedByDescriptor] DROP CONSTRAINT [FK_CourseDefinedByDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ResponsibilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResponsibilityDescriptor] DROP CONSTRAINT [FK_ResponsibilityDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_BusRouteDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BusRouteDescriptor] DROP CONSTRAINT [FK_BusRouteDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AcademicHonorCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AcademicHonorCategoryDescriptor] DROP CONSTRAINT [FK_AcademicHonorCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryEventCategoryDescriptor] DROP CONSTRAINT [FK_PostSecondaryEventCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseGPAApplicabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseGPAApplicabilityDescriptor] DROP CONSTRAINT [FK_CourseGPAApplicabilityDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AcademicSubjectDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AcademicSubjectDescriptor] DROP CONSTRAINT [FK_AcademicSubjectDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionEffectivenessRatingDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InterventionEffectivenessRatingDescriptor] DROP CONSTRAINT [FK_InterventionEffectivenessRatingDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_FinancialCollectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[FinancialCollectionDescriptor] DROP CONSTRAINT [FK_FinancialCollectionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineDescriptor] DROP CONSTRAINT [FK_DisciplineDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryInstitutionLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitutionLevelDescriptor] DROP CONSTRAINT [FK_PostSecondaryInstitutionLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] DROP CONSTRAINT [FK_CourseIdentificationSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AccommodationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AccommodationDescriptor] DROP CONSTRAINT [FK_AccommodationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PrimaryLearningDeviceAccessDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceAccessDescriptor] DROP CONSTRAINT [FK_PrimaryLearningDeviceAccessDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PrimaryLearningDeviceAwayFromSchoolDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceAwayFromSchoolDescriptor] DROP CONSTRAINT [FK_PrimaryLearningDeviceAwayFromSchoolDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocaleDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LocaleDescriptor] DROP CONSTRAINT [FK_LocaleDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEventReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RestraintEventReasonDescriptor] DROP CONSTRAINT [FK_RestraintEventReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PrimaryLearningDeviceProviderDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceProviderDescriptor] DROP CONSTRAINT [FK_PrimaryLearningDeviceProviderDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseLevelCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristicDescriptor] DROP CONSTRAINT [FK_CourseLevelCharacteristicDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TeachingCredentialBasisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TeachingCredentialBasisDescriptor] DROP CONSTRAINT [FK_TeachingCredentialBasisDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ResultDatatypeTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResultDatatypeTypeDescriptor] DROP CONSTRAINT [FK_ResultDatatypeTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CalendarEventDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CalendarEventDescriptor] DROP CONSTRAINT [FK_CalendarEventDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProficiencyDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProficiencyDescriptor] DROP CONSTRAINT [FK_ProficiencyDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AccountTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AccountTypeDescriptor] DROP CONSTRAINT [FK_AccountTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TeachingCredentialDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TeachingCredentialDescriptor] DROP CONSTRAINT [FK_TeachingCredentialDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RetestIndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RetestIndicatorDescriptor] DROP CONSTRAINT [FK_RetestIndicatorDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncidentParticipationCodeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentParticipationCodeDescriptor] DROP CONSTRAINT [FK_DisciplineIncidentParticipationCodeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AchievementCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AchievementCategoryDescriptor] DROP CONSTRAINT [FK_AchievementCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TechnicalSkillsAssessmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TechnicalSkillsAssessmentDescriptor] DROP CONSTRAINT [FK_TechnicalSkillsAssessmentDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalEducationAgencyCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyCategoryDescriptor] DROP CONSTRAINT [FK_LocalEducationAgencyCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CalendarTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CalendarTypeDescriptor] DROP CONSTRAINT [FK_CalendarTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AdditionalCreditTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdditionalCreditTypeDescriptor] DROP CONSTRAINT [FK_AdditionalCreditTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TelephoneNumberTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TelephoneNumberTypeDescriptor] DROP CONSTRAINT [FK_TelephoneNumberTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisplacedStudentStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisplacedStudentStatusDescriptor] DROP CONSTRAINT [FK_DisplacedStudentStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CareerPathwayDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CareerPathwayDescriptor] DROP CONSTRAINT [FK_CareerPathwayDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AddressTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AddressTypeDescriptor] DROP CONSTRAINT [FK_AddressTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TermDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TermDescriptor] DROP CONSTRAINT [FK_TermDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramAssignmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramAssignmentDescriptor] DROP CONSTRAINT [FK_ProgramAssignmentDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SchoolCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolCategoryDescriptor] DROP CONSTRAINT [FK_SchoolCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationalEnvironmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationalEnvironmentDescriptor] DROP CONSTRAINT [FK_EducationalEnvironmentDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CharterApprovalAgencyTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CharterApprovalAgencyTypeDescriptor] DROP CONSTRAINT [FK_CharterApprovalAgencyTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AdministrationEnvironmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdministrationEnvironmentDescriptor] DROP CONSTRAINT [FK_AdministrationEnvironmentDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TitleIPartAParticipantDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartAParticipantDescriptor] DROP CONSTRAINT [FK_TitleIPartAParticipantDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SchoolChoiceBasisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolChoiceBasisDescriptor] DROP CONSTRAINT [FK_SchoolChoiceBasisDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CharterStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CharterStatusDescriptor] DROP CONSTRAINT [FK_CharterStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AdministrativeFundingControlDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] DROP CONSTRAINT [FK_AdministrativeFundingControlDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TitleIPartAProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartAProgramServiceDescriptor] DROP CONSTRAINT [FK_TitleIPartAProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SchoolChoiceImplementStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolChoiceImplementStatusDescriptor] DROP CONSTRAINT [FK_SchoolChoiceImplementStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] DROP CONSTRAINT [FK_ProgramCharacteristicDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AncestryEthnicOriginDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AncestryEthnicOriginDescriptor] DROP CONSTRAINT [FK_AncestryEthnicOriginDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TitleIPartASchoolDesignationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartASchoolDesignationDescriptor] DROP CONSTRAINT [FK_TitleIPartASchoolDesignationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolFoodServiceProgramServiceDescriptor] DROP CONSTRAINT [FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TransportationPublicExpenseEligibilityTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TransportationPublicExpenseEligibilityTypeDescriptor] DROP CONSTRAINT [FK_TransportationPublicExpenseEligibilityTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TransportationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TransportationTypeDescriptor] DROP CONSTRAINT [FK_TransportationTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseRepeatCodeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseRepeatCodeDescriptor] DROP CONSTRAINT [FK_CourseRepeatCodeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TravelDayofWeekDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TravelDayofWeekDescriptor] DROP CONSTRAINT [FK_TravelDayofWeekDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SchoolTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolTypeDescriptor] DROP CONSTRAINT [FK_SchoolTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CitizenshipStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CitizenshipStatusDescriptor] DROP CONSTRAINT [FK_CitizenshipStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TravelDirectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TravelDirectionDescriptor] DROP CONSTRAINT [FK_TravelDirectionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_TribalAffiliationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TribalAffiliationDescriptor] DROP CONSTRAINT [FK_TribalAffiliationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolDescriptor] DROP CONSTRAINT [FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StudentCharacteristicDescriptor] DROP CONSTRAINT [FK_StudentCharacteristicDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_VisaDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[VisaDescriptor] DROP CONSTRAINT [FK_VisaDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_MediumOfInstructionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MediumOfInstructionDescriptor] DROP CONSTRAINT [FK_MediumOfInstructionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentCategoryDescriptor] DROP CONSTRAINT [FK_AssessmentCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] DROP CONSTRAINT [FK_StaffIdentificationSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntryTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradebookEntryTypeDescriptor] DROP CONSTRAINT [FK_GradebookEntryTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_WeaponDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[WeaponDescriptor] DROP CONSTRAINT [FK_WeaponDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_MethodCreditEarnedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MethodCreditEarnedDescriptor] DROP CONSTRAINT [FK_MethodCreditEarnedDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_MigrantEducationProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MigrantEducationProgramServiceDescriptor] DROP CONSTRAINT [FK_MigrantEducationProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [interop].[FK_OperationalContextDescriptorUsage_Descriptor]...';


GO
ALTER TABLE [interop].[OperationalContextDescriptorUsage] DROP CONSTRAINT [FK_OperationalContextDescriptorUsage_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ClassroomPositionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ClassroomPositionDescriptor] DROP CONSTRAINT [FK_ClassroomPositionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ModelEntityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ModelEntityDescriptor] DROP CONSTRAINT [FK_ModelEntityDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradeLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradeLevelDescriptor] DROP CONSTRAINT [FK_GradeLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] DROP CONSTRAINT [FK_StudentIdentificationSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_MonitoredDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MonitoredDescriptor] DROP CONSTRAINT [FK_MonitoredDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradePointAverageTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradePointAverageTypeDescriptor] DROP CONSTRAINT [FK_GradePointAverageTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [interop].[FK_DescriptorEquivalenceGroupAssignment_Descriptor]...';


GO
ALTER TABLE [interop].[DescriptorEquivalenceGroupAssignment] DROP CONSTRAINT [FK_DescriptorEquivalenceGroupAssignment_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_NeglectedOrDelinquentProgramDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NeglectedOrDelinquentProgramDescriptor] DROP CONSTRAINT [FK_NeglectedOrDelinquentProgramDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradeTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradeTypeDescriptor] DROP CONSTRAINT [FK_GradeTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] DROP CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NeglectedOrDelinquentProgramServiceDescriptor] DROP CONSTRAINT [FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SectionCharacteristicDescriptor] DROP CONSTRAINT [FK_SectionCharacteristicDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_NetworkPurposeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NetworkPurposeDescriptor] DROP CONSTRAINT [FK_NetworkPurposeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CohortScopeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortScopeDescriptor] DROP CONSTRAINT [FK_CohortScopeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_NonMedicalImmunizationExemptionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NonMedicalImmunizationExemptionDescriptor] DROP CONSTRAINT [FK_NonMedicalImmunizationExemptionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffLeaveEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffLeaveEventCategoryDescriptor] DROP CONSTRAINT [FK_StaffLeaveEventCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CohortTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortTypeDescriptor] DROP CONSTRAINT [FK_CohortTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradingPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradingPeriodDescriptor] DROP CONSTRAINT [FK_GradingPeriodDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItemCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItemCategoryDescriptor] DROP CONSTRAINT [FK_AssessmentItemCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CohortYearTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortYearTypeDescriptor] DROP CONSTRAINT [FK_CohortYearTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SubmissionStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SubmissionStatusDescriptor] DROP CONSTRAINT [FK_SubmissionStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationPeriodDescriptor] DROP CONSTRAINT [FK_ProgramEvaluationPeriodDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationAssociationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAssociationTypeDescriptor] DROP CONSTRAINT [FK_EducationOrganizationAssociationTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SupporterMilitaryConnectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SupporterMilitaryConnectionDescriptor] DROP CONSTRAINT [FK_SupporterMilitaryConnectionDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationTypeDescriptor] DROP CONSTRAINT [FK_ProgramEvaluationTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItemResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItemResultDescriptor] DROP CONSTRAINT [FK_AssessmentItemResultDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategoryDescriptor] DROP CONSTRAINT [FK_EducationOrganizationCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SectionTypeDescriptor] DROP CONSTRAINT [FK_SectionTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SurveyCategoryDescriptor] DROP CONSTRAINT [FK_SurveyCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SeparationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SeparationDescriptor] DROP CONSTRAINT [FK_SeparationDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CompetencyLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CompetencyLevelDescriptor] DROP CONSTRAINT [FK_CompetencyLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramSponsorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramSponsorDescriptor] DROP CONSTRAINT [FK_ProgramSponsorDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CredentialFieldDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CredentialFieldDescriptor] DROP CONSTRAINT [FK_CredentialFieldDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SeparationReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SeparationReasonDescriptor] DROP CONSTRAINT [FK_SeparationReasonDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] DROP CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramTypeDescriptor] DROP CONSTRAINT [FK_ProgramTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ServiceDescriptor] DROP CONSTRAINT [FK_ServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgressDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgressDescriptor] DROP CONSTRAINT [FK_ProgressDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SurveyLevelDescriptor] DROP CONSTRAINT [FK_SurveyLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CredentialTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CredentialTypeDescriptor] DROP CONSTRAINT [FK_CredentialTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgressLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgressLevelDescriptor] DROP CONSTRAINT [FK_ProgressLevelDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LanguageDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageDescriptor] DROP CONSTRAINT [FK_LanguageDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentPeriodDescriptor] DROP CONSTRAINT [FK_AssessmentPeriodDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CreditCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CreditCategoryDescriptor] DROP CONSTRAINT [FK_CreditCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LanguageInstructionProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageInstructionProgramServiceDescriptor] DROP CONSTRAINT [FK_LanguageInstructionProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CreditTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CreditTypeDescriptor] DROP CONSTRAINT [FK_CreditTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LanguageUseDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageUseDescriptor] DROP CONSTRAINT [FK_LanguageUseDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentParticipationCodeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StudentParticipationCodeDescriptor] DROP CONSTRAINT [FK_StudentParticipationCodeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentReportingMethodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentReportingMethodDescriptor] DROP CONSTRAINT [FK_AssessmentReportingMethodDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] DROP CONSTRAINT [FK_GraduationPlanTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SexDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SexDescriptor] DROP CONSTRAINT [FK_SexDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProviderCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderCategoryDescriptor] DROP CONSTRAINT [FK_ProviderCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CrisisTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CrisisTypeDescriptor] DROP CONSTRAINT [FK_CrisisTypeDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusDescriptor] DROP CONSTRAINT [FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProviderProfitabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderProfitabilityDescriptor] DROP CONSTRAINT [FK_ProviderProfitabilityDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CTEProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CTEProgramServiceDescriptor] DROP CONSTRAINT [FK_CTEProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[HomelessPrimaryNighttimeResidenceDescriptor] DROP CONSTRAINT [FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProviderStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderStatusDescriptor] DROP CONSTRAINT [FK_ProviderStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CurriculumUsedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CurriculumUsedDescriptor] DROP CONSTRAINT [FK_CurriculumUsedDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardCategoryDescriptor] DROP CONSTRAINT [FK_LearningStandardCategoryDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_HomelessProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[HomelessProgramServiceDescriptor] DROP CONSTRAINT [FK_HomelessProgramServiceDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PublicationStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PublicationStatusDescriptor] DROP CONSTRAINT [FK_PublicationStatusDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DeliveryMethodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DeliveryMethodDescriptor] DROP CONSTRAINT [FK_DeliveryMethodDescriptor_Descriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DescriptorMappingModelEntity_DescriptorMapping]...';


GO
ALTER TABLE [edfi].[DescriptorMappingModelEntity] DROP CONSTRAINT [FK_DescriptorMappingModelEntity_DescriptorMapping];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineAction_School]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [FK_DisciplineAction_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineAction_School1]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [FK_DisciplineAction_School1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineAction_Student]...';


GO
ALTER TABLE [edfi].[DisciplineAction] DROP CONSTRAINT [FK_DisciplineAction_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionDiscipline_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionDiscipline] DROP CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineAction];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionStaff_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff] DROP CONSTRAINT [FK_DisciplineActionStaff_DisciplineAction];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DisciplineAction];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [FK_StaffDisciplineIncidentAssociation_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncident_IncidentLocationDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [FK_DisciplineIncident_IncidentLocationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncident_ReporterDescriptionDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [FK_DisciplineIncident_ReporterDescriptionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncident_School]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] DROP CONSTRAINT [FK_DisciplineIncident_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncidentBehavior_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentBehavior] DROP CONSTRAINT [FK_DisciplineIncidentBehavior_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncidentExternalParticipant_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentExternalParticipant] DROP CONSTRAINT [FK_DisciplineIncidentExternalParticipant_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineIncidentWeapon_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentWeapon] DROP CONSTRAINT [FK_DisciplineIncidentWeapon_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent] DROP CONSTRAINT [FK_InterventionEducationContent_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContent_ContentClassDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [FK_EducationContent_ContentClassDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContent_CostRateDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [FK_EducationContent_CostRateDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContent_InteractivityStyleDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [FK_EducationContent_InteractivityStyleDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContent_LearningStandard]...';


GO
ALTER TABLE [edfi].[EducationContent] DROP CONSTRAINT [FK_EducationContent_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentAppropriateGradeLevel_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] DROP CONSTRAINT [FK_EducationContentAppropriateGradeLevel_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] DROP CONSTRAINT [FK_InterventionPrescriptionEducationContent_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentAppropriateSex_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateSex] DROP CONSTRAINT [FK_EducationContentAppropriateSex_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentAuthor_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAuthor] DROP CONSTRAINT [FK_EducationContentAuthor_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentDerivativeSourceEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] DROP CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentDerivativeSourceEducationContent_EducationContent1]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] DROP CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] DROP CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentDerivativeSourceURI_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] DROP CONSTRAINT [FK_EducationContentDerivativeSourceURI_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationContentLanguage_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentLanguage] DROP CONSTRAINT [FK_EducationContentLanguage_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] DROP CONSTRAINT [FK_InterventionStudyEducationContent_EducationContent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardContentStandard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard] DROP CONSTRAINT [FK_LearningStandardContentStandard_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationPeerAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationPeerAssociation_EducationOrganization1]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] DROP CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [FK_StudentProgramEvaluation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StateEducationAgency_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StateEducationAgency] DROP CONSTRAINT [FK_StateEducationAgency_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OrganizationDepartment_EducationOrganization]...';


GO
ALTER TABLE [edfi].[OrganizationDepartment] DROP CONSTRAINT [FK_OrganizationDepartment_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OrganizationDepartment_EducationOrganization1]...';


GO
ALTER TABLE [edfi].[OrganizationDepartment] DROP CONSTRAINT [FK_OrganizationDepartment_EducationOrganization1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationServiceCenter_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationServiceCenter] DROP CONSTRAINT [FK_EducationServiceCenter_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [FK_ReportCard_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Intervention_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [FK_Intervention_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalAccount_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LocalAccount] DROP CONSTRAINT [FK_LocalAccount_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryInstitution_EducationOrganization]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitution] DROP CONSTRAINT [FK_PostSecondaryInstitution_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalEducationAgency_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LocalEducationAgency] DROP CONSTRAINT [FK_LocalEducationAgency_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescription_EducationOrganization]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [FK_InterventionPrescription_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Program_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [FK_Program_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_School_EducationOrganization]...';


GO
ALTER TABLE [edfi].[School] DROP CONSTRAINT [FK_School_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [FK_GeneralStudentProgramAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHealth_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [FK_StudentHealth_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentContentStandard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard] DROP CONSTRAINT [FK_AssessmentContentStandard_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTransportation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [FK_StudentTransportation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudy_EducationOrganization]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [FK_InterventionStudy_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganization_OperationalStatusDescriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganization] DROP CONSTRAINT [FK_EducationOrganization_OperationalStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationAddress_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddress] DROP CONSTRAINT [FK_EducationOrganizationAddress_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlan_EducationOrganization]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [FK_GraduationPlan_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CommunityOrganization_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CommunityOrganization] DROP CONSTRAINT [FK_CommunityOrganization_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CommunityProvider_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CommunityProvider] DROP CONSTRAINT [FK_CommunityProvider_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationCategory_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategory] DROP CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Survey_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [FK_Survey_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationIdentificationCode_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] DROP CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationIndicator_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicator] DROP CONSTRAINT [FK_EducationOrganizationIndicator_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationInstitutionTelephone_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] DROP CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationInternationalAddress_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] DROP CONSTRAINT [FK_EducationOrganizationInternationalAddress_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPosition_EducationOrganization]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [FK_OpenStaffPosition_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationNetwork_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetwork] DROP CONSTRAINT [FK_EducationOrganizationNetwork_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationNetworkAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganization];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] DROP CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] DROP CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EvaluationRubricDimension_RatingLevelDescriptor]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [FK_EvaluationRubricDimension_RatingLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_EvaluationRubricDimension_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] DROP CONSTRAINT [FK_EvaluationRubricDimension_ProgramEvaluationElement];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_FeederSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FK_FeederSchoolAssociation_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_FeederSchoolAssociation_School1]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] DROP CONSTRAINT [FK_FeederSchoolAssociation_School1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_FunctionDimensionReportingTag_FunctionDimension]...';


GO
ALTER TABLE [edfi].[FunctionDimensionReportingTag] DROP CONSTRAINT [FK_FunctionDimensionReportingTag_FunctionDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_FundDimensionReportingTag_FundDimension]...';


GO
ALTER TABLE [edfi].[FundDimensionReportingTag] DROP CONSTRAINT [FK_FundDimensionReportingTag_FundDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolFoodServiceProgramAssociation] DROP CONSTRAINT [FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [FK_GeneralStudentProgramAssociation_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_Student]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] DROP CONSTRAINT [FK_GeneralStudentProgramAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GeneralStudentProgramAssociationProgramParticipationStatus_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus] DROP CONSTRAINT [FK_GeneralStudentProgramAssociationProgramParticipationStatus_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] DROP CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentHomelessProgramAssociation] DROP CONSTRAINT [FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] DROP CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociation] DROP CONSTRAINT [FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentCTEProgramAssociation] DROP CONSTRAINT [FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] DROP CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentNeglectedOrDelinquentProgramAssociation] DROP CONSTRAINT [FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentProgramAssociation] DROP CONSTRAINT [FK_StudentProgramAssociation_GeneralStudentProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCardGrade_Grade]...';


GO
ALTER TABLE [edfi].[ReportCardGrade] DROP CONSTRAINT [FK_ReportCardGrade_Grade];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Grade_GradeTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [FK_Grade_GradeTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Grade_GradingPeriod]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [FK_Grade_GradingPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Grade_PerformanceBaseConversionDescriptor]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [FK_Grade_PerformanceBaseConversionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Grade_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[Grade] DROP CONSTRAINT [FK_Grade_StudentSectionAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradeLearningStandardGrade_Grade]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade] DROP CONSTRAINT [FK_GradeLearningStandardGrade_Grade];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentGradebookEntry_GradebookEntry]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [FK_StudentGradebookEntry_GradebookEntry];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntry_GradebookEntryTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [FK_GradebookEntry_GradebookEntryTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntry_GradingPeriod]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [FK_GradebookEntry_GradingPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntry_Section]...';


GO
ALTER TABLE [edfi].[GradebookEntry] DROP CONSTRAINT [FK_GradebookEntry_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntryLearningStandard_GradebookEntry]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] DROP CONSTRAINT [FK_GradebookEntryLearningStandard_GradebookEntry];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCard_GradingPeriod]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [FK_ReportCard_GradingPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjective_GradingPeriod]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [FK_StudentCompetencyObjective_GradingPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradingPeriod_GradingPeriodDescriptor]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [FK_GradingPeriod_GradingPeriodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradingPeriod_School]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [FK_GradingPeriod_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradingPeriod_SchoolYearType]...';


GO
ALTER TABLE [edfi].[GradingPeriod] DROP CONSTRAINT [FK_GradingPeriod_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SessionGradingPeriod_GradingPeriod]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod] DROP CONSTRAINT [FK_SessionGradingPeriod_GradingPeriod];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_GraduationPlan]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociationAlternativeGraduationPlan_GraduationPlan]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] DROP CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlan_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [FK_GraduationPlan_CreditTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlan_GraduationPlanTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [FK_GraduationPlan_GraduationPlanTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlan_SchoolYearType]...';


GO
ALTER TABLE [edfi].[GraduationPlan] DROP CONSTRAINT [FK_GraduationPlan_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanCreditsByCourse_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] DROP CONSTRAINT [FK_GraduationPlanCreditsByCourse_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanCreditsByCreditCategory_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCreditCategory] DROP CONSTRAINT [FK_GraduationPlanCreditsByCreditCategory_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanCreditsBySubject_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] DROP CONSTRAINT [FK_GraduationPlanCreditsBySubject_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GraduationPlanRequiredAssessment_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] DROP CONSTRAINT [FK_GraduationPlanRequiredAssessment_GraduationPlan];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Intervention_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [FK_Intervention_DeliveryMethodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Intervention_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[Intervention] DROP CONSTRAINT [FK_Intervention_InterventionClassDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionAppropriateGradeLevel_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] DROP CONSTRAINT [FK_InterventionAppropriateGradeLevel_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionAppropriateSex_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateSex] DROP CONSTRAINT [FK_InterventionAppropriateSex_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionDiagnosis_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionDiagnosis] DROP CONSTRAINT [FK_InterventionDiagnosis_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionEducationContent_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent] DROP CONSTRAINT [FK_InterventionEducationContent_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionInterventionPrescription_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] DROP CONSTRAINT [FK_InterventionInterventionPrescription_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionLearningResourceMetadataURI_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] DROP CONSTRAINT [FK_InterventionLearningResourceMetadataURI_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionMeetingTime_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionMeetingTime] DROP CONSTRAINT [FK_InterventionMeetingTime_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPopulationServed_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionPopulationServed] DROP CONSTRAINT [FK_InterventionPopulationServed_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStaff_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionStaff] DROP CONSTRAINT [FK_InterventionStaff_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAssociation_Intervention]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [FK_StudentInterventionAssociation_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_Intervention]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [FK_StudentInterventionAttendanceEvent_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionURI_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionURI] DROP CONSTRAINT [FK_InterventionURI_Intervention];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionInterventionPrescription_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] DROP CONSTRAINT [FK_InterventionInterventionPrescription_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescription_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [FK_InterventionPrescription_DeliveryMethodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescription_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] DROP CONSTRAINT [FK_InterventionPrescription_InterventionClassDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] DROP CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionAppropriateSex_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] DROP CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionDiagnosis_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] DROP CONSTRAINT [FK_InterventionPrescriptionDiagnosis_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionEducationContent_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] DROP CONSTRAINT [FK_InterventionPrescriptionEducationContent_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] DROP CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionPopulationServed_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] DROP CONSTRAINT [FK_InterventionPrescriptionPopulationServed_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionPrescriptionURI_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionURI] DROP CONSTRAINT [FK_InterventionPrescriptionURI_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudy_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [FK_InterventionStudy_InterventionPrescription];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudy_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [FK_InterventionStudy_DeliveryMethodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudy_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionStudy] DROP CONSTRAINT [FK_InterventionStudy_InterventionClassDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyAppropriateGradeLevel_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] DROP CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyAppropriateSex_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateSex] DROP CONSTRAINT [FK_InterventionStudyAppropriateSex_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyEducationContent_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] DROP CONSTRAINT [FK_InterventionStudyEducationContent_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyInterventionEffectiveness_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] DROP CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] DROP CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyPopulationServed_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyPopulationServed] DROP CONSTRAINT [FK_InterventionStudyPopulationServed_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyStateAbbreviation_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] DROP CONSTRAINT [FK_InterventionStudyStateAbbreviation_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStudyURI_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyURI] DROP CONSTRAINT [FK_InterventionStudyURI_InterventionStudy];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardContentStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard] DROP CONSTRAINT [FK_LearningStandardContentStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandardLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] DROP CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandard1]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardGradeLevel_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardGradeLevel] DROP CONSTRAINT [FK_LearningStandardGradeLevel_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardIdentificationCode_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardIdentificationCode] DROP CONSTRAINT [FK_LearningStandardIdentificationCode_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard] DROP CONSTRAINT [FK_CourseLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradebookEntryLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] DROP CONSTRAINT [FK_GradebookEntryLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_GradeLearningStandardGrade_LearningStandard]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade] DROP CONSTRAINT [FK_GradeLearningStandardGrade_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentItemLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] DROP CONSTRAINT [FK_AssessmentItemLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard] DROP CONSTRAINT [FK_ProgramLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] DROP CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [FK_LearningStandard_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandard_LearningStandardCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [FK_LearningStandard_LearningStandardCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandard_LearningStandardScopeDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandard] DROP CONSTRAINT [FK_LearningStandard_LearningStandardScopeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardAcademicSubject_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardAcademicSubject] DROP CONSTRAINT [FK_LearningStandardAcademicSubject_LearningStandard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] DROP CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalAccountReportingTag_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalAccountReportingTag] DROP CONSTRAINT [FK_LocalAccountReportingTag_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalActual_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [FK_LocalActual_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalBudget_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [FK_LocalBudget_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalContractedStaff_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [FK_LocalContractedStaff_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalEncumbrance_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [FK_LocalEncumbrance_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalPayroll_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [FK_LocalPayroll_LocalAccount];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalActual_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalActual] DROP CONSTRAINT [FK_LocalActual_FinancialCollectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalBudget_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalBudget] DROP CONSTRAINT [FK_LocalBudget_FinancialCollectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalContractedStaff_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [FK_LocalContractedStaff_FinancialCollectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalContractedStaff_Staff]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] DROP CONSTRAINT [FK_LocalContractedStaff_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalEncumbrance_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] DROP CONSTRAINT [FK_LocalEncumbrance_FinancialCollectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalPayroll_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [FK_LocalPayroll_FinancialCollectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalPayroll_Staff]...';


GO
ALTER TABLE [edfi].[LocalPayroll] DROP CONSTRAINT [FK_LocalPayroll_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Location_School]...';


GO
ALTER TABLE [edfi].[Location] DROP CONSTRAINT [FK_Location_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_Location]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_Location];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectDimensionReportingTag_ObjectDimension]...';


GO
ALTER TABLE [edfi].[ObjectDimensionReportingTag] DROP CONSTRAINT [FK_ObjectDimensionReportingTag_ObjectDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] DROP CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessment_AcademicSubjectDescriptor]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [FK_ObjectiveAssessment_AcademicSubjectDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessment_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] DROP CONSTRAINT [FK_ObjectiveAssessment_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] DROP CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] DROP CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] DROP CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ObjectiveAssessmentScore_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentScore] DROP CONSTRAINT [FK_ObjectiveAssessmentScore_ObjectiveAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPosition_EmploymentStatusDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [FK_OpenStaffPosition_EmploymentStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPosition_PostingResultDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [FK_OpenStaffPosition_PostingResultDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPosition_ProgramAssignmentDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [FK_OpenStaffPosition_ProgramAssignmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPosition_StaffClassificationDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] DROP CONSTRAINT [FK_OpenStaffPosition_StaffClassificationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPositionAcademicSubject_OpenStaffPosition]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] DROP CONSTRAINT [FK_OpenStaffPositionAcademicSubject_OpenStaffPosition];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] DROP CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_OperationalUnitDimensionReportingTag_OperationalUnitDimension]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimensionReportingTag] DROP CONSTRAINT [FK_OperationalUnitDimensionReportingTag_OperationalUnitDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Staff_Person]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [FK_Staff_Person];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Student_Person]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [FK_Student_Person];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Person_SourceSystemDescriptor]...';


GO
ALTER TABLE [edfi].[Person] DROP CONSTRAINT [FK_Person_SourceSystemDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryEvent_PostSecondaryInstitution]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryInstitution];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_PostSecondaryEvent_Student]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] DROP CONSTRAINT [FK_PostSecondaryEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_Program]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [FK_StudentProgramAttendanceEvent_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociationProgram_Program]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram] DROP CONSTRAINT [FK_StudentSectionAssociationProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEventProgram_Program]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram] DROP CONSTRAINT [FK_RestraintEventProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Program_ProgramTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Program] DROP CONSTRAINT [FK_Program_ProgramTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramCharacteristic_Program]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristic] DROP CONSTRAINT [FK_ProgramCharacteristic_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_Program]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluation_Program]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [FK_ProgramEvaluation_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptCourseProgram_Program]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram] DROP CONSTRAINT [FK_CourseTranscriptCourseProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CohortProgram_Program]...';


GO
ALTER TABLE [edfi].[CohortProgram] DROP CONSTRAINT [FK_CohortProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [FK_StaffProgramAssociation_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionProgram_Program]...';


GO
ALTER TABLE [edfi].[SectionProgram] DROP CONSTRAINT [FK_SectionProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramLearningStandard_Program]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard] DROP CONSTRAINT [FK_ProgramLearningStandard_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramSponsor_Program]...';


GO
ALTER TABLE [edfi].[ProgramSponsor] DROP CONSTRAINT [FK_ProgramSponsor_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [FK_SurveyProgramAssociation_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentProgram_Program]...';


GO
ALTER TABLE [edfi].[AssessmentProgram] DROP CONSTRAINT [FK_AssessmentProgram_Program];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramDimensionReportingTag_ProgramDimension]...';


GO
ALTER TABLE [edfi].[ProgramDimensionReportingTag] DROP CONSTRAINT [FK_ProgramDimensionReportingTag_ProgramDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluation_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [FK_StudentProgramEvaluation_ProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] DROP CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationElement_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationLevel_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationLevel] DROP CONSTRAINT [FK_ProgramEvaluationLevel_ProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationObjective_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] DROP CONSTRAINT [FK_ProgramEvaluationObjective_ProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationElement_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] DROP CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_ProgramEvaluationElement];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationElement_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] DROP CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluationObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationElementProgramEvaluationLevel_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElementProgramEvaluationLevel] DROP CONSTRAINT [FK_ProgramEvaluationElementProgramEvaluationLevel_ProgramEvaluationElement];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationObjective_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] DROP CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_ProgramEvaluationObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProgramEvaluationObjectiveProgramEvaluationLevel_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel] DROP CONSTRAINT [FK_ProgramEvaluationObjectiveProgramEvaluationLevel_ProgramEvaluationObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ProjectDimensionReportingTag_ProjectDimension]...';


GO
ALTER TABLE [edfi].[ProjectDimensionReportingTag] DROP CONSTRAINT [FK_ProjectDimensionReportingTag_ProjectDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCard_Student]...';


GO
ALTER TABLE [edfi].[ReportCard] DROP CONSTRAINT [FK_ReportCard_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCardGrade_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardGrade] DROP CONSTRAINT [FK_ReportCardGrade_ReportCard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCardGradePointAverage_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardGradePointAverage] DROP CONSTRAINT [FK_ReportCardGradePointAverage_ReportCard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCardStudentCompetencyObjective_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] DROP CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ReportCard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordReportCard_ReportCard]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] DROP CONSTRAINT [FK_StudentAcademicRecordReportCard_ReportCard];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [FK_RestraintEvent_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEvent_School]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [FK_RestraintEvent_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEvent_Student]...';


GO
ALTER TABLE [edfi].[RestraintEvent] DROP CONSTRAINT [FK_RestraintEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEventProgram_RestraintEvent]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram] DROP CONSTRAINT [FK_RestraintEventProgram_RestraintEvent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_RestraintEventReason_RestraintEvent]...';


GO
ALTER TABLE [edfi].[RestraintEventReason] DROP CONSTRAINT [FK_RestraintEventReason_RestraintEvent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StateEducationAgencyAccountability_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyAccountability] DROP CONSTRAINT [FK_StateEducationAgencyAccountability_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolYearType1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_LocalEducationAgencyAccountability_SchoolYearType]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyAccountability] DROP CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_School_SchoolYearType]...';


GO
ALTER TABLE [edfi].[School] DROP CONSTRAINT [FK_School_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Survey_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [FK_Survey_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment] DROP CONSTRAINT [FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [FK_StaffSchoolAssociation_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Session_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [FK_Session_SchoolYearType];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_AssessmentSection_Section]...';


GO
ALTER TABLE [edfi].[AssessmentSection] DROP CONSTRAINT [FK_AssessmentSection_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [FK_SurveySectionAssociation_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [FK_StudentSectionAssociation_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_Section]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [FK_StudentSectionAttendanceEvent_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_CreditTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_LanguageDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_LanguageDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_MediumOfInstructionDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_MediumOfInstructionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_PopulationServedDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_PopulationServedDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_School]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Section_SectionTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Section] DROP CONSTRAINT [FK_Section_SectionTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCohortAssociationSection_Section]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] DROP CONSTRAINT [FK_StudentCohortAssociationSection_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_Section]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [FK_SectionAttendanceTakenEvent_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionCharacteristic_Section]...';


GO
ALTER TABLE [edfi].[SectionCharacteristic] DROP CONSTRAINT [FK_SectionCharacteristic_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionClassPeriod_Section]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod] DROP CONSTRAINT [FK_SectionClassPeriod_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_CourseTranscriptSection_Section]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection] DROP CONSTRAINT [FK_CourseTranscriptSection_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionCourseLevelCharacteristic_Section]...';


GO
ALTER TABLE [edfi].[SectionCourseLevelCharacteristic] DROP CONSTRAINT [FK_SectionCourseLevelCharacteristic_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionOfferedGradeLevel_Section]...';


GO
ALTER TABLE [edfi].[SectionOfferedGradeLevel] DROP CONSTRAINT [FK_SectionOfferedGradeLevel_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionProgram_Section]...';


GO
ALTER TABLE [edfi].[SectionProgram] DROP CONSTRAINT [FK_SectionProgram_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [FK_StaffSectionAssociation_Section];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_Staff]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] DROP CONSTRAINT [FK_SectionAttendanceTakenEvent_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_Session]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [FK_StudentSchoolAttendanceEvent_Session];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Survey_Session]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [FK_Survey_Session];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Session_School]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [FK_Session_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Session_TermDescriptor]...';


GO
ALTER TABLE [edfi].[Session] DROP CONSTRAINT [FK_Session_TermDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SessionAcademicWeek_Session]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek] DROP CONSTRAINT [FK_SessionAcademicWeek_Session];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SessionGradingPeriod_Session]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod] DROP CONSTRAINT [FK_SessionGradingPeriod_Session];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SourceDimensionReportingTag_SourceDimension]...';


GO
ALTER TABLE [edfi].[SourceDimensionReportingTag] DROP CONSTRAINT [FK_SourceDimensionReportingTag_SourceDimension];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffTribalAffiliation_Staff]...';


GO
ALTER TABLE [edfi].[StaffTribalAffiliation] DROP CONSTRAINT [FK_StaffTribalAffiliation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffVisa_Staff]...';


GO
ALTER TABLE [edfi].[StaffVisa] DROP CONSTRAINT [FK_StaffVisa_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluation_Staff]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [FK_StudentProgramEvaluation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Staff_CitizenshipStatusDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [FK_Staff_CitizenshipStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Staff_LevelOfEducationDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [FK_Staff_LevelOfEducationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Staff_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] DROP CONSTRAINT [FK_Staff_SexDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponse_Staff]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [FK_SurveyResponse_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffAbsenceEvent_Staff]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [FK_StaffAbsenceEvent_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffAddress_Staff]...';


GO
ALTER TABLE [edfi].[StaffAddress] DROP CONSTRAINT [FK_StaffAddress_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponseStaffTargetAssociation_Staff]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffAncestryEthnicOrigin_Staff]...';


GO
ALTER TABLE [edfi].[StaffAncestryEthnicOrigin] DROP CONSTRAINT [FK_StaffAncestryEthnicOrigin_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffCohortAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] DROP CONSTRAINT [FK_StaffCohortAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffCredential_Staff]...';


GO
ALTER TABLE [edfi].[StaffCredential] DROP CONSTRAINT [FK_StaffCredential_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionStaff_Staff]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff] DROP CONSTRAINT [FK_DisciplineActionStaff_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] DROP CONSTRAINT [FK_StaffDisciplineIncidentAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponseStaffTargetAssociation_Staff]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_Staff]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffElectronicMail_Staff]...';


GO
ALTER TABLE [edfi].[StaffElectronicMail] DROP CONSTRAINT [FK_StaffElectronicMail_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffIdentificationCode_Staff]...';


GO
ALTER TABLE [edfi].[StaffIdentificationCode] DROP CONSTRAINT [FK_StaffIdentificationCode_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffIdentificationDocument_Staff]...';


GO
ALTER TABLE [edfi].[StaffIdentificationDocument] DROP CONSTRAINT [FK_StaffIdentificationDocument_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_InterventionStaff_Staff]...';


GO
ALTER TABLE [edfi].[InterventionStaff] DROP CONSTRAINT [FK_InterventionStaff_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffInternationalAddress_Staff]...';


GO
ALTER TABLE [edfi].[StaffInternationalAddress] DROP CONSTRAINT [FK_StaffInternationalAddress_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffLanguage_Staff]...';


GO
ALTER TABLE [edfi].[StaffLanguage] DROP CONSTRAINT [FK_StaffLanguage_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffLeave_Staff]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [FK_StaffLeave_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffOtherName_Staff]...';


GO
ALTER TABLE [edfi].[StaffOtherName] DROP CONSTRAINT [FK_StaffOtherName_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffPersonalIdentificationDocument_Staff]...';


GO
ALTER TABLE [edfi].[StaffPersonalIdentificationDocument] DROP CONSTRAINT [FK_StaffPersonalIdentificationDocument_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffProgramAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] DROP CONSTRAINT [FK_StaffProgramAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffRace_Staff]...';


GO
ALTER TABLE [edfi].[StaffRace] DROP CONSTRAINT [FK_StaffRace_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffRecognition_Staff]...';


GO
ALTER TABLE [edfi].[StaffRecognition] DROP CONSTRAINT [FK_StaffRecognition_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [FK_StaffSchoolAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSectionAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [FK_StaffSectionAssociation_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffTelephone_Staff]...';


GO
ALTER TABLE [edfi].[StaffTelephone] DROP CONSTRAINT [FK_StaffTelephone_Staff];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] DROP CONSTRAINT [FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_StaffDisciplineIncidentAssociation]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [FK_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_StaffDisciplineIncidentAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddress] DROP CONSTRAINT [FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationTelephone] DROP CONSTRAINT [FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] DROP CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffLeave_StaffLeaveEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StaffLeave] DROP CONSTRAINT [FK_StaffLeave_StaffLeaveEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociation_ProgramAssignmentDescriptor]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] DROP CONSTRAINT [FK_StaffSchoolAssociation_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] DROP CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] DROP CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StaffSectionAssociation_ClassroomPositionDescriptor]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] DROP CONSTRAINT [FK_StaffSectionAssociation_ClassroomPositionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [FK_StudentProgramAttendanceEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluation_Student]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [FK_StudentProgramEvaluation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponse_Student]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [FK_SurveyResponse_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Student_CitizenshipStatusDescriptor]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [FK_Student_CitizenshipStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Student_CountryDescriptor]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [FK_Student_CountryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Student_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [FK_Student_SexDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Student_StateAbbreviationDescriptor]...';


GO
ALTER TABLE [edfi].[Student] DROP CONSTRAINT [FK_Student_StateAbbreviationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_Student]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [FK_StudentSchoolAttendanceEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [FK_StudentSectionAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_Student]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [FK_StudentSectionAttendanceEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentGradebookEntry_Student]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [FK_StudentGradebookEntry_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHealth_Student]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [FK_StudentHealth_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCohortAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] DROP CONSTRAINT [FK_StudentCohortAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTransportation_Student]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [FK_StudentTransportation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentIdentificationDocument_Student]...';


GO
ALTER TABLE [edfi].[StudentIdentificationDocument] DROP CONSTRAINT [FK_StudentIdentificationDocument_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjective_Student]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [FK_StudentCompetencyObjective_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] DROP CONSTRAINT [FK_StudentInterventionAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentVisa_Student]...';


GO
ALTER TABLE [edfi].[StudentVisa] DROP CONSTRAINT [FK_StudentVisa_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [FK_StudentInterventionAttendanceEvent_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentContactAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [FK_StudentContactAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] DROP CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentOtherName_Student]...';


GO
ALTER TABLE [edfi].[StudentOtherName] DROP CONSTRAINT [FK_StudentOtherName_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentPersonalIdentificationDocument_Student]...';


GO
ALTER TABLE [edfi].[StudentPersonalIdentificationDocument] DROP CONSTRAINT [FK_StudentPersonalIdentificationDocument_Student];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor2]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor2];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor3]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor3];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecord_TermDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] DROP CONSTRAINT [FK_StudentAcademicRecord_TermDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] DROP CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordClassRanking_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] DROP CONSTRAINT [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordDiploma_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordDiploma] DROP CONSTRAINT [FK_StudentAcademicRecordDiploma_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordGradePointAverage_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordGradePointAverage] DROP CONSTRAINT [FK_StudentAcademicRecordGradePointAverage_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordRecognition_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordRecognition] DROP CONSTRAINT [FK_StudentAcademicRecordRecognition_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAcademicRecordReportCard_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] DROP CONSTRAINT [FK_StudentAcademicRecordReportCard_StudentAcademicRecord];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_AdministrationEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_AdministrationEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_EventCircumstanceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_EventCircumstanceDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_GradeLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_LanguageDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_LanguageDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_PlatformTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_PlatformTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_ReasonNotTestedDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_ReasonNotTestedDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_RetestIndicatorDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_RetestIndicatorDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessment_School]...';


GO
ALTER TABLE [edfi].[StudentAssessment] DROP CONSTRAINT [FK_StudentAssessment_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentAccommodation_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentAccommodation] DROP CONSTRAINT [FK_StudentAssessmentAccommodation_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentItem_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem] DROP CONSTRAINT [FK_StudentAssessmentItem_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentPerformanceLevel_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] DROP CONSTRAINT [FK_StudentAssessmentPerformanceLevel_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentPeriod_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPeriod] DROP CONSTRAINT [FK_StudentAssessmentPeriod_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentScoreResult_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentScoreResult] DROP CONSTRAINT [FK_StudentAssessmentScoreResult_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] DROP CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCohortAssociationSection_StudentCohortAssociation]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] DROP CONSTRAINT [FK_StudentCohortAssociationSection_StudentCohortAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] DROP CONSTRAINT [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjective_CompetencyLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] DROP CONSTRAINT [FK_StudentCompetencyObjective_CompetencyLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] DROP CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] DROP CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentContactAssociation_RelationDescriptor]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] DROP CONSTRAINT [FK_StudentContactAssociation_RelationDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_StudentDisciplineIncidentBehaviorAssociation]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_StudentDisciplineIncidentBehaviorAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] DROP CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentBehaviorAssociation]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentBehaviorAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentNonOffenderAssoci]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode] DROP CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentNonOffenderAssoci];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationAncestryEthnicOrigin_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationAncestryEthnicOrigin_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisability] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisplacedStudent_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationElectronicMail] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationInternationalAddress] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguage] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationRace] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicator] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTelephone] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTribalAffiliation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_SexDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_SexDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddress] DROP CONSTRAINT [FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] DROP CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentGradebookEntry_AssignmentLateStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [FK_StudentGradebookEntry_AssignmentLateStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentGradebookEntry_CompetencyLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [FK_StudentGradebookEntry_CompetencyLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentGradebookEntry_SubmissionStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] DROP CONSTRAINT [FK_StudentGradebookEntry_SubmissionStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor]...';


GO
ALTER TABLE [edfi].[StudentHealth] DROP CONSTRAINT [FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHealthAdditionalImmunization_StudentHealth]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunization] DROP CONSTRAINT [FK_StudentHealthAdditionalImmunization_StudentHealth];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentHealthRequiredImmunization_StudentHealth]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunization] DROP CONSTRAINT [FK_StudentHealthRequiredImmunization_StudentHealth];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] DROP CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] DROP CONSTRAINT [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] DROP CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluation_RatingLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] DROP CONSTRAINT [FK_StudentProgramEvaluation_RatingLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluationExternalEvaluator_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationExternalEvaluator] DROP CONSTRAINT [FK_StudentProgramEvaluationExternalEvaluator_StudentProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationElement_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] DROP CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_StudentProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationObjective_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] DROP CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_StudentProgramEvaluation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_EnrollmentTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_EnrollmentTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_EntryTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_EntryTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_GradeLevelDescriptor1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_ResidencyStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_ResidencyStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_School1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_School1];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] DROP CONSTRAINT [FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociationAlternativeGraduationPlan_StudentSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] DROP CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_StudentSchoolAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] DROP CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_School]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] DROP CONSTRAINT [FK_StudentSchoolAttendanceEvent_School];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociation_AttemptStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [FK_StudentSectionAssociation_AttemptStatusDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociation_RepeatIdentifierDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] DROP CONSTRAINT [FK_StudentSectionAssociation_RepeatIdentifierDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAssociationProgram_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram] DROP CONSTRAINT [FK_StudentSectionAssociationProgram_StudentSectionAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] DROP CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] DROP CONSTRAINT [FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSectionAttendanceEventClassPeriod_StudentSectionAttendanceEvent]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] DROP CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_StudentSectionAttendanceEvent];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisability] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService] DROP CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] DROP CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTransportation_TransportationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentTransportation] DROP CONSTRAINT [FK_StudentTransportation_TransportationTypeDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_StudentTransportationStudentBusDetails_StudentTransportation]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetails] DROP CONSTRAINT [FK_StudentTransportationStudentBusDetails_StudentTransportation];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponse_Survey]...';


GO
ALTER TABLE [edfi].[SurveyResponse] DROP CONSTRAINT [FK_SurveyResponse_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySection_Survey]...';


GO
ALTER TABLE [edfi].[SurveySection] DROP CONSTRAINT [FK_SurveySection_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] DROP CONSTRAINT [FK_SurveySectionAssociation_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_Survey_SurveyCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[Survey] DROP CONSTRAINT [FK_Survey_SurveyCategoryDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyCourseAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] DROP CONSTRAINT [FK_SurveyCourseAssociation_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyProgramAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] DROP CONSTRAINT [FK_SurveyProgramAssociation_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestion_Survey]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [FK_SurveyQuestion_Survey];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionResponseChoice_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseChoice] DROP CONSTRAINT [FK_SurveyQuestionResponseChoice_SurveyQuestion];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestion_QuestionFormDescriptor]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [FK_SurveyQuestion_QuestionFormDescriptor];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestion_SurveySection]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] DROP CONSTRAINT [FK_SurveyQuestion_SurveySection];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionMatrix_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionMatrix] DROP CONSTRAINT [FK_SurveyQuestionMatrix_SurveyQuestion];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionResponse_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [FK_SurveyQuestionResponse_SurveyQuestion];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_SurveyQuestionResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] DROP CONSTRAINT [FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_SurveyQuestionResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionResponseValue_SurveyQuestionResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseValue] DROP CONSTRAINT [FK_SurveyQuestionResponseValue_SurveyQuestionResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyQuestionResponse_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] DROP CONSTRAINT [FK_SurveyQuestionResponse_SurveyResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponseStaffTargetAssociation_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] DROP CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_SurveyResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveyResponseSurveyLevel_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseSurveyLevel] DROP CONSTRAINT [FK_SurveyResponseSurveyLevel_SurveyResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponse_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [FK_SurveySectionResponse_SurveyResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponse_SurveySection]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] DROP CONSTRAINT [FK_SurveySectionResponse_SurveySection];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] DROP CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse];


GO
PRINT N'Dropping Foreign Key [edfi].[FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] DROP CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse];


GO
PRINT N'Dropping Table [edfi].[StudentParticipationCodeDescriptor]...';


GO
DROP TABLE [edfi].[StudentParticipationCodeDescriptor];


GO
PRINT N'Removing schema binding from [auth].[EducationOrganizationIdToStaffUSI]...';


GO
ALTER VIEW [auth].[EducationOrganizationIdToStaffUSI]
AS
SELECT edOrgs.SourceEducationOrganizationId,
       seo_assign.StaffUSI
FROM   auth.EducationOrganizationIdToEducationOrganizationId AS edOrgs
       INNER JOIN
       edfi.StaffEducationOrganizationAssignmentAssociation AS seo_assign
       ON edOrgs.TargetEducationOrganizationId = seo_assign.EducationOrganizationId
UNION
SELECT edOrgs.SourceEducationOrganizationId,
       seo_empl.StaffUSI
FROM   auth.EducationOrganizationIdToEducationOrganizationId AS edOrgs
       INNER JOIN
       edfi.StaffEducationOrganizationEmploymentAssociation AS seo_empl
       ON edOrgs.TargetEducationOrganizationId = seo_empl.EducationOrganizationId;


GO
PRINT N'Dropping Index [auth].[EducationOrganizationIdToContactUSI].[UX_EducationOrganizationIdToContactUSI]...';


GO
DROP INDEX [UX_EducationOrganizationIdToContactUSI]
    ON [auth].[EducationOrganizationIdToContactUSI];


GO
PRINT N'Removing schema binding from [auth].[EducationOrganizationIdToContactUSI]...';


GO
ALTER VIEW [auth].[EducationOrganizationIdToContactUSI]
AS
SELECT   edOrgs.SourceEducationOrganizationId,
         spa.ContactUSI,
         COUNT_BIG(*) AS Ignored
FROM     auth.EducationOrganizationIdToEducationOrganizationId AS edOrgs
         INNER JOIN
         edfi.StudentSchoolAssociation AS ssa
         ON edOrgs.TargetEducationOrganizationId = ssa.SchoolId
         INNER JOIN
         edfi.StudentContactAssociation AS spa
         ON ssa.StudentUSI = spa.StudentUSI
GROUP BY edOrgs.SourceEducationOrganizationId, spa.ContactUSI;


GO
PRINT N'Removing schema binding from [auth].[EducationOrganizationIdToStudentUSIThroughResponsibility]...';


GO
ALTER VIEW [auth].[EducationOrganizationIdToStudentUSIThroughResponsibility]
AS
SELECT   edOrgs.SourceEducationOrganizationId,
         seora.StudentUSI
FROM     auth.EducationOrganizationIdToEducationOrganizationId AS edOrgs
         INNER JOIN
         edfi.StudentEducationOrganizationResponsibilityAssociation AS seora
         ON edOrgs.TargetEducationOrganizationId = seora.EducationOrganizationId
GROUP BY edOrgs.SourceEducationOrganizationId, seora.StudentUSI;


GO
PRINT N'Dropping Index [auth].[EducationOrganizationIdToStudentUSI].[UX_EducationOrganizationIdToStudentUSI]...';


GO
DROP INDEX [UX_EducationOrganizationIdToStudentUSI]
    ON [auth].[EducationOrganizationIdToStudentUSI];


GO
PRINT N'Removing schema binding from [auth].[EducationOrganizationIdToStudentUSI]...';


GO
ALTER VIEW [auth].[EducationOrganizationIdToStudentUSI]
AS
SELECT   edOrgs.SourceEducationOrganizationId,
         ssa.StudentUSI,
         COUNT_BIG(*) AS Ignored
FROM     auth.EducationOrganizationIdToEducationOrganizationId AS edOrgs
         INNER JOIN
         edfi.StudentSchoolAssociation AS ssa
         ON edOrgs.TargetEducationOrganizationId = ssa.SchoolId
GROUP BY edOrgs.SourceEducationOrganizationId, ssa.StudentUSI;


GO
PRINT N'Starting rebuilding table [edfi].[StudentSpecialEducationProgramAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSpecialEducationProgramAssociation] (
    [BeginDate]                              DATE            NOT NULL,
    [EducationOrganizationId]                BIGINT          NOT NULL,
    [ProgramEducationOrganizationId]         BIGINT          NOT NULL,
    [ProgramName]                            NVARCHAR (60)   NOT NULL,
    [ProgramTypeDescriptorId]                INT             NOT NULL,
    [StudentUSI]                             INT             NOT NULL,
    [IdeaEligibility]                        BIT             NULL,
    [IEPBeginDate]                           DATE            NULL,
    [IEPEndDate]                             DATE            NULL,
    [IEPReviewDate]                          DATE            NULL,
    [LastEvaluationDate]                     DATE            NULL,
    [MedicallyFragile]                       BIT             NULL,
    [MultiplyDisabled]                       BIT             NULL,
    [ReductionInHoursPerWeekComparedToPeers] DECIMAL (5, 2)  NULL,
    [SchoolHoursPerWeek]                     DECIMAL (5, 2)  NULL,
    [ShortenedSchoolDayIndicator]            BIT             NULL,
    [SpecialEducationExitDate]               DATE            NULL,
    [SpecialEducationExitExplained]          NVARCHAR (1024) NULL,
    [SpecialEducationExitReasonDescriptorId] INT             NULL,
    [SpecialEducationHoursPerWeek]           DECIMAL (5, 2)  NULL,
    [SpecialEducationSettingDescriptorId]    INT             NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSpecialEducationProgramAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSpecialEducationProgramAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSpecialEducationProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI], [IdeaEligibility], [IEPBeginDate], [IEPEndDate], [IEPReviewDate], [LastEvaluationDate], [MedicallyFragile], [MultiplyDisabled], [SchoolHoursPerWeek], [SpecialEducationExitDate], [SpecialEducationExitExplained], [SpecialEducationExitReasonDescriptorId], [SpecialEducationHoursPerWeek], [SpecialEducationSettingDescriptorId])
        SELECT   [BeginDate],
                 [EducationOrganizationId],
                 [ProgramEducationOrganizationId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StudentUSI],
                 [IdeaEligibility],
                 [IEPBeginDate],
                 [IEPEndDate],
                 [IEPReviewDate],
                 [LastEvaluationDate],
                 [MedicallyFragile],
                 [MultiplyDisabled],
                 [SchoolHoursPerWeek],
                 [SpecialEducationExitDate],
                 [SpecialEducationExitExplained],
                 [SpecialEducationExitReasonDescriptorId],
                 [SpecialEducationHoursPerWeek],
                 [SpecialEducationSettingDescriptorId]
        FROM     [edfi].[StudentSpecialEducationProgramAssociation]
        ORDER BY [BeginDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSpecialEducationProgramAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSpecialEducationProgramAssociation]', N'StudentSpecialEducationProgramAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSpecialEducationProgramAssociation_PK1]', N'StudentSpecialEducationProgramAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramAssociation].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor]
    ON [edfi].[StudentSpecialEducationProgramAssociation]([SpecialEducationExitReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramAssociation].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor]
    ON [edfi].[StudentSpecialEducationProgramAssociation]([SpecialEducationSettingDescriptorId] ASC);


GO
PRINT N'Starting rebuilding table [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [tracked_changes_edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation] (
    [OldConsentToEvaluationReceivedDate] DATE             NOT NULL,
    [OldEducationOrganizationId]         BIGINT           NOT NULL,
    [OldProgramEducationOrganizationId]  BIGINT           NOT NULL,
    [OldProgramName]                     NVARCHAR (60)    NOT NULL,
    [OldProgramTypeDescriptorId]         INT              NOT NULL,
    [OldProgramTypeDescriptorNamespace]  NVARCHAR (255)   NOT NULL,
    [OldProgramTypeDescriptorCodeValue]  NVARCHAR (50)    NOT NULL,
    [OldStudentUSI]                      INT              NOT NULL,
    [OldStudentUniqueId]                 NVARCHAR (32)    NOT NULL,
    [NewConsentToEvaluationReceivedDate] DATE             NULL,
    [NewEducationOrganizationId]         BIGINT           NULL,
    [NewProgramEducationOrganizationId]  BIGINT           NULL,
    [NewProgramName]                     NVARCHAR (60)    NULL,
    [NewProgramTypeDescriptorId]         INT              NULL,
    [NewProgramTypeDescriptorNamespace]  NVARCHAR (255)   NULL,
    [NewProgramTypeDescriptorCodeValue]  NVARCHAR (50)    NULL,
    [NewStudentUSI]                      INT              NULL,
    [NewStudentUniqueId]                 NVARCHAR (32)    NULL,
    [Id]                                 UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                      BIGINT           NOT NULL,
    [Discriminator]                      NVARCHAR (128)   NULL,
    [CreateDate]                         DATETIME2 (7)    DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_StudentSpecialEducationProgramEligibilityAssociation1] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation])
    BEGIN
        INSERT INTO [tracked_changes_edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation] ([ChangeVersion], [OldConsentToEvaluationReceivedDate], [OldEducationOrganizationId], [OldProgramEducationOrganizationId], [OldProgramName], [OldProgramTypeDescriptorId], [OldProgramTypeDescriptorNamespace], [OldProgramTypeDescriptorCodeValue], [OldStudentUSI], [OldStudentUniqueId], [NewConsentToEvaluationReceivedDate], [NewEducationOrganizationId], [NewProgramName], [NewProgramTypeDescriptorId], [NewProgramTypeDescriptorNamespace], [NewProgramTypeDescriptorCodeValue], [NewStudentUSI], [NewStudentUniqueId], [Id], [Discriminator], [CreateDate])
        SELECT   [ChangeVersion],
                 [OldConsentToEvaluationReceivedDate],
                 [OldEducationOrganizationId],
				 [OldEducationOrganizationId],
                 [OldProgramName],
                 [OldProgramTypeDescriptorId],
                 [OldProgramTypeDescriptorNamespace],
                 [OldProgramTypeDescriptorCodeValue],
                 [OldStudentUSI],
                 [OldStudentUniqueId],
                 [NewConsentToEvaluationReceivedDate],
                 [NewEducationOrganizationId],
                 [NewProgramName],
                 [NewProgramTypeDescriptorId],
                 [NewProgramTypeDescriptorNamespace],
                 [NewProgramTypeDescriptorCodeValue],
                 [NewStudentUSI],
                 [NewStudentUniqueId],
                 [Id],
                 [Discriminator],
                 [CreateDate]
        FROM     [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation]
        ORDER BY [ChangeVersion] ASC;
    END

DROP TABLE [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation];

EXECUTE sp_rename N'[tracked_changes_edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation]', N'StudentSpecialEducationProgramEligibilityAssociation';

EXECUTE sp_rename N'[tracked_changes_edfi].[tmp_ms_xx_constraint_PK_StudentSpecialEducationProgramEligibilityAssociation1]', N'PK_StudentSpecialEducationProgramEligibilityAssociation', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [edfi].[AssessmentAdministration]...';


GO
CREATE TABLE [edfi].[AssessmentAdministration] (
    [AdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [AssigningEducationOrganizationId] BIGINT           NOT NULL,
    [Namespace]                        NVARCHAR (255)   NOT NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    NOT NULL,
    [Id]                               UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]                      INT              NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           NOT NULL,
    CONSTRAINT [AssessmentAdministration_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministration].[FK_AssessmentAdministration_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministration_Assessment]
    ON [edfi].[AssessmentAdministration]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministration].[FK_AssessmentAdministration_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministration_EducationOrganization]
    ON [edfi].[AssessmentAdministration]([AssigningEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministration].[UX_AssessmentAdministration_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AssessmentAdministration_Id]
    ON [edfi].[AssessmentAdministration]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministration].[IX_AssessmentAdministration_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentAdministration_AggregateId]
    ON [edfi].[AssessmentAdministration]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministration].[UX_AssessmentAdministration_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AssessmentAdministration_ChangeVersion]
    ON [edfi].[AssessmentAdministration]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[AssessmentAdministrationAssessmentBatteryPart]...';


GO
CREATE TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart] (
    [AdministrationIdentifier]         NVARCHAR (255) NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)  NOT NULL,
    [AssigningEducationOrganizationId] BIGINT         NOT NULL,
    [Namespace]                        NVARCHAR (255) NOT NULL,
    [AssessmentBatteryPartName]        NVARCHAR (65)  NOT NULL,
    [CreateDate]                       DATETIME2 (7)  NOT NULL,
    CONSTRAINT [AssessmentAdministrationAssessmentBatteryPart_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC, [AssessmentBatteryPartName] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationAssessmentBatteryPart].[FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentBatteryPart]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentBatteryPart]
    ON [edfi].[AssessmentAdministrationAssessmentBatteryPart]([AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Table [edfi].[AssessmentAdministrationParticipation]...';


GO
CREATE TABLE [edfi].[AssessmentAdministrationParticipation] (
    [AdministrationIdentifier]             NVARCHAR (255)   NOT NULL,
    [AssessmentIdentifier]                 NVARCHAR (60)    NOT NULL,
    [AssigningEducationOrganizationId]     BIGINT           NOT NULL,
    [Namespace]                            NVARCHAR (255)   NOT NULL,
    [ParticipatingEducationOrganizationId] BIGINT           NOT NULL,
    [Discriminator]                        NVARCHAR (128)   NULL,
    [CreateDate]                           DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]                     DATETIME2 (7)    NOT NULL,
    [Id]                                   UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]                          INT              NOT NULL,
    [AggregateData]                        VARBINARY (8000) NULL,
    [ChangeVersion]                        BIGINT           NOT NULL,
    CONSTRAINT [AssessmentAdministrationParticipation_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC, [ParticipatingEducationOrganizationId] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[FK_AssessmentAdministrationParticipation_AssessmentAdministration]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministrationParticipation_AssessmentAdministration]
    ON [edfi].[AssessmentAdministrationParticipation]([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[FK_AssessmentAdministrationParticipation_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministrationParticipation_EducationOrganization]
    ON [edfi].[AssessmentAdministrationParticipation]([ParticipatingEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[UX_AssessmentAdministrationParticipation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AssessmentAdministrationParticipation_Id]
    ON [edfi].[AssessmentAdministrationParticipation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[IX_AssessmentAdministrationParticipation_AssigningEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentAdministrationParticipation_AssigningEducationOrganizationId]
    ON [edfi].[AssessmentAdministrationParticipation]([AssigningEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[IX_AssessmentAdministrationParticipation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentAdministrationParticipation_AggregateId]
    ON [edfi].[AssessmentAdministrationParticipation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipation].[UX_AssessmentAdministrationParticipation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AssessmentAdministrationParticipation_ChangeVersion]
    ON [edfi].[AssessmentAdministrationParticipation]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact]...';


GO
CREATE TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact] (
    [AdministrationIdentifier]             NVARCHAR (255) NOT NULL,
    [AssessmentIdentifier]                 NVARCHAR (60)  NOT NULL,
    [AssigningEducationOrganizationId]     BIGINT         NOT NULL,
    [Namespace]                            NVARCHAR (255) NOT NULL,
    [ParticipatingEducationOrganizationId] BIGINT         NOT NULL,
    [EducationOrganizationId]              BIGINT         NOT NULL,
    [ElectronicMailAddress]                NVARCHAR (128) NOT NULL,
    [FirstName]                            NVARCHAR (75)  NOT NULL,
    [LastSurname]                          NVARCHAR (75)  NOT NULL,
    [LoginId]                              NVARCHAR (60)  NULL,
    [CreateDate]                           DATETIME2 (7)  NOT NULL,
    CONSTRAINT [AssessmentAdministrationParticipationAdministrationPointOfContact_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC, [ParticipatingEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [ElectronicMailAddress] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[FK_AssessmentAdministrationParticipationAdministrationPointOfContact_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentAdministrationParticipationAdministrationPointOfContact_EducationOrganization]
    ON [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact]([EducationOrganizationId] ASC);


GO
PRINT N'Creating Table [edfi].[AssessmentAdministrationPeriod]...';


GO
CREATE TABLE [edfi].[AssessmentAdministrationPeriod] (
    [AdministrationIdentifier]         NVARCHAR (255) NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)  NOT NULL,
    [AssigningEducationOrganizationId] BIGINT         NOT NULL,
    [Namespace]                        NVARCHAR (255) NOT NULL,
    [BeginDate]                        DATE           NOT NULL,
    [EndDate]                          DATE           NULL,
    [CreateDate]                       DATETIME2 (7)  NOT NULL,
    CONSTRAINT [AssessmentAdministrationPeriod_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC, [BeginDate] ASC)
);


GO
PRINT N'Creating Table [edfi].[AssessmentBatteryPart]...';


GO
CREATE TABLE [edfi].[AssessmentBatteryPart] (
    [AssessmentBatteryPartName] NVARCHAR (65)    NOT NULL,
    [AssessmentIdentifier]      NVARCHAR (60)    NOT NULL,
    [Namespace]                 NVARCHAR (255)   NOT NULL,
    [Discriminator]             NVARCHAR (128)   NULL,
    [CreateDate]                DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]          DATETIME2 (7)    NOT NULL,
    [Id]                        UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]               INT              NOT NULL,
    [AggregateData]             VARBINARY (8000) NULL,
    [ChangeVersion]             BIGINT           NOT NULL,
    CONSTRAINT [AssessmentBatteryPart_PK] PRIMARY KEY CLUSTERED ([AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [Namespace] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentBatteryPart].[FK_AssessmentBatteryPart_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentBatteryPart_Assessment]
    ON [edfi].[AssessmentBatteryPart]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentBatteryPart].[UX_AssessmentBatteryPart_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AssessmentBatteryPart_Id]
    ON [edfi].[AssessmentBatteryPart]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AssessmentBatteryPart].[IX_AssessmentBatteryPart_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentBatteryPart_AggregateId]
    ON [edfi].[AssessmentBatteryPart]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentBatteryPart].[UX_AssessmentBatteryPart_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AssessmentBatteryPart_ChangeVersion]
    ON [edfi].[AssessmentBatteryPart]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[AssessmentBatteryPartObjectiveAssessment]...';


GO
CREATE TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment] (
    [AssessmentBatteryPartName] NVARCHAR (65)  NOT NULL,
    [AssessmentIdentifier]      NVARCHAR (60)  NOT NULL,
    [Namespace]                 NVARCHAR (255) NOT NULL,
    [IdentificationCode]        NVARCHAR (60)  NOT NULL,
    [CreateDate]                DATETIME2 (7)  NOT NULL,
    CONSTRAINT [AssessmentBatteryPartObjectiveAssessment_PK] PRIMARY KEY CLUSTERED ([AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [Namespace] ASC, [IdentificationCode] ASC)
);


GO
PRINT N'Creating Index [edfi].[AssessmentBatteryPartObjectiveAssessment].[FK_AssessmentBatteryPartObjectiveAssessment_ObjectiveAssessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentBatteryPartObjectiveAssessment_ObjectiveAssessment]
    ON [edfi].[AssessmentBatteryPartObjectiveAssessment]([AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC);


GO
PRINT N'Creating Table [edfi].[DualCreditInstitutionDescriptor]...';


GO
CREATE TABLE [edfi].[DualCreditInstitutionDescriptor] (
    [DualCreditInstitutionDescriptorId] INT NOT NULL,
    CONSTRAINT [DualCreditInstitutionDescriptor_PK] PRIMARY KEY CLUSTERED ([DualCreditInstitutionDescriptorId] ASC)
);


GO
PRINT N'Creating Table [edfi].[DualCreditTypeDescriptor]...';


GO
CREATE TABLE [edfi].[DualCreditTypeDescriptor] (
    [DualCreditTypeDescriptorId] INT NOT NULL,
    CONSTRAINT [DualCreditTypeDescriptor_PK] PRIMARY KEY CLUSTERED ([DualCreditTypeDescriptorId] ASC)
);


GO
PRINT N'Creating Table [edfi].[Section504DisabilityDescriptor]...';


GO
CREATE TABLE [edfi].[Section504DisabilityDescriptor] (
    [Section504DisabilityDescriptorId] INT NOT NULL,
    CONSTRAINT [Section504DisabilityDescriptor_PK] PRIMARY KEY CLUSTERED ([Section504DisabilityDescriptorId] ASC)
);


GO
PRINT N'Creating Table [edfi].[StudentAssessmentRegistration]...';


GO
CREATE TABLE [edfi].[StudentAssessmentRegistration] (
    [AdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [AssigningEducationOrganizationId] BIGINT           NOT NULL,
    [EducationOrganizationId]          BIGINT           NOT NULL,
    [Namespace]                        NVARCHAR (255)   NOT NULL,
    [StudentUSI]                       INT              NOT NULL,
    [AssessmentGradeLevelDescriptorId] INT              NULL,
    [EntryDate]                        DATE             NOT NULL,
    [PlatformTypeDescriptorId]         INT              NULL,
    [ReportingEducationOrganizationId] BIGINT           NULL,
    [ScheduledEducationOrganizationId] BIGINT           NULL,
    [ScheduledStudentUSI]              INT              NULL,
    [SchoolId]                         BIGINT           NOT NULL,
    [TestingEducationOrganizationId]   BIGINT           NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    NOT NULL,
    [Id]                               UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]                      INT              NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           NOT NULL,
    CONSTRAINT [StudentAssessmentRegistration_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_AssessmentAdministration]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_AssessmentAdministration]
    ON [edfi].[StudentAssessmentRegistration]([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_EducationOrganization]
    ON [edfi].[StudentAssessmentRegistration]([ReportingEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_EducationOrganization1]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_EducationOrganization1]
    ON [edfi].[StudentAssessmentRegistration]([TestingEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_GradeLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_GradeLevelDescriptor]
    ON [edfi].[StudentAssessmentRegistration]([AssessmentGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_PlatformTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_PlatformTypeDescriptor]
    ON [edfi].[StudentAssessmentRegistration]([PlatformTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_StudentEducationOrganizationAssessmentAccommodation]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssessmentAccommodation]
    ON [edfi].[StudentAssessmentRegistration]([ScheduledEducationOrganizationId] ASC, [ScheduledStudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_StudentEducationOrganizationAssociation]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssociation]
    ON [edfi].[StudentAssessmentRegistration]([EducationOrganizationId] ASC, [StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[FK_StudentAssessmentRegistration_StudentSchoolAssociation]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistration_StudentSchoolAssociation]
    ON [edfi].[StudentAssessmentRegistration]([EntryDate] ASC, [SchoolId] ASC, [StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[UX_StudentAssessmentRegistration_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentAssessmentRegistration_Id]
    ON [edfi].[StudentAssessmentRegistration]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_AssigningEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_AssigningEducationOrganizationId]
    ON [edfi].[StudentAssessmentRegistration]([AssigningEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_EducationOrganizationId]
    ON [edfi].[StudentAssessmentRegistration]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_SchoolId]
    ON [edfi].[StudentAssessmentRegistration]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_AggregateId]
    ON [edfi].[StudentAssessmentRegistration]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_StudentUSI]
    ON [edfi].[StudentAssessmentRegistration]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[IX_StudentAssessmentRegistration_ScheduledStudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistration_ScheduledStudentUSI]
    ON [edfi].[StudentAssessmentRegistration]([ScheduledStudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistration].[UX_StudentAssessmentRegistration_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentAssessmentRegistration_ChangeVersion]
    ON [edfi].[StudentAssessmentRegistration]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[StudentAssessmentRegistrationAssessmentAccommodation]...';


GO
CREATE TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation] (
    [AdministrationIdentifier]         NVARCHAR (255) NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)  NOT NULL,
    [AssigningEducationOrganizationId] BIGINT         NOT NULL,
    [EducationOrganizationId]          BIGINT         NOT NULL,
    [Namespace]                        NVARCHAR (255) NOT NULL,
    [StudentUSI]                       INT            NOT NULL,
    [AccommodationDescriptorId]        INT            NOT NULL,
    [CreateDate]                       DATETIME2 (7)  NOT NULL,
    CONSTRAINT [StudentAssessmentRegistrationAssessmentAccommodation_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC, [AccommodationDescriptorId] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[FK_StudentAssessmentRegistrationAssessmentAccommodation_AccommodationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistrationAssessmentAccommodation_AccommodationDescriptor]
    ON [edfi].[StudentAssessmentRegistrationAssessmentAccommodation]([AccommodationDescriptorId] ASC);


GO
PRINT N'Creating Table [edfi].[StudentAssessmentRegistrationAssessmentCustomization]...';


GO
CREATE TABLE [edfi].[StudentAssessmentRegistrationAssessmentCustomization] (
    [AdministrationIdentifier]         NVARCHAR (255)  NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)   NOT NULL,
    [AssigningEducationOrganizationId] BIGINT          NOT NULL,
    [EducationOrganizationId]          BIGINT          NOT NULL,
    [Namespace]                        NVARCHAR (255)  NOT NULL,
    [StudentUSI]                       INT             NOT NULL,
    [CustomizationKey]                 NVARCHAR (60)   NOT NULL,
    [CustomizationValue]               NVARCHAR (1024) NOT NULL,
    [CreateDate]                       DATETIME2 (7)   NOT NULL,
    CONSTRAINT [StudentAssessmentRegistrationAssessmentCustomization_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC, [CustomizationKey] ASC)
);


GO
PRINT N'Creating Table [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]...';


GO
CREATE TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] (
    [AdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [AssessmentBatteryPartName]        NVARCHAR (65)    NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [AssigningEducationOrganizationId] BIGINT           NOT NULL,
    [EducationOrganizationId]          BIGINT           NOT NULL,
    [Namespace]                        NVARCHAR (255)   NOT NULL,
    [StudentUSI]                       INT              NOT NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    NOT NULL,
    [Id]                               UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]                      INT              NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           NOT NULL,
    CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociation_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[FK_StudentAssessmentRegistrationBatteryPartAssociation_AssessmentBatteryPart]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistrationBatteryPartAssociation_AssessmentBatteryPart]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[FK_StudentAssessmentRegistrationBatteryPartAssociation_StudentAssessmentRegistration]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistrationBatteryPartAssociation_StudentAssessmentRegistration]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([AdministrationIdentifier] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[UX_StudentAssessmentRegistrationBatteryPartAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentAssessmentRegistrationBatteryPartAssociation_Id]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[IX_StudentAssessmentRegistrationBatteryPartAssociation_AssigningEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistrationBatteryPartAssociation_AssigningEducationOrganizationId]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([AssigningEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[IX_StudentAssessmentRegistrationBatteryPartAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistrationBatteryPartAssociation_EducationOrganizationId]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[IX_StudentAssessmentRegistrationBatteryPartAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistrationBatteryPartAssociation_AggregateId]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[IX_StudentAssessmentRegistrationBatteryPartAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentRegistrationBatteryPartAssociation_StudentUSI]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[UX_StudentAssessmentRegistrationBatteryPartAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentAssessmentRegistrationBatteryPartAssociation_ChangeVersion]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation]...';


GO
CREATE TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation] (
    [AdministrationIdentifier]         NVARCHAR (255) NOT NULL,
    [AssessmentBatteryPartName]        NVARCHAR (65)  NOT NULL,
    [AssessmentIdentifier]             NVARCHAR (60)  NOT NULL,
    [AssigningEducationOrganizationId] BIGINT         NOT NULL,
    [EducationOrganizationId]          BIGINT         NOT NULL,
    [Namespace]                        NVARCHAR (255) NOT NULL,
    [StudentUSI]                       INT            NOT NULL,
    [AccommodationDescriptorId]        INT            NOT NULL,
    [CreateDate]                       DATETIME2 (7)  NOT NULL,
    CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociationAccommodation_PK] PRIMARY KEY CLUSTERED ([AdministrationIdentifier] ASC, [AssessmentBatteryPartName] ASC, [AssessmentIdentifier] ASC, [AssigningEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentUSI] ASC, [AccommodationDescriptorId] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_AccommodationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_AccommodationDescriptor]
    ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation]([AccommodationDescriptorId] ASC);


GO
PRINT N'Creating Table [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon]...';


GO
CREATE TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon] (
    [BehaviorDescriptorId] INT           NOT NULL,
    [IncidentIdentifier]   NVARCHAR (36) NOT NULL,
    [SchoolId]             BIGINT        NOT NULL,
    [StudentUSI]           INT           NOT NULL,
    [WeaponDescriptorId]   INT           NOT NULL,
    [CreateDate]           DATETIME2 (7) NOT NULL,
    CONSTRAINT [StudentDisciplineIncidentBehaviorAssociationWeapon_PK] PRIMARY KEY CLUSTERED ([BehaviorDescriptorId] ASC, [IncidentIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC, [WeaponDescriptorId] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[FK_StudentDisciplineIncidentBehaviorAssociationWeapon_WeaponDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentBehaviorAssociationWeapon_WeaponDescriptor]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon]([WeaponDescriptorId] ASC);


GO
PRINT N'Creating Table [edfi].[StudentEducationOrganizationAssessmentAccommodation]...';


GO
CREATE TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation] (
    [EducationOrganizationId] BIGINT           NOT NULL,
    [StudentUSI]              INT              NOT NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    NOT NULL,
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [AggregateId]             INT              NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           NOT NULL,
    CONSTRAINT [StudentEducationOrganizationAssessmentAccommodation_PK] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [StudentUSI] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodation].[UX_StudentEducationOrganizationAssessmentAccommodation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentEducationOrganizationAssessmentAccommodation_Id]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodation].[IX_StudentEducationOrganizationAssessmentAccommodation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssessmentAccommodation_EducationOrganizationId]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodation].[IX_StudentEducationOrganizationAssessmentAccommodation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssessmentAccommodation_AggregateId]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodation].[IX_StudentEducationOrganizationAssessmentAccommodation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssessmentAccommodation_StudentUSI]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodation].[UX_StudentEducationOrganizationAssessmentAccommodation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentEducationOrganizationAssessmentAccommodation_ChangeVersion]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodation]([ChangeVersion] ASC);


GO
PRINT N'Creating Table [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation]...';


GO
CREATE TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation] (
    [EducationOrganizationId]   BIGINT        NOT NULL,
    [StudentUSI]                INT           NOT NULL,
    [AccommodationDescriptorId] INT           NOT NULL,
    [CreateDate]                DATETIME2 (7) NOT NULL,
    CONSTRAINT [StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_PK] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [StudentUSI] ASC, [AccommodationDescriptorId] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation].[FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_AccommodationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_AccommodationDescriptor]
    ON [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation]([AccommodationDescriptorId] ASC);


GO
PRINT N'Creating Table [edfi].[StudentSection504ProgramAssociation]...';


GO
CREATE TABLE [edfi].[StudentSection504ProgramAssociation] (
    [BeginDate]                         DATE          NOT NULL,
    [EducationOrganizationId]           BIGINT        NOT NULL,
    [ProgramEducationOrganizationId]    BIGINT        NOT NULL,
    [ProgramName]                       NVARCHAR (60) NOT NULL,
    [ProgramTypeDescriptorId]           INT           NOT NULL,
    [StudentUSI]                        INT           NOT NULL,
    [AccommodationPlan]                 BIT           NULL,
    [Section504DisabilityDescriptorId]  INT           NULL,
    [Section504Eligibility]             BIT           NOT NULL,
    [Section504EligibilityDecisionDate] DATE          NULL,
    [Section504MeetingDate]             DATE          NULL,
    CONSTRAINT [StudentSection504ProgramAssociation_PK] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);


GO
PRINT N'Creating Index [edfi].[StudentSection504ProgramAssociation].[FK_StudentSection504ProgramAssociation_Section504DisabilityDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSection504ProgramAssociation_Section504DisabilityDescriptor]
    ON [edfi].[StudentSection504ProgramAssociation]([Section504DisabilityDescriptorId] ASC);


GO
PRINT N'Creating Table [tracked_changes_edfi].[AssessmentAdministration]...';


GO
CREATE TABLE [tracked_changes_edfi].[AssessmentAdministration] (
    [OldAdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [OldAssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [OldAssigningEducationOrganizationId] BIGINT           NOT NULL,
    [OldNamespace]                        NVARCHAR (255)   NOT NULL,
    [NewAdministrationIdentifier]         NVARCHAR (255)   NULL,
    [NewAssessmentIdentifier]             NVARCHAR (60)    NULL,
    [NewAssigningEducationOrganizationId] BIGINT           NULL,
    [NewNamespace]                        NVARCHAR (255)   NULL,
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                       BIGINT           NOT NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_AssessmentAdministration] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Table [tracked_changes_edfi].[AssessmentAdministrationParticipation]...';


GO
CREATE TABLE [tracked_changes_edfi].[AssessmentAdministrationParticipation] (
    [OldAdministrationIdentifier]             NVARCHAR (255)   NOT NULL,
    [OldAssessmentIdentifier]                 NVARCHAR (60)    NOT NULL,
    [OldAssigningEducationOrganizationId]     BIGINT           NOT NULL,
    [OldNamespace]                            NVARCHAR (255)   NOT NULL,
    [OldParticipatingEducationOrganizationId] BIGINT           NOT NULL,
    [NewAdministrationIdentifier]             NVARCHAR (255)   NULL,
    [NewAssessmentIdentifier]                 NVARCHAR (60)    NULL,
    [NewAssigningEducationOrganizationId]     BIGINT           NULL,
    [NewNamespace]                            NVARCHAR (255)   NULL,
    [NewParticipatingEducationOrganizationId] BIGINT           NULL,
    [Id]                                      UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                           BIGINT           NOT NULL,
    [Discriminator]                           NVARCHAR (128)   NULL,
    [CreateDate]                              DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_AssessmentAdministrationParticipation] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Table [tracked_changes_edfi].[AssessmentBatteryPart]...';


GO
CREATE TABLE [tracked_changes_edfi].[AssessmentBatteryPart] (
    [OldAssessmentBatteryPartName] NVARCHAR (65)    NOT NULL,
    [OldAssessmentIdentifier]      NVARCHAR (60)    NOT NULL,
    [OldNamespace]                 NVARCHAR (255)   NOT NULL,
    [NewAssessmentBatteryPartName] NVARCHAR (65)    NULL,
    [NewAssessmentIdentifier]      NVARCHAR (60)    NULL,
    [NewNamespace]                 NVARCHAR (255)   NULL,
    [Id]                           UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                BIGINT           NOT NULL,
    [Discriminator]                NVARCHAR (128)   NULL,
    [CreateDate]                   DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_AssessmentBatteryPart] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Table [tracked_changes_edfi].[StudentAssessmentRegistration]...';


GO
CREATE TABLE [tracked_changes_edfi].[StudentAssessmentRegistration] (
    [OldAdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [OldAssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [OldAssigningEducationOrganizationId] BIGINT           NOT NULL,
    [OldEducationOrganizationId]          BIGINT           NOT NULL,
    [OldNamespace]                        NVARCHAR (255)   NOT NULL,
    [OldStudentUSI]                       INT              NOT NULL,
    [OldStudentUniqueId]                  NVARCHAR (32)    NOT NULL,
    [NewAdministrationIdentifier]         NVARCHAR (255)   NULL,
    [NewAssessmentIdentifier]             NVARCHAR (60)    NULL,
    [NewAssigningEducationOrganizationId] BIGINT           NULL,
    [NewEducationOrganizationId]          BIGINT           NULL,
    [NewNamespace]                        NVARCHAR (255)   NULL,
    [NewStudentUSI]                       INT              NULL,
    [NewStudentUniqueId]                  NVARCHAR (32)    NULL,
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                       BIGINT           NOT NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_StudentAssessmentRegistration] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Table [tracked_changes_edfi].[StudentAssessmentRegistrationBatteryPartAssociation]...';


GO
CREATE TABLE [tracked_changes_edfi].[StudentAssessmentRegistrationBatteryPartAssociation] (
    [OldAdministrationIdentifier]         NVARCHAR (255)   NOT NULL,
    [OldAssessmentBatteryPartName]        NVARCHAR (65)    NOT NULL,
    [OldAssessmentIdentifier]             NVARCHAR (60)    NOT NULL,
    [OldAssigningEducationOrganizationId] BIGINT           NOT NULL,
    [OldEducationOrganizationId]          BIGINT           NOT NULL,
    [OldNamespace]                        NVARCHAR (255)   NOT NULL,
    [OldStudentUSI]                       INT              NOT NULL,
    [OldStudentUniqueId]                  NVARCHAR (32)    NOT NULL,
    [NewAdministrationIdentifier]         NVARCHAR (255)   NULL,
    [NewAssessmentBatteryPartName]        NVARCHAR (65)    NULL,
    [NewAssessmentIdentifier]             NVARCHAR (60)    NULL,
    [NewAssigningEducationOrganizationId] BIGINT           NULL,
    [NewEducationOrganizationId]          BIGINT           NULL,
    [NewNamespace]                        NVARCHAR (255)   NULL,
    [NewStudentUSI]                       INT              NULL,
    [NewStudentUniqueId]                  NVARCHAR (32)    NULL,
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]                       BIGINT           NOT NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_StudentAssessmentRegistrationBatteryPartAssociation] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Table [tracked_changes_edfi].[StudentEducationOrganizationAssessmentAccommodation]...';


GO
CREATE TABLE [tracked_changes_edfi].[StudentEducationOrganizationAssessmentAccommodation] (
    [OldEducationOrganizationId] BIGINT           NOT NULL,
    [OldStudentUSI]              INT              NOT NULL,
    [OldStudentUniqueId]         NVARCHAR (32)    NOT NULL,
    [NewEducationOrganizationId] BIGINT           NULL,
    [NewStudentUSI]              INT              NULL,
    [NewStudentUniqueId]         NVARCHAR (32)    NULL,
    [Id]                         UNIQUEIDENTIFIER NOT NULL,
    [ChangeVersion]              BIGINT           NOT NULL,
    [Discriminator]              NVARCHAR (128)   NULL,
    [CreateDate]                 DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_StudentEducationOrganizationAssessmentAccommodation] PRIMARY KEY CLUSTERED ([ChangeVersion] ASC)
);


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAcademicSubject]
    ADD CONSTRAINT [AssessmentAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAssessedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAssessedGradeLevel]
    ADD CONSTRAINT [AssessmentAssessedGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentContentStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard]
    ADD CONSTRAINT [AssessmentContentStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentContentStandardAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandardAuthor]
    ADD CONSTRAINT [AssessmentContentStandardAuthor_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationCode]
    ADD CONSTRAINT [AssessmentIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentItemLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard]
    ADD CONSTRAINT [AssessmentItemLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentItemPossibleResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentItemPossibleResponse]
    ADD CONSTRAINT [AssessmentItemPossibleResponse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentLanguage]
    ADD CONSTRAINT [AssessmentLanguage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPerformanceLevel]
    ADD CONSTRAINT [AssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPeriod]
    ADD CONSTRAINT [AssessmentPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentPlatformType_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentPlatformType]
    ADD CONSTRAINT [AssessmentPlatformType_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentProgram]
    ADD CONSTRAINT [AssessmentProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentScore]
    ADD CONSTRAINT [AssessmentScore_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentScoreRangeLearningStandardLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard]
    ADD CONSTRAINT [AssessmentScoreRangeLearningStandardLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentSection]
    ADD CONSTRAINT [AssessmentSection_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[BalanceSheetDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimensionReportingTag]
    ADD CONSTRAINT [BalanceSheetDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[BellScheduleClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod]
    ADD CONSTRAINT [BellScheduleClassPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[BellScheduleDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleDate]
    ADD CONSTRAINT [BellScheduleDate_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[BellScheduleGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[BellScheduleGradeLevel]
    ADD CONSTRAINT [BellScheduleGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CalendarDateCalendarEvent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CalendarDateCalendarEvent]
    ADD CONSTRAINT [CalendarDateCalendarEvent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CalendarGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CalendarGradeLevel]
    ADD CONSTRAINT [CalendarGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ChartOfAccountReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ChartOfAccountReportingTag]
    ADD CONSTRAINT [ChartOfAccountReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ClassPeriodMeetingTime_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ClassPeriodMeetingTime]
    ADD CONSTRAINT [ClassPeriodMeetingTime_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CohortProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CohortProgram]
    ADD CONSTRAINT [CohortProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactAddress]
    ADD CONSTRAINT [ContactAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactAddressPeriod]
    ADD CONSTRAINT [ContactAddressPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactElectronicMail]
    ADD CONSTRAINT [ContactElectronicMail_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactInternationalAddress]
    ADD CONSTRAINT [ContactInternationalAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactLanguage]
    ADD CONSTRAINT [ContactLanguage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactLanguageUse]
    ADD CONSTRAINT [ContactLanguageUse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactOtherName]
    ADD CONSTRAINT [ContactOtherName_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactPersonalIdentificationDocument]
    ADD CONSTRAINT [ContactPersonalIdentificationDocument_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ContactTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ContactTelephone]
    ADD CONSTRAINT [ContactTelephone_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseAcademicSubject]
    ADD CONSTRAINT [CourseAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseCompetencyLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseCompetencyLevel]
    ADD CONSTRAINT [CourseCompetencyLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseIdentificationCode]
    ADD CONSTRAINT [CourseIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard]
    ADD CONSTRAINT [CourseLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristic]
    ADD CONSTRAINT [CourseLevelCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferedGradeLevel]
    ADD CONSTRAINT [CourseOfferedGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseOfferingCourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingCourseLevelCharacteristic]
    ADD CONSTRAINT [CourseOfferingCourseLevelCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseOfferingCurriculumUsed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingCurriculumUsed]
    ADD CONSTRAINT [CourseOfferingCurriculumUsed_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseOfferingOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseOfferingOfferedGradeLevel]
    ADD CONSTRAINT [CourseOfferingOfferedGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAcademicSubject]
    ADD CONSTRAINT [CourseTranscriptAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptAlternativeCourseIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAlternativeCourseIdentificationCode]
    ADD CONSTRAINT [CourseTranscriptAlternativeCourseIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptCourseProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram]
    ADD CONSTRAINT [CourseTranscriptCourseProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptCreditCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCreditCategory]
    ADD CONSTRAINT [CourseTranscriptCreditCategory_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptEarnedAdditionalCredits_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits]
    ADD CONSTRAINT [CourseTranscriptEarnedAdditionalCredits_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptPartialCourseTranscriptAwards_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptPartialCourseTranscriptAwards]
    ADD CONSTRAINT [CourseTranscriptPartialCourseTranscriptAwards_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CourseTranscriptSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection]
    ADD CONSTRAINT [CourseTranscriptSection_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CredentialAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialAcademicSubject]
    ADD CONSTRAINT [CredentialAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CredentialEndorsement_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialEndorsement]
    ADD CONSTRAINT [CredentialEndorsement_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[CredentialGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[CredentialGradeLevel]
    ADD CONSTRAINT [CredentialGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DescriptorMappingModelEntity_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DescriptorMappingModelEntity]
    ADD CONSTRAINT [DescriptorMappingModelEntity_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineActionDiscipline_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionDiscipline]
    ADD CONSTRAINT [DisciplineActionDiscipline_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineActionStaff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff]
    ADD CONSTRAINT [DisciplineActionStaff_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation]
    ADD CONSTRAINT [DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineIncidentBehavior_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentBehavior]
    ADD CONSTRAINT [DisciplineIncidentBehavior_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineIncidentExternalParticipant_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentExternalParticipant]
    ADD CONSTRAINT [DisciplineIncidentExternalParticipant_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[DisciplineIncidentWeapon_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentWeapon]
    ADD CONSTRAINT [DisciplineIncidentWeapon_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel]
    ADD CONSTRAINT [EducationContentAppropriateGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateSex]
    ADD CONSTRAINT [EducationContentAppropriateSex_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentAuthor]
    ADD CONSTRAINT [EducationContentAuthor_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentDerivativeSourceEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent]
    ADD CONSTRAINT [EducationContentDerivativeSourceEducationContent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI]
    ADD CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentDerivativeSourceURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceURI]
    ADD CONSTRAINT [EducationContentDerivativeSourceURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationContentLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationContentLanguage]
    ADD CONSTRAINT [EducationContentLanguage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddress]
    ADD CONSTRAINT [EducationOrganizationAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddressPeriod]
    ADD CONSTRAINT [EducationOrganizationAddressPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategory]
    ADD CONSTRAINT [EducationOrganizationCategory_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationCode]
    ADD CONSTRAINT [EducationOrganizationIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationIndicator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicator]
    ADD CONSTRAINT [EducationOrganizationIndicator_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationIndicatorPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicatorPeriod]
    ADD CONSTRAINT [EducationOrganizationIndicatorPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationInstitutionTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone]
    ADD CONSTRAINT [EducationOrganizationInstitutionTelephone_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[EducationOrganizationInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInternationalAddress]
    ADD CONSTRAINT [EducationOrganizationInternationalAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[FunctionDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FunctionDimensionReportingTag]
    ADD CONSTRAINT [FunctionDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[FundDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[FundDimensionReportingTag]
    ADD CONSTRAINT [FundDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus]
    ADD CONSTRAINT [GeneralStudentProgramAssociationProgramParticipationStatus_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GradebookEntryLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard]
    ADD CONSTRAINT [GradebookEntryLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GradeLearningStandardGrade_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade]
    ADD CONSTRAINT [GradeLearningStandardGrade_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanCreditsByCourse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourse]
    ADD CONSTRAINT [GraduationPlanCreditsByCourse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanCreditsByCourseCourse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse]
    ADD CONSTRAINT [GraduationPlanCreditsByCourseCourse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanCreditsByCreditCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCreditCategory]
    ADD CONSTRAINT [GraduationPlanCreditsByCreditCategory_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanCreditsBySubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsBySubject]
    ADD CONSTRAINT [GraduationPlanCreditsBySubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanRequiredAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment]
    ADD CONSTRAINT [GraduationPlanRequiredAssessment_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanRequiredAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentPerformanceLevel]
    ADD CONSTRAINT [GraduationPlanRequiredAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[GraduationPlanRequiredAssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore]
    ADD CONSTRAINT [GraduationPlanRequiredAssessmentScore_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateGradeLevel]
    ADD CONSTRAINT [InterventionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateSex]
    ADD CONSTRAINT [InterventionAppropriateSex_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionDiagnosis_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionDiagnosis]
    ADD CONSTRAINT [InterventionDiagnosis_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent]
    ADD CONSTRAINT [InterventionEducationContent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionInterventionPrescription_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription]
    ADD CONSTRAINT [InterventionInterventionPrescription_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI]
    ADD CONSTRAINT [InterventionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionMeetingTime_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionMeetingTime]
    ADD CONSTRAINT [InterventionMeetingTime_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPopulationServed]
    ADD CONSTRAINT [InterventionPopulationServed_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel]
    ADD CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex]
    ADD CONSTRAINT [InterventionPrescriptionAppropriateSex_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionDiagnosis_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis]
    ADD CONSTRAINT [InterventionPrescriptionDiagnosis_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent]
    ADD CONSTRAINT [InterventionPrescriptionEducationContent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI]
    ADD CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed]
    ADD CONSTRAINT [InterventionPrescriptionPopulationServed_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionPrescriptionURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionURI]
    ADD CONSTRAINT [InterventionPrescriptionURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStaff_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStaff]
    ADD CONSTRAINT [InterventionStaff_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyAppropriateGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel]
    ADD CONSTRAINT [InterventionStudyAppropriateGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyAppropriateSex_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateSex]
    ADD CONSTRAINT [InterventionStudyAppropriateSex_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyEducationContent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent]
    ADD CONSTRAINT [InterventionStudyEducationContent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyInterventionEffectiveness_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness]
    ADD CONSTRAINT [InterventionStudyInterventionEffectiveness_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyLearningResourceMetadataURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI]
    ADD CONSTRAINT [InterventionStudyLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyPopulationServed_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyPopulationServed]
    ADD CONSTRAINT [InterventionStudyPopulationServed_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyStateAbbreviation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyStateAbbreviation]
    ADD CONSTRAINT [InterventionStudyStateAbbreviation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionStudyURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionStudyURI]
    ADD CONSTRAINT [InterventionStudyURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[InterventionURI_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[InterventionURI]
    ADD CONSTRAINT [InterventionURI_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LearningStandardAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardAcademicSubject]
    ADD CONSTRAINT [LearningStandardAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LearningStandardContentStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard]
    ADD CONSTRAINT [LearningStandardContentStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LearningStandardContentStandardAuthor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandardAuthor]
    ADD CONSTRAINT [LearningStandardContentStandardAuthor_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LearningStandardGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardGradeLevel]
    ADD CONSTRAINT [LearningStandardGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LearningStandardIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LearningStandardIdentificationCode]
    ADD CONSTRAINT [LearningStandardIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LocalAccountReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalAccountReportingTag]
    ADD CONSTRAINT [LocalAccountReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LocalEducationAgencyAccountability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyAccountability]
    ADD CONSTRAINT [LocalEducationAgencyAccountability_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[LocalEducationAgencyFederalFunds_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds]
    ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ObjectDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectDimensionReportingTag]
    ADD CONSTRAINT [ObjectDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ObjectiveAssessmentAssessmentItem_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem]
    ADD CONSTRAINT [ObjectiveAssessmentAssessmentItem_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ObjectiveAssessmentLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard]
    ADD CONSTRAINT [ObjectiveAssessmentLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ObjectiveAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel]
    ADD CONSTRAINT [ObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ObjectiveAssessmentScore_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentScore]
    ADD CONSTRAINT [ObjectiveAssessmentScore_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[OpenStaffPositionAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject]
    ADD CONSTRAINT [OpenStaffPositionAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[OpenStaffPositionInstructionalGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel]
    ADD CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[OperationalUnitDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimensionReportingTag]
    ADD CONSTRAINT [OperationalUnitDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[PostSecondaryInstitutionMediumOfInstruction_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitutionMediumOfInstruction]
    ADD CONSTRAINT [PostSecondaryInstitutionMediumOfInstruction_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristic]
    ADD CONSTRAINT [ProgramCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramDimensionReportingTag]
    ADD CONSTRAINT [ProgramDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramEvaluationElementProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElementProgramEvaluationLevel]
    ADD CONSTRAINT [ProgramEvaluationElementProgramEvaluationLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationLevel]
    ADD CONSTRAINT [ProgramEvaluationLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel]
    ADD CONSTRAINT [ProgramEvaluationObjectiveProgramEvaluationLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramLearningStandard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard]
    ADD CONSTRAINT [ProgramLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProgramSponsor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProgramSponsor]
    ADD CONSTRAINT [ProgramSponsor_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ProjectDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ProjectDimensionReportingTag]
    ADD CONSTRAINT [ProjectDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ReportCardGrade_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardGrade]
    ADD CONSTRAINT [ReportCardGrade_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ReportCardGradePointAverage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardGradePointAverage]
    ADD CONSTRAINT [ReportCardGradePointAverage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[ReportCardStudentCompetencyObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective]
    ADD CONSTRAINT [ReportCardStudentCompetencyObjective_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[RestraintEventProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram]
    ADD CONSTRAINT [RestraintEventProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[RestraintEventReason_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[RestraintEventReason]
    ADD CONSTRAINT [RestraintEventReason_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SchoolCategory_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SchoolCategory]
    ADD CONSTRAINT [SchoolCategory_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SchoolGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SchoolGradeLevel]
    ADD CONSTRAINT [SchoolGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SectionCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionCharacteristic]
    ADD CONSTRAINT [SectionCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SectionClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod]
    ADD CONSTRAINT [SectionClassPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SectionCourseLevelCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionCourseLevelCharacteristic]
    ADD CONSTRAINT [SectionCourseLevelCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SectionOfferedGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionOfferedGradeLevel]
    ADD CONSTRAINT [SectionOfferedGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SectionProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SectionProgram]
    ADD CONSTRAINT [SectionProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SessionAcademicWeek_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek]
    ADD CONSTRAINT [SessionAcademicWeek_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SessionGradingPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod]
    ADD CONSTRAINT [SessionGradingPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SourceDimensionReportingTag_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SourceDimensionReportingTag]
    ADD CONSTRAINT [SourceDimensionReportingTag_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAddress]
    ADD CONSTRAINT [StaffAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAddressPeriod]
    ADD CONSTRAINT [StaffAddressPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffAncestryEthnicOrigin_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffAncestryEthnicOrigin]
    ADD CONSTRAINT [StaffAncestryEthnicOrigin_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffCredential_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffCredential]
    ADD CONSTRAINT [StaffCredential_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode]
    ADD CONSTRAINT [StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffEducationOrganizationContactAssociationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddress]
    ADD CONSTRAINT [StaffEducationOrganizationContactAssociationAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod]
    ADD CONSTRAINT [StaffEducationOrganizationContactAssociationAddressPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffEducationOrganizationContactAssociationTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationTelephone]
    ADD CONSTRAINT [StaffEducationOrganizationContactAssociationTelephone_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffElectronicMail]
    ADD CONSTRAINT [StaffElectronicMail_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffIdentificationCode]
    ADD CONSTRAINT [StaffIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffIdentificationDocument]
    ADD CONSTRAINT [StaffIdentificationDocument_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffInternationalAddress]
    ADD CONSTRAINT [StaffInternationalAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffLanguage]
    ADD CONSTRAINT [StaffLanguage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffLanguageUse]
    ADD CONSTRAINT [StaffLanguageUse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffOtherName]
    ADD CONSTRAINT [StaffOtherName_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffPersonalIdentificationDocument]
    ADD CONSTRAINT [StaffPersonalIdentificationDocument_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffRace_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffRace]
    ADD CONSTRAINT [StaffRace_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffRecognition_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffRecognition]
    ADD CONSTRAINT [StaffRecognition_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffSchoolAssociationAcademicSubject_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject]
    ADD CONSTRAINT [StaffSchoolAssociationAcademicSubject_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffSchoolAssociationGradeLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel]
    ADD CONSTRAINT [StaffSchoolAssociationGradeLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffTelephone]
    ADD CONSTRAINT [StaffTelephone_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffTribalAffiliation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffTribalAffiliation]
    ADD CONSTRAINT [StaffTribalAffiliation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StaffVisa_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StaffVisa]
    ADD CONSTRAINT [StaffVisa_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StateEducationAgencyAccountability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyAccountability]
    ADD CONSTRAINT [StateEducationAgencyAccountability_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StateEducationAgencyFederalFunds_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyFederalFunds]
    ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordAcademicHonor_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor]
    ADD CONSTRAINT [StudentAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordClassRanking_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordClassRanking]
    ADD CONSTRAINT [StudentAcademicRecordClassRanking_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordDiploma_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordDiploma]
    ADD CONSTRAINT [StudentAcademicRecordDiploma_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordGradePointAverage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordGradePointAverage]
    ADD CONSTRAINT [StudentAcademicRecordGradePointAverage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordRecognition_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordRecognition]
    ADD CONSTRAINT [StudentAcademicRecordRecognition_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAcademicRecordReportCard_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard]
    ADD CONSTRAINT [StudentAcademicRecordReportCard_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentAccommodation]
    ADD CONSTRAINT [StudentAssessmentAccommodation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentItem_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem]
    ADD CONSTRAINT [StudentAssessmentItem_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel]
    ADD CONSTRAINT [StudentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPeriod]
    ADD CONSTRAINT [StudentAssessmentPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentScoreResult_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentScoreResult]
    ADD CONSTRAINT [StudentAssessmentScoreResult_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment]
    ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]
    ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]
    ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentCohortAssociationSection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection]
    ADD CONSTRAINT [StudentCohortAssociationSection_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation]
    ADD CONSTRAINT [StudentCompetencyObjectiveGeneralStudentProgramAssociation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentCompetencyObjectiveStudentSectionAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation]
    ADD CONSTRAINT [StudentCompetencyObjectiveStudentSectionAssociation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentCTEProgramAssociationCTEProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgramService]
    ADD CONSTRAINT [StudentCTEProgramAssociationCTEProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode]
    ADD CONSTRAINT [StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode]
    ADD CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddress]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationAddressPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddressPeriod]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationAddressPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationAncestryEthnicOrigin_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationCohortYear_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationCohortYear_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationDisability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisability]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationDisability_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationDisabilityDesignation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisabilityDesignation]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationDisabilityDesignation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationDisplacedStudent_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationDisplacedStudent_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationElectronicMail_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationElectronicMail]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationElectronicMail_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationInternationalAddress_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationInternationalAddress]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationInternationalAddress_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationLanguage_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguage]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationLanguage_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationLanguageUse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguageUse]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationLanguageUse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationRace_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationRace]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationRace_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationStudentCharacteristic_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationStudentCharacteristicPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationStudentIdentificationCode_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIndicator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicator]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationStudentIndicator_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationStudentIndicatorPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationTelephone_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTelephone]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationTelephone_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssociationTribalAffiliation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTribalAffiliation]
    ADD CONSTRAINT [StudentEducationOrganizationAssociationTribalAffiliation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentHealthAdditionalImmunization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunization]
    ADD CONSTRAINT [StudentHealthAdditionalImmunization_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentHealthAdditionalImmunizationDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunizationDate]
    ADD CONSTRAINT [StudentHealthAdditionalImmunizationDate_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentHealthRequiredImmunization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunization]
    ADD CONSTRAINT [StudentHealthRequiredImmunization_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentHealthRequiredImmunizationDate_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunizationDate]
    ADD CONSTRAINT [StudentHealthRequiredImmunizationDate_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentHomelessProgramAssociationHomelessProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentHomelessProgramAssociationHomelessProgramService]
    ADD CONSTRAINT [StudentHomelessProgramAssociationHomelessProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentIdentificationDocument]
    ADD CONSTRAINT [StudentIdentificationDocument_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness]
    ADD CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment]
    ADD CONSTRAINT [StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService]
    ADD CONSTRAINT [StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService]
    ADD CONSTRAINT [StudentMigrantEducationProgramAssociationMigrantEducationProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService]
    ADD CONSTRAINT [StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentOtherName_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentOtherName]
    ADD CONSTRAINT [StudentOtherName_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentPersonalIdentificationDocument_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentPersonalIdentificationDocument]
    ADD CONSTRAINT [StudentPersonalIdentificationDocument_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentProgramAssociationService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramAssociationService]
    ADD CONSTRAINT [StudentProgramAssociationService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentProgramEvaluationExternalEvaluator_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationExternalEvaluator]
    ADD CONSTRAINT [StudentProgramEvaluationExternalEvaluator_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentProgramEvaluationStudentEvaluationElement_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement]
    ADD CONSTRAINT [StudentProgramEvaluationStudentEvaluationElement_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentProgramEvaluationStudentEvaluationObjective_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective]
    ADD CONSTRAINT [StudentProgramEvaluationStudentEvaluationObjective_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSchoolAssociationAlternativeGraduationPlan_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan]
    ADD CONSTRAINT [StudentSchoolAssociationAlternativeGraduationPlan_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSchoolAssociationEducationPlan_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan]
    ADD CONSTRAINT [StudentSchoolAssociationEducationPlan_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService]
    ADD CONSTRAINT [StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSectionAssociationProgram_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram]
    ADD CONSTRAINT [StudentSectionAssociationProgram_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSectionAttendanceEventClassPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod]
    ADD CONSTRAINT [StudentSectionAttendanceEventClassPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSpecialEducationProgramAssociationDisability_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisability]
    ADD CONSTRAINT [StudentSpecialEducationProgramAssociationDisability_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSpecialEducationProgramAssociationDisabilityDesignation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisabilityDesignation]
    ADD CONSTRAINT [StudentSpecialEducationProgramAssociationDisabilityDesignation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider]
    ADD CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService]
    ADD CONSTRAINT [StudentSpecialEducationProgramAssociationSpecialEducationProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider]
    ADD CONSTRAINT [StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService]
    ADD CONSTRAINT [StudentTitleIPartAProgramAssociationTitleIPartAProgramService_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentTransportationStudentBusDetails_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetails]
    ADD CONSTRAINT [StudentTransportationStudentBusDetails_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentTransportationStudentBusDetailsTravelDayofWeek_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetailsTravelDayofWeek]
    ADD CONSTRAINT [StudentTransportationStudentBusDetailsTravelDayofWeek_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentTransportationStudentBusDetailsTravelDirection_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetailsTravelDirection]
    ADD CONSTRAINT [StudentTransportationStudentBusDetailsTravelDirection_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentVisa_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentVisa]
    ADD CONSTRAINT [StudentVisa_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SurveyQuestionMatrix_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionMatrix]
    ADD CONSTRAINT [SurveyQuestionMatrix_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SurveyQuestionResponseChoice_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseChoice]
    ADD CONSTRAINT [SurveyQuestionResponseChoice_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse]
    ADD CONSTRAINT [SurveyQuestionResponseSurveyQuestionMatrixElementResponse_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SurveyQuestionResponseValue_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseValue]
    ADD CONSTRAINT [SurveyQuestionResponseValue_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[SurveyResponseSurveyLevel_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[SurveyResponseSurveyLevel]
    ADD CONSTRAINT [SurveyResponseSurveyLevel_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministration_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration]
    ADD CONSTRAINT [AssessmentAdministration_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministration_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration]
    ADD CONSTRAINT [AssessmentAdministration_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministration_DF_Id]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration]
    ADD CONSTRAINT [AssessmentAdministration_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministration_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration]
    ADD CONSTRAINT [AssessmentAdministration_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationAssessmentBatteryPart_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart]
    ADD CONSTRAINT [AssessmentAdministrationAssessmentBatteryPart_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationParticipation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation]
    ADD CONSTRAINT [AssessmentAdministrationParticipation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationParticipation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation]
    ADD CONSTRAINT [AssessmentAdministrationParticipation_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationParticipation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation]
    ADD CONSTRAINT [AssessmentAdministrationParticipation_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationParticipation_DF_Id]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation]
    ADD CONSTRAINT [AssessmentAdministrationParticipation_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact]
    ADD CONSTRAINT [AssessmentAdministrationParticipationAdministrationPointOfContact_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentAdministrationPeriod_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationPeriod]
    ADD CONSTRAINT [AssessmentAdministrationPeriod_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentBatteryPart_DF_Id]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart]
    ADD CONSTRAINT [AssessmentBatteryPart_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentBatteryPart_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart]
    ADD CONSTRAINT [AssessmentBatteryPart_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentBatteryPart_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart]
    ADD CONSTRAINT [AssessmentBatteryPart_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentBatteryPart_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart]
    ADD CONSTRAINT [AssessmentBatteryPart_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[AssessmentBatteryPartObjectiveAssessment_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment]
    ADD CONSTRAINT [AssessmentBatteryPartObjectiveAssessment_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistration_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration]
    ADD CONSTRAINT [StudentAssessmentRegistration_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistration_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration]
    ADD CONSTRAINT [StudentAssessmentRegistration_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistration_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration]
    ADD CONSTRAINT [StudentAssessmentRegistration_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistration_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration]
    ADD CONSTRAINT [StudentAssessmentRegistration_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationAssessmentAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation]
    ADD CONSTRAINT [StudentAssessmentRegistrationAssessmentAccommodation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationAssessmentCustomization_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentCustomization]
    ADD CONSTRAINT [StudentAssessmentRegistrationAssessmentCustomization_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociation_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociation_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation]
    ADD CONSTRAINT [StudentAssessmentRegistrationBatteryPartAssociationAccommodation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon]
    ADD CONSTRAINT [StudentDisciplineIncidentBehaviorAssociationWeapon_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssessmentAccommodation_DF_ChangeVersion]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD CONSTRAINT [StudentEducationOrganizationAssessmentAccommodation_DF_ChangeVersion] DEFAULT (NEXT VALUE FOR [changes].[ChangeVersionSequence]) FOR [ChangeVersion];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssessmentAccommodation_DF_Id]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD CONSTRAINT [StudentEducationOrganizationAssessmentAccommodation_DF_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssessmentAccommodation_DF_LastModifiedDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD CONSTRAINT [StudentEducationOrganizationAssessmentAccommodation_DF_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssessmentAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD CONSTRAINT [StudentEducationOrganizationAssessmentAccommodation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_DF_CreateDate]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation]
    ADD CONSTRAINT [StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_DF_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[AssessmentAdministration]...';


GO
ALTER TABLE [tracked_changes_edfi].[AssessmentAdministration]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[AssessmentAdministrationParticipation]...';


GO
ALTER TABLE [tracked_changes_edfi].[AssessmentAdministrationParticipation]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[AssessmentBatteryPart]...';


GO
ALTER TABLE [tracked_changes_edfi].[AssessmentBatteryPart]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[StudentAssessmentRegistration]...';


GO
ALTER TABLE [tracked_changes_edfi].[StudentAssessmentRegistration]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[StudentAssessmentRegistrationBatteryPartAssociation]...';


GO
ALTER TABLE [tracked_changes_edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [tracked_changes_edfi].[StudentEducationOrganizationAssessmentAccommodation]...';


GO
ALTER TABLE [tracked_changes_edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating Sequence [edfi].[AcademicWeek_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AcademicWeek_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AccountabilityRating_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AccountabilityRating_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Assessment_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Assessment_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AssessmentAdministration_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AssessmentAdministration_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AssessmentAdministrationParticipation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AssessmentAdministrationParticipation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AssessmentBatteryPart_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AssessmentBatteryPart_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AssessmentItem_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AssessmentItem_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[AssessmentScoreRangeLearningStandard_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[AssessmentScoreRangeLearningStandard_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[BalanceSheetDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[BalanceSheetDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[BellSchedule_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[BellSchedule_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Calendar_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Calendar_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CalendarDate_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CalendarDate_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ChartOfAccount_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ChartOfAccount_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ClassPeriod_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ClassPeriod_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Cohort_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Cohort_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CommunityProviderLicense_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CommunityProviderLicense_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CompetencyObjective_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CompetencyObjective_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Contact_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Contact_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Course_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Course_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CourseOffering_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CourseOffering_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CourseTranscript_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CourseTranscript_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Credential_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Credential_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[CrisisEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[CrisisEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Descriptor_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Descriptor_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
SELECT  NEXT VALUE FOR [edfi].[Descriptor_AggSeq];

ALTER SEQUENCE [edfi].[Descriptor_AggSeq]
    INCREMENT BY 3297;

SELECT  NEXT VALUE FOR [edfi].[Descriptor_AggSeq];

ALTER SEQUENCE [edfi].[Descriptor_AggSeq]
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[DescriptorMapping_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[DescriptorMapping_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[DisciplineAction_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[DisciplineAction_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[DisciplineIncident_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[DisciplineIncident_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EducationContent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EducationContent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EducationOrganization_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EducationOrganization_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EducationOrganizationInterventionPrescriptionAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EducationOrganizationInterventionPrescriptionAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EducationOrganizationNetworkAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EducationOrganizationNetworkAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EducationOrganizationPeerAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EducationOrganizationPeerAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[EvaluationRubricDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[EvaluationRubricDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[FeederSchoolAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[FeederSchoolAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[FunctionDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[FunctionDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[FundDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[FundDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[GeneralStudentProgramAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[GeneralStudentProgramAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Grade_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Grade_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[GradebookEntry_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[GradebookEntry_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[GradingPeriod_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[GradingPeriod_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[GraduationPlan_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[GraduationPlan_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Intervention_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Intervention_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[InterventionPrescription_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[InterventionPrescription_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[InterventionStudy_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[InterventionStudy_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LearningStandard_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LearningStandard_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LearningStandardEquivalenceAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LearningStandardEquivalenceAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalAccount_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalAccount_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalActual_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalActual_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalBudget_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalBudget_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalContractedStaff_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalContractedStaff_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalEncumbrance_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalEncumbrance_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[LocalPayroll_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[LocalPayroll_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Location_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Location_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ObjectDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ObjectDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ObjectiveAssessment_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ObjectiveAssessment_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[OpenStaffPosition_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[OpenStaffPosition_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[OperationalUnitDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[OperationalUnitDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Person_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Person_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[PostSecondaryEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[PostSecondaryEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Program_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Program_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ProgramDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ProgramDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ProgramEvaluation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ProgramEvaluation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ProgramEvaluationElement_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ProgramEvaluationElement_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ProgramEvaluationObjective_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ProgramEvaluationObjective_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ProjectDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ProjectDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[ReportCard_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[ReportCard_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[RestraintEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[RestraintEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SchoolYearType_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SchoolYearType_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
SELECT  NEXT VALUE FOR [edfi].[SchoolYearType_AggSeq];

ALTER SEQUENCE [edfi].[SchoolYearType_AggSeq]
    INCREMENT BY 59;

SELECT  NEXT VALUE FOR [edfi].[SchoolYearType_AggSeq];

ALTER SEQUENCE [edfi].[SchoolYearType_AggSeq]
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Section_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Section_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SectionAttendanceTakenEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SectionAttendanceTakenEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Session_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Session_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SourceDimension_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SourceDimension_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Staff_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Staff_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffAbsenceEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffAbsenceEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffCohortAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffCohortAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffDisciplineIncidentAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffDisciplineIncidentAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffEducationOrganizationAssignmentAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffEducationOrganizationAssignmentAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffEducationOrganizationContactAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffEducationOrganizationContactAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffEducationOrganizationEmploymentAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffEducationOrganizationEmploymentAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffLeave_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffLeave_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffProgramAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffProgramAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffSchoolAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffSchoolAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StaffSectionAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StaffSectionAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Student_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Student_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentAcademicRecord_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentAcademicRecord_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentAssessment_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentAssessment_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentAssessmentEducationOrganizationAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentAssessmentEducationOrganizationAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentAssessmentRegistration_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentAssessmentRegistration_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentCohortAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentCohortAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentCompetencyObjective_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentCompetencyObjective_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentContactAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentContactAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentDisciplineIncidentBehaviorAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentDisciplineIncidentBehaviorAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentDisciplineIncidentNonOffenderAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentDisciplineIncidentNonOffenderAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentEducationOrganizationAssessmentAccommodation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentEducationOrganizationAssessmentAccommodation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentEducationOrganizationAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentEducationOrganizationAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentEducationOrganizationResponsibilityAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentEducationOrganizationResponsibilityAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentGradebookEntry_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentGradebookEntry_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentHealth_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentHealth_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentInterventionAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentInterventionAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentInterventionAttendanceEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentInterventionAttendanceEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentProgramAttendanceEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentProgramAttendanceEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentProgramEvaluation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentProgramEvaluation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentSchoolAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentSchoolAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentSchoolAttendanceEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentSchoolAttendanceEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentSectionAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentSectionAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentSectionAttendanceEvent_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentSectionAttendanceEvent_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentSpecialEducationProgramEligibilityAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentSpecialEducationProgramEligibilityAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[StudentTransportation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[StudentTransportation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[Survey_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[Survey_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyCourseAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyCourseAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyProgramAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyProgramAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyQuestion_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyQuestion_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyQuestionResponse_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyQuestionResponse_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyResponse_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyResponse_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyResponseEducationOrganizationTargetAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyResponseEducationOrganizationTargetAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveyResponseStaffTargetAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveyResponseStaffTargetAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveySection_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveySection_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveySectionAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveySectionAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveySectionResponse_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveySectionResponse_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Sequence [edfi].[SurveySectionResponseStaffTargetAssociation_AggSeq]...';


GO
CREATE SEQUENCE [edfi].[SurveySectionResponseStaffTargetAssociation_AggSeq]
    AS BIGINT
    START WITH -2147483648
    INCREMENT BY 1;


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[AssessmentAdministration]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[AssessmentAdministration_AggSeq]) FOR [AggregateId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[AssessmentAdministrationParticipation]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[AssessmentAdministrationParticipation_AggSeq]) FOR [AggregateId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[AssessmentBatteryPart]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[AssessmentBatteryPart_AggSeq]) FOR [AggregateId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[StudentAssessmentRegistration]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[StudentAssessmentRegistration_AggSeq]) FOR [AggregateId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[StudentAssessmentRegistrationBatteryPartAssociation_AggSeq]) FOR [AggregateId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [edfi].[StudentEducationOrganizationAssessmentAccommodation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    ADD DEFAULT (NEXT VALUE FOR [edfi].[StudentEducationOrganizationAssessmentAccommodation_AggSeq]) FOR [AggregateId];


GO
PRINT N'Starting rebuilding table [edfi].[AcademicWeek]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_AcademicWeek] (
    [SchoolId]               BIGINT           NOT NULL,
    [WeekIdentifier]         NVARCHAR (80)    NOT NULL,
    [BeginDate]              DATE             NOT NULL,
    [EndDate]                DATE             NOT NULL,
    [TotalInstructionalDays] INT              NOT NULL,
    [Discriminator]          NVARCHAR (128)   NULL,
    [CreateDate]             DATETIME2 (7)    CONSTRAINT [AcademicWeek_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]       DATETIME2 (7)    CONSTRAINT [AcademicWeek_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                     UNIQUEIDENTIFIER CONSTRAINT [AcademicWeek_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]            INT              DEFAULT ( NEXT VALUE FOR [edfi].[AcademicWeek_AggSeq]) NOT NULL,
    [AggregateData]          VARBINARY (8000) NULL,
    [ChangeVersion]          BIGINT           CONSTRAINT [AcademicWeek_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_AcademicWeek_PK1] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [WeekIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[AcademicWeek])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_AcademicWeek] ([SchoolId], [WeekIdentifier], [BeginDate], [EndDate], [TotalInstructionalDays], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [SchoolId],
                 [WeekIdentifier],
                 [BeginDate],
                 [EndDate],
                 [TotalInstructionalDays],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[AcademicWeek]
        ORDER BY [SchoolId] ASC, [WeekIdentifier] ASC;
    END

DROP TABLE [edfi].[AcademicWeek];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_AcademicWeek]', N'AcademicWeek';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_AcademicWeek_PK1]', N'AcademicWeek_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[AcademicWeek].[UX_AcademicWeek_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AcademicWeek_Id]
    ON [edfi].[AcademicWeek]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AcademicWeek].[IX_AcademicWeek_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AcademicWeek_SchoolId]
    ON [edfi].[AcademicWeek]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[AcademicWeek].[IX_AcademicWeek_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AcademicWeek_AggregateId]
    ON [edfi].[AcademicWeek]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AcademicWeek].[UX_AcademicWeek_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AcademicWeek_ChangeVersion]
    ON [edfi].[AcademicWeek]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[AccountabilityRating]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_AccountabilityRating] (
    [EducationOrganizationId] BIGINT           NOT NULL,
    [RatingTitle]             NVARCHAR (60)    NOT NULL,
    [SchoolYear]              SMALLINT         NOT NULL,
    [Rating]                  NVARCHAR (35)    NOT NULL,
    [RatingDate]              DATE             NULL,
    [RatingOrganization]      NVARCHAR (35)    NULL,
    [RatingProgram]           NVARCHAR (30)    NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [AccountabilityRating_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [AccountabilityRating_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [AccountabilityRating_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[AccountabilityRating_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [AccountabilityRating_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_AccountabilityRating_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [RatingTitle] ASC, [SchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[AccountabilityRating])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_AccountabilityRating] ([EducationOrganizationId], [RatingTitle], [SchoolYear], [Rating], [RatingDate], [RatingOrganization], [RatingProgram], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [RatingTitle],
                 [SchoolYear],
                 [Rating],
                 [RatingDate],
                 [RatingOrganization],
                 [RatingProgram],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[AccountabilityRating]
        ORDER BY [EducationOrganizationId] ASC, [RatingTitle] ASC, [SchoolYear] ASC;
    END

DROP TABLE [edfi].[AccountabilityRating];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_AccountabilityRating]', N'AccountabilityRating';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_AccountabilityRating_PK1]', N'AccountabilityRating_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[AccountabilityRating].[FK_AccountabilityRating_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_AccountabilityRating_SchoolYearType]
    ON [edfi].[AccountabilityRating]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[AccountabilityRating].[UX_AccountabilityRating_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AccountabilityRating_Id]
    ON [edfi].[AccountabilityRating]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AccountabilityRating].[IX_AccountabilityRating_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AccountabilityRating_EducationOrganizationId]
    ON [edfi].[AccountabilityRating]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[AccountabilityRating].[IX_AccountabilityRating_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AccountabilityRating_AggregateId]
    ON [edfi].[AccountabilityRating]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AccountabilityRating].[UX_AccountabilityRating_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AccountabilityRating_ChangeVersion]
    ON [edfi].[AccountabilityRating]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Assessment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Assessment] (
    [AssessmentIdentifier]           NVARCHAR (60)    NOT NULL,
    [Namespace]                      NVARCHAR (255)   NOT NULL,
    [AdaptiveAssessment]             BIT              NULL,
    [AssessmentCategoryDescriptorId] INT              NULL,
    [AssessmentFamily]               NVARCHAR (60)    NULL,
    [AssessmentForm]                 NVARCHAR (60)    NULL,
    [AssessmentTitle]                NVARCHAR (255)   NOT NULL,
    [AssessmentVersion]              INT              NULL,
    [EducationOrganizationId]        BIGINT           NULL,
    [MaxRawScore]                    DECIMAL (15, 5)  NULL,
    [Nomenclature]                   NVARCHAR (100)   NULL,
    [RevisionDate]                   DATE             NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [Assessment_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [Assessment_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [Assessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[Assessment_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [Assessment_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Assessment_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [Namespace] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Assessment])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Assessment] ([AssessmentIdentifier], [Namespace], [AdaptiveAssessment], [AssessmentCategoryDescriptorId], [AssessmentFamily], [AssessmentForm], [AssessmentTitle], [AssessmentVersion], [EducationOrganizationId], [MaxRawScore], [Nomenclature], [RevisionDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [Namespace],
                 [AdaptiveAssessment],
                 [AssessmentCategoryDescriptorId],
                 [AssessmentFamily],
                 [AssessmentForm],
                 [AssessmentTitle],
                 [AssessmentVersion],
                 [EducationOrganizationId],
                 [MaxRawScore],
                 [Nomenclature],
                 [RevisionDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Assessment]
        ORDER BY [AssessmentIdentifier] ASC, [Namespace] ASC;
    END

DROP TABLE [edfi].[Assessment];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Assessment]', N'Assessment';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Assessment_PK1]', N'Assessment_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Assessment].[FK_Assessment_AssessmentCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Assessment_AssessmentCategoryDescriptor]
    ON [edfi].[Assessment]([AssessmentCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Assessment].[UX_Assessment_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Assessment_Id]
    ON [edfi].[Assessment]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Assessment].[IX_Assessment_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Assessment_EducationOrganizationId]
    ON [edfi].[Assessment]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Assessment].[IX_Assessment_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Assessment_AggregateId]
    ON [edfi].[Assessment]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Assessment].[UX_Assessment_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Assessment_ChangeVersion]
    ON [edfi].[Assessment]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[AssessmentItem]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_AssessmentItem] (
    [AssessmentIdentifier]               NVARCHAR (60)    NOT NULL,
    [IdentificationCode]                 NVARCHAR (60)    NOT NULL,
    [Namespace]                          NVARCHAR (255)   NOT NULL,
    [AssessmentItemCategoryDescriptorId] INT              NULL,
    [AssessmentItemURI]                  NVARCHAR (255)   NULL,
    [ExpectedTimeAssessed]               NVARCHAR (30)    NULL,
    [ItemText]                           NVARCHAR (1024)  NULL,
    [MaxRawScore]                        DECIMAL (15, 5)  NULL,
    [Nomenclature]                       NVARCHAR (100)   NULL,
    [Discriminator]                      NVARCHAR (128)   NULL,
    [CreateDate]                         DATETIME2 (7)    CONSTRAINT [AssessmentItem_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                   DATETIME2 (7)    CONSTRAINT [AssessmentItem_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                 UNIQUEIDENTIFIER CONSTRAINT [AssessmentItem_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                        INT              DEFAULT ( NEXT VALUE FOR [edfi].[AssessmentItem_AggSeq]) NOT NULL,
    [AggregateData]                      VARBINARY (8000) NULL,
    [ChangeVersion]                      BIGINT           CONSTRAINT [AssessmentItem_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_AssessmentItem_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[AssessmentItem])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_AssessmentItem] ([AssessmentIdentifier], [IdentificationCode], [Namespace], [AssessmentItemCategoryDescriptorId], [AssessmentItemURI], [ExpectedTimeAssessed], [ItemText], [MaxRawScore], [Nomenclature], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [IdentificationCode],
                 [Namespace],
                 [AssessmentItemCategoryDescriptorId],
                 [AssessmentItemURI],
                 [ExpectedTimeAssessed],
                 [ItemText],
                 [MaxRawScore],
                 [Nomenclature],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[AssessmentItem]
        ORDER BY [AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC;
    END

DROP TABLE [edfi].[AssessmentItem];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_AssessmentItem]', N'AssessmentItem';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_AssessmentItem_PK1]', N'AssessmentItem_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[AssessmentItem].[FK_AssessmentItem_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentItem_Assessment]
    ON [edfi].[AssessmentItem]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentItem].[FK_AssessmentItem_AssessmentItemCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentItem_AssessmentItemCategoryDescriptor]
    ON [edfi].[AssessmentItem]([AssessmentItemCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentItem].[UX_AssessmentItem_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AssessmentItem_Id]
    ON [edfi].[AssessmentItem]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AssessmentItem].[IX_AssessmentItem_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentItem_AggregateId]
    ON [edfi].[AssessmentItem]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentItem].[UX_AssessmentItem_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AssessmentItem_ChangeVersion]
    ON [edfi].[AssessmentItem]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[AssessmentScoreRangeLearningStandard]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_AssessmentScoreRangeLearningStandard] (
    [AssessmentIdentifier]                  NVARCHAR (60)    NOT NULL,
    [Namespace]                             NVARCHAR (255)   NOT NULL,
    [ScoreRangeId]                          NVARCHAR (60)    NOT NULL,
    [AssessmentReportingMethodDescriptorId] INT              NULL,
    [IdentificationCode]                    NVARCHAR (60)    NULL,
    [MaximumScore]                          NVARCHAR (35)    NOT NULL,
    [MinimumScore]                          NVARCHAR (35)    NOT NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[AssessmentScoreRangeLearningStandard_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [AssessmentScoreRangeLearningStandard_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_AssessmentScoreRangeLearningStandard_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [Namespace] ASC, [ScoreRangeId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[AssessmentScoreRangeLearningStandard])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_AssessmentScoreRangeLearningStandard] ([AssessmentIdentifier], [Namespace], [ScoreRangeId], [AssessmentReportingMethodDescriptorId], [IdentificationCode], [MaximumScore], [MinimumScore], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [Namespace],
                 [ScoreRangeId],
                 [AssessmentReportingMethodDescriptorId],
                 [IdentificationCode],
                 [MaximumScore],
                 [MinimumScore],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[AssessmentScoreRangeLearningStandard]
        ORDER BY [AssessmentIdentifier] ASC, [Namespace] ASC, [ScoreRangeId] ASC;
    END

DROP TABLE [edfi].[AssessmentScoreRangeLearningStandard];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_AssessmentScoreRangeLearningStandard]', N'AssessmentScoreRangeLearningStandard';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_AssessmentScoreRangeLearningStandard_PK1]', N'AssessmentScoreRangeLearningStandard_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[FK_AssessmentScoreRangeLearningStandard_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentScoreRangeLearningStandard_Assessment]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([AssessmentReportingMethodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[UX_AssessmentScoreRangeLearningStandard_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_AssessmentScoreRangeLearningStandard_Id]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[IX_AssessmentScoreRangeLearningStandard_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AssessmentScoreRangeLearningStandard_AggregateId]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[AssessmentScoreRangeLearningStandard].[UX_AssessmentScoreRangeLearningStandard_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_AssessmentScoreRangeLearningStandard_ChangeVersion]
    ON [edfi].[AssessmentScoreRangeLearningStandard]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[BalanceSheetDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_BalanceSheetDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [BalanceSheetDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [BalanceSheetDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [BalanceSheetDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[BalanceSheetDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [BalanceSheetDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_BalanceSheetDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[BalanceSheetDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_BalanceSheetDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[BalanceSheetDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[BalanceSheetDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_BalanceSheetDimension]', N'BalanceSheetDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_BalanceSheetDimension_PK1]', N'BalanceSheetDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[BalanceSheetDimension].[UX_BalanceSheetDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_BalanceSheetDimension_Id]
    ON [edfi].[BalanceSheetDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[BalanceSheetDimension].[IX_BalanceSheetDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BalanceSheetDimension_AggregateId]
    ON [edfi].[BalanceSheetDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[BalanceSheetDimension].[UX_BalanceSheetDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_BalanceSheetDimension_ChangeVersion]
    ON [edfi].[BalanceSheetDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[BellSchedule]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_BellSchedule] (
    [BellScheduleName]       NVARCHAR (60)    NOT NULL,
    [SchoolId]               BIGINT           NOT NULL,
    [AlternateDayName]       NVARCHAR (20)    NULL,
    [EndTime]                TIME (7)         NULL,
    [StartTime]              TIME (7)         NULL,
    [TotalInstructionalTime] INT              NULL,
    [Discriminator]          NVARCHAR (128)   NULL,
    [CreateDate]             DATETIME2 (7)    CONSTRAINT [BellSchedule_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]       DATETIME2 (7)    CONSTRAINT [BellSchedule_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                     UNIQUEIDENTIFIER CONSTRAINT [BellSchedule_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]            INT              DEFAULT ( NEXT VALUE FOR [edfi].[BellSchedule_AggSeq]) NOT NULL,
    [AggregateData]          VARBINARY (8000) NULL,
    [ChangeVersion]          BIGINT           CONSTRAINT [BellSchedule_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_BellSchedule_PK1] PRIMARY KEY CLUSTERED ([BellScheduleName] ASC, [SchoolId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[BellSchedule])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_BellSchedule] ([BellScheduleName], [SchoolId], [AlternateDayName], [EndTime], [StartTime], [TotalInstructionalTime], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BellScheduleName],
                 [SchoolId],
                 [AlternateDayName],
                 [EndTime],
                 [StartTime],
                 [TotalInstructionalTime],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[BellSchedule]
        ORDER BY [BellScheduleName] ASC, [SchoolId] ASC;
    END

DROP TABLE [edfi].[BellSchedule];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_BellSchedule]', N'BellSchedule';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_BellSchedule_PK1]', N'BellSchedule_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[BellSchedule].[UX_BellSchedule_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_BellSchedule_Id]
    ON [edfi].[BellSchedule]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[BellSchedule].[IX_BellSchedule_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BellSchedule_SchoolId]
    ON [edfi].[BellSchedule]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[BellSchedule].[IX_BellSchedule_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BellSchedule_AggregateId]
    ON [edfi].[BellSchedule]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[BellSchedule].[UX_BellSchedule_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_BellSchedule_ChangeVersion]
    ON [edfi].[BellSchedule]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Calendar]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Calendar] (
    [CalendarCode]             NVARCHAR (60)    NOT NULL,
    [SchoolId]                 BIGINT           NOT NULL,
    [SchoolYear]               SMALLINT         NOT NULL,
    [CalendarTypeDescriptorId] INT              NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [Calendar_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [Calendar_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [Calendar_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[Calendar_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [Calendar_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Calendar_PK1] PRIMARY KEY CLUSTERED ([CalendarCode] ASC, [SchoolId] ASC, [SchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Calendar])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Calendar] ([CalendarCode], [SchoolId], [SchoolYear], [CalendarTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CalendarCode],
                 [SchoolId],
                 [SchoolYear],
                 [CalendarTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Calendar]
        ORDER BY [CalendarCode] ASC, [SchoolId] ASC, [SchoolYear] ASC;
    END

DROP TABLE [edfi].[Calendar];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Calendar]', N'Calendar';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Calendar_PK1]', N'Calendar_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Calendar].[FK_Calendar_CalendarTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Calendar_CalendarTypeDescriptor]
    ON [edfi].[Calendar]([CalendarTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Calendar].[FK_Calendar_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_Calendar_SchoolYearType]
    ON [edfi].[Calendar]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[Calendar].[UX_Calendar_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Calendar_Id]
    ON [edfi].[Calendar]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Calendar].[IX_Calendar_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Calendar_SchoolId]
    ON [edfi].[Calendar]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Calendar].[IX_Calendar_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Calendar_AggregateId]
    ON [edfi].[Calendar]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Calendar].[UX_Calendar_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Calendar_ChangeVersion]
    ON [edfi].[Calendar]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CalendarDate]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CalendarDate] (
    [CalendarCode]     NVARCHAR (60)    NOT NULL,
    [Date]             DATE             NOT NULL,
    [SchoolId]         BIGINT           NOT NULL,
    [SchoolYear]       SMALLINT         NOT NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [CalendarDate_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [CalendarDate_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [CalendarDate_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[CalendarDate_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [CalendarDate_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CalendarDate_PK1] PRIMARY KEY CLUSTERED ([CalendarCode] ASC, [Date] ASC, [SchoolId] ASC, [SchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CalendarDate])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CalendarDate] ([CalendarCode], [Date], [SchoolId], [SchoolYear], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CalendarCode],
                 [Date],
                 [SchoolId],
                 [SchoolYear],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CalendarDate]
        ORDER BY [CalendarCode] ASC, [Date] ASC, [SchoolId] ASC, [SchoolYear] ASC;
    END

DROP TABLE [edfi].[CalendarDate];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CalendarDate]', N'CalendarDate';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CalendarDate_PK1]', N'CalendarDate_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CalendarDate].[FK_CalendarDate_Calendar]...';


GO
CREATE NONCLUSTERED INDEX [FK_CalendarDate_Calendar]
    ON [edfi].[CalendarDate]([CalendarCode] ASC, [SchoolId] ASC, [SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[CalendarDate].[UX_CalendarDate_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CalendarDate_Id]
    ON [edfi].[CalendarDate]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CalendarDate].[IX_CalendarDate_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CalendarDate_SchoolId]
    ON [edfi].[CalendarDate]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CalendarDate].[IX_CalendarDate_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CalendarDate_AggregateId]
    ON [edfi].[CalendarDate]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CalendarDate].[UX_CalendarDate_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CalendarDate_ChangeVersion]
    ON [edfi].[CalendarDate]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ChartOfAccount]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ChartOfAccount] (
    [AccountIdentifier]       NVARCHAR (50)    NOT NULL,
    [EducationOrganizationId] BIGINT           NOT NULL,
    [FiscalYear]              INT              NOT NULL,
    [AccountName]             NVARCHAR (100)   NULL,
    [AccountTypeDescriptorId] INT              NOT NULL,
    [BalanceSheetCode]        NVARCHAR (16)    NULL,
    [FunctionCode]            NVARCHAR (16)    NULL,
    [FundCode]                NVARCHAR (16)    NULL,
    [ObjectCode]              NVARCHAR (16)    NULL,
    [OperationalUnitCode]     NVARCHAR (16)    NULL,
    [ProgramCode]             NVARCHAR (16)    NULL,
    [ProjectCode]             NVARCHAR (16)    NULL,
    [SourceCode]              NVARCHAR (16)    NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [ChartOfAccount_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [ChartOfAccount_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [ChartOfAccount_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[ChartOfAccount_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [ChartOfAccount_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ChartOfAccount_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ChartOfAccount])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ChartOfAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear], [AccountName], [AccountTypeDescriptorId], [BalanceSheetCode], [FunctionCode], [FundCode], [ObjectCode], [OperationalUnitCode], [ProgramCode], [ProjectCode], [SourceCode], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [AccountName],
                 [AccountTypeDescriptorId],
                 [BalanceSheetCode],
                 [FunctionCode],
                 [FundCode],
                 [ObjectCode],
                 [OperationalUnitCode],
                 [ProgramCode],
                 [ProjectCode],
                 [SourceCode],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ChartOfAccount]
        ORDER BY [AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[ChartOfAccount];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ChartOfAccount]', N'ChartOfAccount';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ChartOfAccount_PK1]', N'ChartOfAccount_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_AccountTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_AccountTypeDescriptor]
    ON [edfi].[ChartOfAccount]([AccountTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_BalanceSheetDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_BalanceSheetDimension]
    ON [edfi].[ChartOfAccount]([BalanceSheetCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_FunctionDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_FunctionDimension]
    ON [edfi].[ChartOfAccount]([FunctionCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_FundDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_FundDimension]
    ON [edfi].[ChartOfAccount]([FundCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_ObjectDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_ObjectDimension]
    ON [edfi].[ChartOfAccount]([ObjectCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_OperationalUnitDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_OperationalUnitDimension]
    ON [edfi].[ChartOfAccount]([OperationalUnitCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_ProgramDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_ProgramDimension]
    ON [edfi].[ChartOfAccount]([ProgramCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_ProjectDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_ProjectDimension]
    ON [edfi].[ChartOfAccount]([ProjectCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[FK_ChartOfAccount_SourceDimension]...';


GO
CREATE NONCLUSTERED INDEX [FK_ChartOfAccount_SourceDimension]
    ON [edfi].[ChartOfAccount]([SourceCode] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[UX_ChartOfAccount_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ChartOfAccount_Id]
    ON [edfi].[ChartOfAccount]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[IX_ChartOfAccount_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ChartOfAccount_EducationOrganizationId]
    ON [edfi].[ChartOfAccount]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[IX_ChartOfAccount_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ChartOfAccount_AggregateId]
    ON [edfi].[ChartOfAccount]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ChartOfAccount].[UX_ChartOfAccount_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ChartOfAccount_ChangeVersion]
    ON [edfi].[ChartOfAccount]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ClassPeriod]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ClassPeriod] (
    [ClassPeriodName]          NVARCHAR (60)    NOT NULL,
    [SchoolId]                 BIGINT           NOT NULL,
    [OfficialAttendancePeriod] BIT              NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [ClassPeriod_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [ClassPeriod_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [ClassPeriod_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[ClassPeriod_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [ClassPeriod_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ClassPeriod_PK1] PRIMARY KEY CLUSTERED ([ClassPeriodName] ASC, [SchoolId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ClassPeriod])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ClassPeriod] ([ClassPeriodName], [SchoolId], [OfficialAttendancePeriod], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ClassPeriodName],
                 [SchoolId],
                 [OfficialAttendancePeriod],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ClassPeriod]
        ORDER BY [ClassPeriodName] ASC, [SchoolId] ASC;
    END

DROP TABLE [edfi].[ClassPeriod];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ClassPeriod]', N'ClassPeriod';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ClassPeriod_PK1]', N'ClassPeriod_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ClassPeriod].[UX_ClassPeriod_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ClassPeriod_Id]
    ON [edfi].[ClassPeriod]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ClassPeriod].[IX_ClassPeriod_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ClassPeriod_SchoolId]
    ON [edfi].[ClassPeriod]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ClassPeriod].[IX_ClassPeriod_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ClassPeriod_AggregateId]
    ON [edfi].[ClassPeriod]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ClassPeriod].[UX_ClassPeriod_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ClassPeriod_ChangeVersion]
    ON [edfi].[ClassPeriod]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Cohort]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Cohort] (
    [CohortIdentifier]            NVARCHAR (36)    NOT NULL,
    [EducationOrganizationId]     BIGINT           NOT NULL,
    [AcademicSubjectDescriptorId] INT              NULL,
    [CohortDescription]           NVARCHAR (1024)  NULL,
    [CohortScopeDescriptorId]     INT              NULL,
    [CohortTypeDescriptorId]      INT              NOT NULL,
    [Discriminator]               NVARCHAR (128)   NULL,
    [CreateDate]                  DATETIME2 (7)    CONSTRAINT [Cohort_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]            DATETIME2 (7)    CONSTRAINT [Cohort_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                          UNIQUEIDENTIFIER CONSTRAINT [Cohort_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[Cohort_AggSeq]) NOT NULL,
    [AggregateData]               VARBINARY (8000) NULL,
    [ChangeVersion]               BIGINT           CONSTRAINT [Cohort_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Cohort_PK1] PRIMARY KEY CLUSTERED ([CohortIdentifier] ASC, [EducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Cohort])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Cohort] ([CohortIdentifier], [EducationOrganizationId], [AcademicSubjectDescriptorId], [CohortDescription], [CohortScopeDescriptorId], [CohortTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CohortIdentifier],
                 [EducationOrganizationId],
                 [AcademicSubjectDescriptorId],
                 [CohortDescription],
                 [CohortScopeDescriptorId],
                 [CohortTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Cohort]
        ORDER BY [CohortIdentifier] ASC, [EducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[Cohort];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Cohort]', N'Cohort';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Cohort_PK1]', N'Cohort_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Cohort].[FK_Cohort_AcademicSubjectDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Cohort_AcademicSubjectDescriptor]
    ON [edfi].[Cohort]([AcademicSubjectDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Cohort].[FK_Cohort_CohortScopeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Cohort_CohortScopeDescriptor]
    ON [edfi].[Cohort]([CohortScopeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Cohort].[FK_Cohort_CohortTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Cohort_CohortTypeDescriptor]
    ON [edfi].[Cohort]([CohortTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Cohort].[UX_Cohort_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Cohort_Id]
    ON [edfi].[Cohort]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Cohort].[IX_Cohort_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Cohort_EducationOrganizationId]
    ON [edfi].[Cohort]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Cohort].[IX_Cohort_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Cohort_AggregateId]
    ON [edfi].[Cohort]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Cohort].[UX_Cohort_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Cohort_ChangeVersion]
    ON [edfi].[Cohort]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CommunityProviderLicense]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CommunityProviderLicense] (
    [CommunityProviderId]          BIGINT           NOT NULL,
    [LicenseIdentifier]            NVARCHAR (36)    NOT NULL,
    [LicensingOrganization]        NVARCHAR (75)    NOT NULL,
    [AuthorizedFacilityCapacity]   INT              NULL,
    [LicenseEffectiveDate]         DATE             NOT NULL,
    [LicenseExpirationDate]        DATE             NULL,
    [LicenseIssueDate]             DATE             NULL,
    [LicenseStatusDescriptorId]    INT              NULL,
    [LicenseTypeDescriptorId]      INT              NOT NULL,
    [OldestAgeAuthorizedToServe]   INT              NULL,
    [YoungestAgeAuthorizedToServe] INT              NULL,
    [Discriminator]                NVARCHAR (128)   NULL,
    [CreateDate]                   DATETIME2 (7)    CONSTRAINT [CommunityProviderLicense_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]             DATETIME2 (7)    CONSTRAINT [CommunityProviderLicense_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                           UNIQUEIDENTIFIER CONSTRAINT [CommunityProviderLicense_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                  INT              DEFAULT ( NEXT VALUE FOR [edfi].[CommunityProviderLicense_AggSeq]) NOT NULL,
    [AggregateData]                VARBINARY (8000) NULL,
    [ChangeVersion]                BIGINT           CONSTRAINT [CommunityProviderLicense_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CommunityProviderLicense_PK1] PRIMARY KEY CLUSTERED ([CommunityProviderId] ASC, [LicenseIdentifier] ASC, [LicensingOrganization] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CommunityProviderLicense])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CommunityProviderLicense] ([CommunityProviderId], [LicenseIdentifier], [LicensingOrganization], [AuthorizedFacilityCapacity], [LicenseEffectiveDate], [LicenseExpirationDate], [LicenseIssueDate], [LicenseStatusDescriptorId], [LicenseTypeDescriptorId], [OldestAgeAuthorizedToServe], [YoungestAgeAuthorizedToServe], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CommunityProviderId],
                 [LicenseIdentifier],
                 [LicensingOrganization],
                 [AuthorizedFacilityCapacity],
                 [LicenseEffectiveDate],
                 [LicenseExpirationDate],
                 [LicenseIssueDate],
                 [LicenseStatusDescriptorId],
                 [LicenseTypeDescriptorId],
                 [OldestAgeAuthorizedToServe],
                 [YoungestAgeAuthorizedToServe],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CommunityProviderLicense]
        ORDER BY [CommunityProviderId] ASC, [LicenseIdentifier] ASC, [LicensingOrganization] ASC;
    END

DROP TABLE [edfi].[CommunityProviderLicense];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CommunityProviderLicense]', N'CommunityProviderLicense';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CommunityProviderLicense_PK1]', N'CommunityProviderLicense_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[FK_CommunityProviderLicense_LicenseStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CommunityProviderLicense_LicenseStatusDescriptor]
    ON [edfi].[CommunityProviderLicense]([LicenseStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[FK_CommunityProviderLicense_LicenseTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CommunityProviderLicense_LicenseTypeDescriptor]
    ON [edfi].[CommunityProviderLicense]([LicenseTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[UX_CommunityProviderLicense_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CommunityProviderLicense_Id]
    ON [edfi].[CommunityProviderLicense]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[IX_CommunityProviderLicense_CommunityProviderId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CommunityProviderLicense_CommunityProviderId]
    ON [edfi].[CommunityProviderLicense]([CommunityProviderId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[IX_CommunityProviderLicense_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CommunityProviderLicense_AggregateId]
    ON [edfi].[CommunityProviderLicense]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CommunityProviderLicense].[UX_CommunityProviderLicense_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CommunityProviderLicense_ChangeVersion]
    ON [edfi].[CommunityProviderLicense]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CompetencyObjective]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CompetencyObjective] (
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [Objective]                       NVARCHAR (60)    NOT NULL,
    [ObjectiveGradeLevelDescriptorId] INT              NOT NULL,
    [CompetencyObjectiveId]           NVARCHAR (60)    NULL,
    [Description]                     NVARCHAR (1024)  NULL,
    [SuccessCriteria]                 NVARCHAR (150)   NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [CompetencyObjective_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [CompetencyObjective_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [CompetencyObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[CompetencyObjective_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [CompetencyObjective_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CompetencyObjective_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CompetencyObjective])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CompetencyObjective] ([EducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [CompetencyObjectiveId], [Description], [SuccessCriteria], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [Objective],
                 [ObjectiveGradeLevelDescriptorId],
                 [CompetencyObjectiveId],
                 [Description],
                 [SuccessCriteria],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CompetencyObjective]
        ORDER BY [EducationOrganizationId] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC;
    END

DROP TABLE [edfi].[CompetencyObjective];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CompetencyObjective]', N'CompetencyObjective';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CompetencyObjective_PK1]', N'CompetencyObjective_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CompetencyObjective].[FK_CompetencyObjective_GradeLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CompetencyObjective_GradeLevelDescriptor]
    ON [edfi].[CompetencyObjective]([ObjectiveGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CompetencyObjective].[UX_CompetencyObjective_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CompetencyObjective_Id]
    ON [edfi].[CompetencyObjective]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CompetencyObjective].[IX_CompetencyObjective_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CompetencyObjective_EducationOrganizationId]
    ON [edfi].[CompetencyObjective]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CompetencyObjective].[IX_CompetencyObjective_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CompetencyObjective_AggregateId]
    ON [edfi].[CompetencyObjective]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CompetencyObjective].[UX_CompetencyObjective_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CompetencyObjective_ChangeVersion]
    ON [edfi].[CompetencyObjective]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Contact]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Contact] (
    [ContactUSI]                                   INT              IDENTITY (1, 1) NOT NULL,
    [ContactUniqueId]                              NVARCHAR (32)    NOT NULL,
    [FirstName]                                    NVARCHAR (75)    NOT NULL,
    [GenderIdentity]                               NVARCHAR (60)    NULL,
    [GenerationCodeSuffix]                         NVARCHAR (10)    NULL,
    [HighestCompletedLevelOfEducationDescriptorId] INT              NULL,
    [LastSurname]                                  NVARCHAR (75)    NOT NULL,
    [LoginId]                                      NVARCHAR (60)    NULL,
    [MaidenName]                                   NVARCHAR (75)    NULL,
    [MiddleName]                                   NVARCHAR (75)    NULL,
    [PersonalTitlePrefix]                          NVARCHAR (30)    NULL,
    [PersonId]                                     NVARCHAR (32)    NULL,
    [PreferredFirstName]                           NVARCHAR (75)    NULL,
    [PreferredLastSurname]                         NVARCHAR (75)    NULL,
    [SexDescriptorId]                              INT              NULL,
    [SourceSystemDescriptorId]                     INT              NULL,
    [Discriminator]                                NVARCHAR (128)   NULL,
    [CreateDate]                                   DATETIME2 (7)    CONSTRAINT [Contact_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                             DATETIME2 (7)    CONSTRAINT [Contact_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                           UNIQUEIDENTIFIER CONSTRAINT [Contact_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                  INT              DEFAULT ( NEXT VALUE FOR [edfi].[Contact_AggSeq]) NOT NULL,
    [AggregateData]                                VARBINARY (8000) NULL,
    [ChangeVersion]                                BIGINT           CONSTRAINT [Contact_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Contact_PK1] PRIMARY KEY CLUSTERED ([ContactUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Contact])
    BEGIN
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Contact] ON;
        INSERT INTO [edfi].[tmp_ms_xx_Contact] ([ContactUSI], [ContactUniqueId], [FirstName], [GenderIdentity], [GenerationCodeSuffix], [HighestCompletedLevelOfEducationDescriptorId], [LastSurname], [LoginId], [MaidenName], [MiddleName], [PersonalTitlePrefix], [PersonId], [PreferredFirstName], [PreferredLastSurname], [SexDescriptorId], [SourceSystemDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ContactUSI],
                 [ContactUniqueId],
                 [FirstName],
                 [GenderIdentity],
                 [GenerationCodeSuffix],
                 [HighestCompletedLevelOfEducationDescriptorId],
                 [LastSurname],
                 [LoginId],
                 [MaidenName],
                 [MiddleName],
                 [PersonalTitlePrefix],
                 [PersonId],
                 [PreferredFirstName],
                 [PreferredLastSurname],
                 [SexDescriptorId],
                 [SourceSystemDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Contact]
        ORDER BY [ContactUSI] ASC;
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Contact] OFF;
    END

DROP TABLE [edfi].[Contact];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Contact]', N'Contact';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Contact_PK1]', N'Contact_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Contact].[Contact_UI_ContactUniqueId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Contact_UI_ContactUniqueId]
    ON [edfi].[Contact]([ContactUniqueId] ASC)
    INCLUDE([ContactUSI]);


GO
PRINT N'Creating Index [edfi].[Contact].[FK_Contact_LevelOfEducationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Contact_LevelOfEducationDescriptor]
    ON [edfi].[Contact]([HighestCompletedLevelOfEducationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Contact].[FK_Contact_Person]...';


GO
CREATE NONCLUSTERED INDEX [FK_Contact_Person]
    ON [edfi].[Contact]([PersonId] ASC, [SourceSystemDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Contact].[FK_Contact_SexDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Contact_SexDescriptor]
    ON [edfi].[Contact]([SexDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Contact].[UX_Contact_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Contact_Id]
    ON [edfi].[Contact]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Contact].[IX_Contact_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Contact_AggregateId]
    ON [edfi].[Contact]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Contact].[IX_Contact_ContactUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_Contact_ContactUSI]
    ON [edfi].[Contact]([ContactUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Contact].[UX_Contact_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Contact_ChangeVersion]
    ON [edfi].[Contact]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Course]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Course] (
    [CourseCode]                             NVARCHAR (60)    NOT NULL,
    [EducationOrganizationId]                BIGINT           NOT NULL,
    [CareerPathwayDescriptorId]              INT              NULL,
    [CourseDefinedByDescriptorId]            INT              NULL,
    [CourseDescription]                      NVARCHAR (1024)  NULL,
    [CourseGPAApplicabilityDescriptorId]     INT              NULL,
    [CourseTitle]                            NVARCHAR (60)    NOT NULL,
    [DateCourseAdopted]                      DATE             NULL,
    [HighSchoolCourseRequirement]            BIT              NULL,
    [MaxCompletionsForCredit]                INT              NULL,
    [MaximumAvailableCreditConversion]       DECIMAL (9, 2)   NULL,
    [MaximumAvailableCredits]                DECIMAL (9, 3)   NULL,
    [MaximumAvailableCreditTypeDescriptorId] INT              NULL,
    [MinimumAvailableCreditConversion]       DECIMAL (9, 2)   NULL,
    [MinimumAvailableCredits]                DECIMAL (9, 3)   NULL,
    [MinimumAvailableCreditTypeDescriptorId] INT              NULL,
    [NumberOfParts]                          INT              NOT NULL,
    [TimeRequiredForCompletion]              INT              NULL,
    [Discriminator]                          NVARCHAR (128)   NULL,
    [CreateDate]                             DATETIME2 (7)    CONSTRAINT [Course_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                       DATETIME2 (7)    CONSTRAINT [Course_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                     UNIQUEIDENTIFIER CONSTRAINT [Course_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                            INT              DEFAULT ( NEXT VALUE FOR [edfi].[Course_AggSeq]) NOT NULL,
    [AggregateData]                          VARBINARY (8000) NULL,
    [ChangeVersion]                          BIGINT           CONSTRAINT [Course_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Course_PK1] PRIMARY KEY CLUSTERED ([CourseCode] ASC, [EducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Course])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Course] ([CourseCode], [EducationOrganizationId], [CareerPathwayDescriptorId], [CourseDefinedByDescriptorId], [CourseDescription], [CourseGPAApplicabilityDescriptorId], [CourseTitle], [DateCourseAdopted], [HighSchoolCourseRequirement], [MaxCompletionsForCredit], [MaximumAvailableCreditConversion], [MaximumAvailableCredits], [MaximumAvailableCreditTypeDescriptorId], [MinimumAvailableCreditConversion], [MinimumAvailableCredits], [MinimumAvailableCreditTypeDescriptorId], [NumberOfParts], [TimeRequiredForCompletion], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CourseCode],
                 [EducationOrganizationId],
                 [CareerPathwayDescriptorId],
                 [CourseDefinedByDescriptorId],
                 [CourseDescription],
                 [CourseGPAApplicabilityDescriptorId],
                 [CourseTitle],
                 [DateCourseAdopted],
                 [HighSchoolCourseRequirement],
                 [MaxCompletionsForCredit],
                 [MaximumAvailableCreditConversion],
                 [MaximumAvailableCredits],
                 [MaximumAvailableCreditTypeDescriptorId],
                 [MinimumAvailableCreditConversion],
                 [MinimumAvailableCredits],
                 [MinimumAvailableCreditTypeDescriptorId],
                 [NumberOfParts],
                 [TimeRequiredForCompletion],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Course]
        ORDER BY [CourseCode] ASC, [EducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[Course];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Course]', N'Course';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Course_PK1]', N'Course_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Course].[FK_Course_CareerPathwayDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Course_CareerPathwayDescriptor]
    ON [edfi].[Course]([CareerPathwayDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[FK_Course_CourseDefinedByDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Course_CourseDefinedByDescriptor]
    ON [edfi].[Course]([CourseDefinedByDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[FK_Course_CourseGPAApplicabilityDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Course_CourseGPAApplicabilityDescriptor]
    ON [edfi].[Course]([CourseGPAApplicabilityDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[FK_Course_CreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Course_CreditTypeDescriptor]
    ON [edfi].[Course]([MinimumAvailableCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[FK_Course_CreditTypeDescriptor1]...';


GO
CREATE NONCLUSTERED INDEX [FK_Course_CreditTypeDescriptor1]
    ON [edfi].[Course]([MaximumAvailableCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[UX_Course_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Course_Id]
    ON [edfi].[Course]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Course].[IX_Course_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Course_EducationOrganizationId]
    ON [edfi].[Course]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Course].[IX_Course_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Course_AggregateId]
    ON [edfi].[Course]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Course].[UX_Course_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Course_ChangeVersion]
    ON [edfi].[Course]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CourseOffering]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CourseOffering] (
    [LocalCourseCode]          NVARCHAR (60)    NOT NULL,
    [SchoolId]                 BIGINT           NOT NULL,
    [SchoolYear]               SMALLINT         NOT NULL,
    [SessionName]              NVARCHAR (60)    NOT NULL,
    [CourseCode]               NVARCHAR (60)    NOT NULL,
    [EducationOrganizationId]  BIGINT           NOT NULL,
    [InstructionalTimePlanned] INT              NULL,
    [LocalCourseTitle]         NVARCHAR (60)    NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [CourseOffering_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [CourseOffering_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [CourseOffering_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[CourseOffering_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [CourseOffering_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CourseOffering_PK1] PRIMARY KEY CLUSTERED ([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CourseOffering])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName], [CourseCode], [EducationOrganizationId], [InstructionalTimePlanned], [LocalCourseTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SessionName],
                 [CourseCode],
                 [EducationOrganizationId],
                 [InstructionalTimePlanned],
                 [LocalCourseTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CourseOffering]
        ORDER BY [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC;
    END

DROP TABLE [edfi].[CourseOffering];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CourseOffering]', N'CourseOffering';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CourseOffering_PK1]', N'CourseOffering_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CourseOffering].[FK_CourseOffering_Course]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseOffering_Course]
    ON [edfi].[CourseOffering]([CourseCode] ASC, [EducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[FK_CourseOffering_Session]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseOffering_Session]
    ON [edfi].[CourseOffering]([SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[UX_CourseOffering_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CourseOffering_Id]
    ON [edfi].[CourseOffering]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[IX_CourseOffering_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseOffering_SchoolId]
    ON [edfi].[CourseOffering]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[IX_CourseOffering_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseOffering_EducationOrganizationId]
    ON [edfi].[CourseOffering]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[IX_CourseOffering_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseOffering_AggregateId]
    ON [edfi].[CourseOffering]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseOffering].[UX_CourseOffering_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CourseOffering_ChangeVersion]
    ON [edfi].[CourseOffering]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CourseTranscript]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CourseTranscript] (
    [CourseAttemptResultDescriptorId]                INT              NOT NULL,
    [CourseCode]                                     NVARCHAR (60)    NOT NULL,
    [CourseEducationOrganizationId]                  BIGINT           NOT NULL,
    [EducationOrganizationId]                        BIGINT           NOT NULL,
    [SchoolYear]                                     SMALLINT         NOT NULL,
    [StudentUSI]                                     INT              NOT NULL,
    [TermDescriptorId]                               INT              NOT NULL,
    [AlternativeCourseTitle]                         NVARCHAR (60)    NULL,
    [AssigningOrganizationIdentificationCode]        NVARCHAR (60)    NULL,
    [AttemptedCreditConversion]                      DECIMAL (9, 2)   NULL,
    [AttemptedCredits]                               DECIMAL (9, 3)   NULL,
    [AttemptedCreditTypeDescriptorId]                INT              NULL,
    [CourseCatalogURL]                               NVARCHAR (255)   NULL,
    [CourseRepeatCodeDescriptorId]                   INT              NULL,
    [CourseTitle]                                    NVARCHAR (60)    NULL,
    [EarnedCreditConversion]                         DECIMAL (9, 2)   NULL,
    [EarnedCredits]                                  DECIMAL (9, 3)   NULL,
    [EarnedCreditTypeDescriptorId]                   INT              NULL,
    [ExternalEducationOrganizationId]                BIGINT           NULL,
    [ExternalEducationOrganizationNameOfInstitution] NVARCHAR (75)    NULL,
    [FinalLetterGradeEarned]                         NVARCHAR (20)    NULL,
    [FinalNumericGradeEarned]                        DECIMAL (9, 2)   NULL,
    [MethodCreditEarnedDescriptorId]                 INT              NULL,
    [ResponsibleTeacherStaffUSI]                     INT              NULL,
    [WhenTakenGradeLevelDescriptorId]                INT              NULL,
    [Discriminator]                                  NVARCHAR (128)   NULL,
    [CreateDate]                                     DATETIME2 (7)    CONSTRAINT [CourseTranscript_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                               DATETIME2 (7)    CONSTRAINT [CourseTranscript_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                             UNIQUEIDENTIFIER CONSTRAINT [CourseTranscript_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[CourseTranscript_AggSeq]) NOT NULL,
    [AggregateData]                                  VARBINARY (8000) NULL,
    [ChangeVersion]                                  BIGINT           CONSTRAINT [CourseTranscript_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CourseTranscript_PK1] PRIMARY KEY CLUSTERED ([CourseAttemptResultDescriptorId] ASC, [CourseCode] ASC, [CourseEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CourseTranscript])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId], [AlternativeCourseTitle], [AssigningOrganizationIdentificationCode], [AttemptedCreditConversion], [AttemptedCredits], [AttemptedCreditTypeDescriptorId], [CourseCatalogURL], [CourseRepeatCodeDescriptorId], [CourseTitle], [EarnedCreditConversion], [EarnedCredits], [EarnedCreditTypeDescriptorId], [ExternalEducationOrganizationId], [ExternalEducationOrganizationNameOfInstitution], [FinalLetterGradeEarned], [FinalNumericGradeEarned], [MethodCreditEarnedDescriptorId], [ResponsibleTeacherStaffUSI], [WhenTakenGradeLevelDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CourseAttemptResultDescriptorId],
                 [CourseCode],
                 [CourseEducationOrganizationId],
                 [EducationOrganizationId],
                 [SchoolYear],
                 [StudentUSI],
                 [TermDescriptorId],
                 [AlternativeCourseTitle],
                 [AssigningOrganizationIdentificationCode],
                 [AttemptedCreditConversion],
                 [AttemptedCredits],
                 [AttemptedCreditTypeDescriptorId],
                 [CourseCatalogURL],
                 [CourseRepeatCodeDescriptorId],
                 [CourseTitle],
                 [EarnedCreditConversion],
                 [EarnedCredits],
                 [EarnedCreditTypeDescriptorId],
                 [ExternalEducationOrganizationId],
                 [ExternalEducationOrganizationNameOfInstitution],
                 [FinalLetterGradeEarned],
                 [FinalNumericGradeEarned],
                 [MethodCreditEarnedDescriptorId],
                 [ResponsibleTeacherStaffUSI],
                 [WhenTakenGradeLevelDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CourseTranscript]
        ORDER BY [CourseAttemptResultDescriptorId] ASC, [CourseCode] ASC, [CourseEducationOrganizationId] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC;
    END

DROP TABLE [edfi].[CourseTranscript];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CourseTranscript]', N'CourseTranscript';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CourseTranscript_PK1]', N'CourseTranscript_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_Course]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_Course]
    ON [edfi].[CourseTranscript]([CourseCode] ASC, [CourseEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_CourseAttemptResultDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CourseAttemptResultDescriptor]
    ON [edfi].[CourseTranscript]([CourseAttemptResultDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_CourseRepeatCodeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CourseRepeatCodeDescriptor]
    ON [edfi].[CourseTranscript]([CourseRepeatCodeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_CreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CreditTypeDescriptor]
    ON [edfi].[CourseTranscript]([AttemptedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_CreditTypeDescriptor1]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CreditTypeDescriptor1]
    ON [edfi].[CourseTranscript]([EarnedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_EducationOrganization]
    ON [edfi].[CourseTranscript]([ExternalEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_GradeLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_GradeLevelDescriptor]
    ON [edfi].[CourseTranscript]([WhenTakenGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_MethodCreditEarnedDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_MethodCreditEarnedDescriptor]
    ON [edfi].[CourseTranscript]([MethodCreditEarnedDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_Staff]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_Staff]
    ON [edfi].[CourseTranscript]([ResponsibleTeacherStaffUSI] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[FK_CourseTranscript_StudentAcademicRecord]...';


GO
CREATE NONCLUSTERED INDEX [FK_CourseTranscript_StudentAcademicRecord]
    ON [edfi].[CourseTranscript]([EducationOrganizationId] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[UX_CourseTranscript_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CourseTranscript_Id]
    ON [edfi].[CourseTranscript]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[IX_CourseTranscript_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseTranscript_EducationOrganizationId]
    ON [edfi].[CourseTranscript]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[IX_CourseTranscript_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseTranscript_AggregateId]
    ON [edfi].[CourseTranscript]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[IX_CourseTranscript_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseTranscript_StudentUSI]
    ON [edfi].[CourseTranscript]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[IX_CourseTranscript_ResponsibleTeacherStaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseTranscript_ResponsibleTeacherStaffUSI]
    ON [edfi].[CourseTranscript]([ResponsibleTeacherStaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[CourseTranscript].[UX_CourseTranscript_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CourseTranscript_ChangeVersion]
    ON [edfi].[CourseTranscript]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Credential]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Credential] (
    [CredentialIdentifier]                      NVARCHAR (60)    NOT NULL,
    [StateOfIssueStateAbbreviationDescriptorId] INT              NOT NULL,
    [CredentialFieldDescriptorId]               INT              NULL,
    [CredentialTypeDescriptorId]                INT              NOT NULL,
    [EffectiveDate]                             DATE             NULL,
    [ExpirationDate]                            DATE             NULL,
    [IssuanceDate]                              DATE             NOT NULL,
    [Namespace]                                 NVARCHAR (255)   NOT NULL,
    [TeachingCredentialBasisDescriptorId]       INT              NULL,
    [TeachingCredentialDescriptorId]            INT              NULL,
    [Discriminator]                             NVARCHAR (128)   NULL,
    [CreateDate]                                DATETIME2 (7)    CONSTRAINT [Credential_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                          DATETIME2 (7)    CONSTRAINT [Credential_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                        UNIQUEIDENTIFIER CONSTRAINT [Credential_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                               INT              DEFAULT ( NEXT VALUE FOR [edfi].[Credential_AggSeq]) NOT NULL,
    [AggregateData]                             VARBINARY (8000) NULL,
    [ChangeVersion]                             BIGINT           CONSTRAINT [Credential_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Credential_PK1] PRIMARY KEY CLUSTERED ([CredentialIdentifier] ASC, [StateOfIssueStateAbbreviationDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Credential])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId], [CredentialFieldDescriptorId], [CredentialTypeDescriptorId], [EffectiveDate], [ExpirationDate], [IssuanceDate], [Namespace], [TeachingCredentialBasisDescriptorId], [TeachingCredentialDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CredentialIdentifier],
                 [StateOfIssueStateAbbreviationDescriptorId],
                 [CredentialFieldDescriptorId],
                 [CredentialTypeDescriptorId],
                 [EffectiveDate],
                 [ExpirationDate],
                 [IssuanceDate],
                 [Namespace],
                 [TeachingCredentialBasisDescriptorId],
                 [TeachingCredentialDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Credential]
        ORDER BY [CredentialIdentifier] ASC, [StateOfIssueStateAbbreviationDescriptorId] ASC;
    END

DROP TABLE [edfi].[Credential];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Credential]', N'Credential';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Credential_PK1]', N'Credential_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Credential].[FK_Credential_CredentialFieldDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Credential_CredentialFieldDescriptor]
    ON [edfi].[Credential]([CredentialFieldDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[FK_Credential_CredentialTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Credential_CredentialTypeDescriptor]
    ON [edfi].[Credential]([CredentialTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[FK_Credential_StateAbbreviationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Credential_StateAbbreviationDescriptor]
    ON [edfi].[Credential]([StateOfIssueStateAbbreviationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[FK_Credential_TeachingCredentialBasisDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Credential_TeachingCredentialBasisDescriptor]
    ON [edfi].[Credential]([TeachingCredentialBasisDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[FK_Credential_TeachingCredentialDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Credential_TeachingCredentialDescriptor]
    ON [edfi].[Credential]([TeachingCredentialDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[UX_Credential_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Credential_Id]
    ON [edfi].[Credential]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Credential].[IX_Credential_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Credential_AggregateId]
    ON [edfi].[Credential]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Credential].[UX_Credential_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Credential_ChangeVersion]
    ON [edfi].[Credential]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[CrisisEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_CrisisEvent] (
    [CrisisEventName]        NVARCHAR (100)   NOT NULL,
    [CrisisDescription]      NVARCHAR (1024)  NULL,
    [CrisisEndDate]          DATE             NULL,
    [CrisisStartDate]        DATE             NULL,
    [CrisisTypeDescriptorId] INT              NOT NULL,
    [Discriminator]          NVARCHAR (128)   NULL,
    [CreateDate]             DATETIME2 (7)    CONSTRAINT [CrisisEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]       DATETIME2 (7)    CONSTRAINT [CrisisEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                     UNIQUEIDENTIFIER CONSTRAINT [CrisisEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]            INT              DEFAULT ( NEXT VALUE FOR [edfi].[CrisisEvent_AggSeq]) NOT NULL,
    [AggregateData]          VARBINARY (8000) NULL,
    [ChangeVersion]          BIGINT           CONSTRAINT [CrisisEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_CrisisEvent_PK1] PRIMARY KEY CLUSTERED ([CrisisEventName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[CrisisEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_CrisisEvent] ([CrisisEventName], [CrisisDescription], [CrisisEndDate], [CrisisStartDate], [CrisisTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CrisisEventName],
                 [CrisisDescription],
                 [CrisisEndDate],
                 [CrisisStartDate],
                 [CrisisTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[CrisisEvent]
        ORDER BY [CrisisEventName] ASC;
    END

DROP TABLE [edfi].[CrisisEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_CrisisEvent]', N'CrisisEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_CrisisEvent_PK1]', N'CrisisEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[CrisisEvent].[FK_CrisisEvent_CrisisTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_CrisisEvent_CrisisTypeDescriptor]
    ON [edfi].[CrisisEvent]([CrisisTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[CrisisEvent].[UX_CrisisEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_CrisisEvent_Id]
    ON [edfi].[CrisisEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[CrisisEvent].[IX_CrisisEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CrisisEvent_AggregateId]
    ON [edfi].[CrisisEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[CrisisEvent].[UX_CrisisEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_CrisisEvent_ChangeVersion]
    ON [edfi].[CrisisEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Descriptor]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Descriptor] (
    [DescriptorId]       INT              IDENTITY (1, 1) NOT NULL,
    [Namespace]          NVARCHAR (255)   NOT NULL,
    [CodeValue]          NVARCHAR (50)    NOT NULL,
    [ShortDescription]   NVARCHAR (75)    NOT NULL,
    [Description]        NVARCHAR (1024)  NULL,
    [PriorDescriptorId]  INT              NULL,
    [EffectiveBeginDate] DATE             NULL,
    [EffectiveEndDate]   DATE             NULL,
    [Discriminator]      NVARCHAR (128)   NULL,
    [Uri]                AS               (concat([Namespace], '#', [CodeValue])) PERSISTED NOT NULL,
    [CreateDate]         DATETIME2 (7)    CONSTRAINT [Descriptor_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]   DATETIME2 (7)    CONSTRAINT [Descriptor_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                 UNIQUEIDENTIFIER CONSTRAINT [Descriptor_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]        INT              DEFAULT ( NEXT VALUE FOR [edfi].[Descriptor_AggSeq]) NOT NULL,
    [AggregateData]      VARBINARY (8000) NULL,
    [ChangeVersion]      BIGINT           CONSTRAINT [Descriptor_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Descriptor_PK1] PRIMARY KEY CLUSTERED ([DescriptorId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_Descriptor_AK1] UNIQUE NONCLUSTERED ([Namespace] ASC, [CodeValue] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Descriptor])
    BEGIN
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Descriptor] ON;
        INSERT INTO [edfi].[tmp_ms_xx_Descriptor] ([DescriptorId], [Namespace], [CodeValue], [ShortDescription], [Description], [PriorDescriptorId], [EffectiveBeginDate], [EffectiveEndDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [DescriptorId],
                 [Namespace],
                 [CodeValue],
                 [ShortDescription],
                 [Description],
                 [PriorDescriptorId],
                 [EffectiveBeginDate],
                 [EffectiveEndDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Descriptor]
        ORDER BY [DescriptorId] ASC;
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Descriptor] OFF;
    END

DROP TABLE [edfi].[Descriptor];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Descriptor]', N'Descriptor';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Descriptor_PK1]', N'Descriptor_PK', N'OBJECT';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Descriptor_AK1]', N'Descriptor_AK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Descriptor].[UX_Descriptor_Uri]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Descriptor_Uri]
    ON [edfi].[Descriptor]([Uri] ASC)
    INCLUDE([DescriptorId], [Discriminator]);


GO
PRINT N'Creating Index [edfi].[Descriptor].[UX_Descriptor_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Descriptor_Id]
    ON [edfi].[Descriptor]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Descriptor].[IX_Descriptor_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Descriptor_AggregateId]
    ON [edfi].[Descriptor]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Descriptor].[UX_Descriptor_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Descriptor_ChangeVersion]
    ON [edfi].[Descriptor]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[DescriptorMapping]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_DescriptorMapping] (
    [MappedNamespace]  NVARCHAR (255)   NOT NULL,
    [MappedValue]      NVARCHAR (50)    NOT NULL,
    [Namespace]        NVARCHAR (255)   NOT NULL,
    [Value]            NVARCHAR (50)    NOT NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [DescriptorMapping_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [DescriptorMapping_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [DescriptorMapping_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[DescriptorMapping_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [DescriptorMapping_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_DescriptorMapping_PK1] PRIMARY KEY CLUSTERED ([MappedNamespace] ASC, [MappedValue] ASC, [Namespace] ASC, [Value] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[DescriptorMapping])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_DescriptorMapping] ([MappedNamespace], [MappedValue], [Namespace], [Value], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [MappedNamespace],
                 [MappedValue],
                 [Namespace],
                 [Value],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[DescriptorMapping]
        ORDER BY [MappedNamespace] ASC, [MappedValue] ASC, [Namespace] ASC, [Value] ASC;
    END

DROP TABLE [edfi].[DescriptorMapping];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_DescriptorMapping]', N'DescriptorMapping';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_DescriptorMapping_PK1]', N'DescriptorMapping_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[DescriptorMapping].[UX_DescriptorMapping_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_DescriptorMapping_Id]
    ON [edfi].[DescriptorMapping]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[DescriptorMapping].[IX_DescriptorMapping_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DescriptorMapping_AggregateId]
    ON [edfi].[DescriptorMapping]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[DescriptorMapping].[UX_DescriptorMapping_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_DescriptorMapping_ChangeVersion]
    ON [edfi].[DescriptorMapping]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[DisciplineAction]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_DisciplineAction] (
    [DisciplineActionIdentifier]                         NVARCHAR (36)    NOT NULL,
    [DisciplineDate]                                     DATE             NOT NULL,
    [StudentUSI]                                         INT              NOT NULL,
    [ActualDisciplineActionLength]                       DECIMAL (5, 2)   NULL,
    [AssignmentSchoolId]                                 BIGINT           NULL,
    [DisciplineActionLength]                             DECIMAL (5, 2)   NULL,
    [DisciplineActionLengthDifferenceReasonDescriptorId] INT              NULL,
    [IEPPlacementMeetingIndicator]                       BIT              NULL,
    [RelatedToZeroTolerancePolicy]                       BIT              NULL,
    [ResponsibilitySchoolId]                             BIGINT           NOT NULL,
    [Discriminator]                                      NVARCHAR (128)   NULL,
    [CreateDate]                                         DATETIME2 (7)    CONSTRAINT [DisciplineAction_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                   DATETIME2 (7)    CONSTRAINT [DisciplineAction_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                                 UNIQUEIDENTIFIER CONSTRAINT [DisciplineAction_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                        INT              DEFAULT ( NEXT VALUE FOR [edfi].[DisciplineAction_AggSeq]) NOT NULL,
    [AggregateData]                                      VARBINARY (8000) NULL,
    [ChangeVersion]                                      BIGINT           CONSTRAINT [DisciplineAction_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_DisciplineAction_PK1] PRIMARY KEY CLUSTERED ([DisciplineActionIdentifier] ASC, [DisciplineDate] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[DisciplineAction])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_DisciplineAction] ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI], [ActualDisciplineActionLength], [AssignmentSchoolId], [DisciplineActionLength], [DisciplineActionLengthDifferenceReasonDescriptorId], [IEPPlacementMeetingIndicator], [RelatedToZeroTolerancePolicy], [ResponsibilitySchoolId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [DisciplineActionIdentifier],
                 [DisciplineDate],
                 [StudentUSI],
                 [ActualDisciplineActionLength],
                 [AssignmentSchoolId],
                 [DisciplineActionLength],
                 [DisciplineActionLengthDifferenceReasonDescriptorId],
                 [IEPPlacementMeetingIndicator],
                 [RelatedToZeroTolerancePolicy],
                 [ResponsibilitySchoolId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[DisciplineAction]
        ORDER BY [DisciplineActionIdentifier] ASC, [DisciplineDate] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[DisciplineAction];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_DisciplineAction]', N'DisciplineAction';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_DisciplineAction_PK1]', N'DisciplineAction_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor]
    ON [edfi].[DisciplineAction]([DisciplineActionLengthDifferenceReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[FK_DisciplineAction_School]...';


GO
CREATE NONCLUSTERED INDEX [FK_DisciplineAction_School]
    ON [edfi].[DisciplineAction]([AssignmentSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[FK_DisciplineAction_School1]...';


GO
CREATE NONCLUSTERED INDEX [FK_DisciplineAction_School1]
    ON [edfi].[DisciplineAction]([ResponsibilitySchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[UX_DisciplineAction_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_DisciplineAction_Id]
    ON [edfi].[DisciplineAction]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[IX_DisciplineAction_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DisciplineAction_AggregateId]
    ON [edfi].[DisciplineAction]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[IX_DisciplineAction_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_DisciplineAction_StudentUSI]
    ON [edfi].[DisciplineAction]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[DisciplineAction].[UX_DisciplineAction_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_DisciplineAction_ChangeVersion]
    ON [edfi].[DisciplineAction]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[DisciplineIncident]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_DisciplineIncident] (
    [IncidentIdentifier]              NVARCHAR (36)    NOT NULL,
    [SchoolId]                        BIGINT           NOT NULL,
    [CaseNumber]                      NVARCHAR (20)    NULL,
    [IncidentCost]                    MONEY            NULL,
    [IncidentDate]                    DATE             NOT NULL,
    [IncidentDescription]             NVARCHAR (1024)  NULL,
    [IncidentLocationDescriptorId]    INT              NULL,
    [IncidentTime]                    TIME (7)         NULL,
    [ReportedToLawEnforcement]        BIT              NULL,
    [ReporterDescriptionDescriptorId] INT              NULL,
    [ReporterName]                    NVARCHAR (75)    NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [DisciplineIncident_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [DisciplineIncident_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [DisciplineIncident_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[DisciplineIncident_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [DisciplineIncident_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_DisciplineIncident_PK1] PRIMARY KEY CLUSTERED ([IncidentIdentifier] ASC, [SchoolId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[DisciplineIncident])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_DisciplineIncident] ([IncidentIdentifier], [SchoolId], [CaseNumber], [IncidentCost], [IncidentDate], [IncidentDescription], [IncidentLocationDescriptorId], [IncidentTime], [ReportedToLawEnforcement], [ReporterDescriptionDescriptorId], [ReporterName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [IncidentIdentifier],
                 [SchoolId],
                 [CaseNumber],
                 [IncidentCost],
                 [IncidentDate],
                 [IncidentDescription],
                 [IncidentLocationDescriptorId],
                 [IncidentTime],
                 [ReportedToLawEnforcement],
                 [ReporterDescriptionDescriptorId],
                 [ReporterName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[DisciplineIncident]
        ORDER BY [IncidentIdentifier] ASC, [SchoolId] ASC;
    END

DROP TABLE [edfi].[DisciplineIncident];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_DisciplineIncident]', N'DisciplineIncident';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_DisciplineIncident_PK1]', N'DisciplineIncident_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[FK_DisciplineIncident_IncidentLocationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_IncidentLocationDescriptor]
    ON [edfi].[DisciplineIncident]([IncidentLocationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[FK_DisciplineIncident_ReporterDescriptionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_ReporterDescriptionDescriptor]
    ON [edfi].[DisciplineIncident]([ReporterDescriptionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[UX_DisciplineIncident_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_DisciplineIncident_Id]
    ON [edfi].[DisciplineIncident]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[IX_DisciplineIncident_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DisciplineIncident_SchoolId]
    ON [edfi].[DisciplineIncident]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[IX_DisciplineIncident_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_DisciplineIncident_AggregateId]
    ON [edfi].[DisciplineIncident]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[DisciplineIncident].[UX_DisciplineIncident_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_DisciplineIncident_ChangeVersion]
    ON [edfi].[DisciplineIncident]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EducationContent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EducationContent] (
    [ContentIdentifier]              NVARCHAR (225)   NOT NULL,
    [AdditionalAuthorsIndicator]     BIT              NULL,
    [ContentClassDescriptorId]       INT              NULL,
    [Cost]                           MONEY            NULL,
    [CostRateDescriptorId]           INT              NULL,
    [Description]                    NVARCHAR (1024)  NULL,
    [InteractivityStyleDescriptorId] INT              NULL,
    [LearningResourceMetadataURI]    NVARCHAR (255)   NULL,
    [LearningStandardId]             NVARCHAR (60)    NULL,
    [Namespace]                      NVARCHAR (255)   NOT NULL,
    [PublicationDate]                DATE             NULL,
    [PublicationYear]                SMALLINT         NULL,
    [Publisher]                      NVARCHAR (50)    NULL,
    [ShortDescription]               NVARCHAR (75)    NULL,
    [TimeRequired]                   NVARCHAR (30)    NULL,
    [UseRightsURL]                   NVARCHAR (255)   NULL,
    [Version]                        NVARCHAR (10)    NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [EducationContent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [EducationContent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [EducationContent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[EducationContent_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [EducationContent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EducationContent_PK1] PRIMARY KEY CLUSTERED ([ContentIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EducationContent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EducationContent] ([ContentIdentifier], [AdditionalAuthorsIndicator], [ContentClassDescriptorId], [Cost], [CostRateDescriptorId], [Description], [InteractivityStyleDescriptorId], [LearningResourceMetadataURI], [LearningStandardId], [Namespace], [PublicationDate], [PublicationYear], [Publisher], [ShortDescription], [TimeRequired], [UseRightsURL], [Version], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ContentIdentifier],
                 [AdditionalAuthorsIndicator],
                 [ContentClassDescriptorId],
                 [Cost],
                 [CostRateDescriptorId],
                 [Description],
                 [InteractivityStyleDescriptorId],
                 [LearningResourceMetadataURI],
                 [LearningStandardId],
                 [Namespace],
                 [PublicationDate],
                 [PublicationYear],
                 [Publisher],
                 [ShortDescription],
                 [TimeRequired],
                 [UseRightsURL],
                 [Version],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EducationContent]
        ORDER BY [ContentIdentifier] ASC;
    END

DROP TABLE [edfi].[EducationContent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EducationContent]', N'EducationContent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EducationContent_PK1]', N'EducationContent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EducationContent].[FK_EducationContent_ContentClassDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationContent_ContentClassDescriptor]
    ON [edfi].[EducationContent]([ContentClassDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationContent].[FK_EducationContent_CostRateDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationContent_CostRateDescriptor]
    ON [edfi].[EducationContent]([CostRateDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationContent].[FK_EducationContent_InteractivityStyleDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationContent_InteractivityStyleDescriptor]
    ON [edfi].[EducationContent]([InteractivityStyleDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationContent].[FK_EducationContent_LearningStandard]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationContent_LearningStandard]
    ON [edfi].[EducationContent]([LearningStandardId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationContent].[UX_EducationContent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EducationContent_Id]
    ON [edfi].[EducationContent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EducationContent].[IX_EducationContent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationContent_AggregateId]
    ON [edfi].[EducationContent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationContent].[UX_EducationContent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EducationContent_ChangeVersion]
    ON [edfi].[EducationContent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EducationOrganization]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EducationOrganization] (
    [EducationOrganizationId]       BIGINT           NOT NULL,
    [NameOfInstitution]             NVARCHAR (75)    NOT NULL,
    [OperationalStatusDescriptorId] INT              NULL,
    [ShortNameOfInstitution]        NVARCHAR (75)    NULL,
    [WebSite]                       NVARCHAR (255)   NULL,
    [Discriminator]                 NVARCHAR (128)   NULL,
    [CreateDate]                    DATETIME2 (7)    CONSTRAINT [EducationOrganization_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]              DATETIME2 (7)    CONSTRAINT [EducationOrganization_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                            UNIQUEIDENTIFIER CONSTRAINT [EducationOrganization_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                   INT              DEFAULT ( NEXT VALUE FOR [edfi].[EducationOrganization_AggSeq]) NOT NULL,
    [AggregateData]                 VARBINARY (8000) NULL,
    [ChangeVersion]                 BIGINT           CONSTRAINT [EducationOrganization_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EducationOrganization_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EducationOrganization])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EducationOrganization] ([EducationOrganizationId], [NameOfInstitution], [OperationalStatusDescriptorId], [ShortNameOfInstitution], [WebSite], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [NameOfInstitution],
                 [OperationalStatusDescriptorId],
                 [ShortNameOfInstitution],
                 [WebSite],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EducationOrganization]
        ORDER BY [EducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[EducationOrganization];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EducationOrganization]', N'EducationOrganization';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EducationOrganization_PK1]', N'EducationOrganization_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EducationOrganization].[FK_EducationOrganization_OperationalStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationOrganization_OperationalStatusDescriptor]
    ON [edfi].[EducationOrganization]([OperationalStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganization].[UX_EducationOrganization_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EducationOrganization_Id]
    ON [edfi].[EducationOrganization]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EducationOrganization].[IX_EducationOrganization_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganization_EducationOrganizationId]
    ON [edfi].[EducationOrganization]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[EducationOrganization].[IX_EducationOrganization_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganization_AggregateId]
    ON [edfi].[EducationOrganization]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganization].[UX_EducationOrganization_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EducationOrganization_ChangeVersion]
    ON [edfi].[EducationOrganization]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EducationOrganizationInterventionPrescriptionAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EducationOrganizationInterventionPrescriptionAssociation] (
    [EducationOrganizationId]                         BIGINT           NOT NULL,
    [InterventionPrescriptionEducationOrganizationId] BIGINT           NOT NULL,
    [InterventionPrescriptionIdentificationCode]      NVARCHAR (60)    NOT NULL,
    [BeginDate]                                       DATE             NULL,
    [EndDate]                                         DATE             NULL,
    [Discriminator]                                   NVARCHAR (128)   NULL,
    [CreateDate]                                      DATETIME2 (7)    CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                DATETIME2 (7)    CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                              UNIQUEIDENTIFIER CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[EducationOrganizationInterventionPrescriptionAssociation_AggSeq]) NOT NULL,
    [AggregateData]                                   VARBINARY (8000) NULL,
    [ChangeVersion]                                   BIGINT           CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EducationOrganizationInterventionPrescriptionAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [InterventionPrescriptionEducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EducationOrganizationInterventionPrescriptionAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EducationOrganizationInterventionPrescriptionAssociation] ([EducationOrganizationId], [InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode], [BeginDate], [EndDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [InterventionPrescriptionEducationOrganizationId],
                 [InterventionPrescriptionIdentificationCode],
                 [BeginDate],
                 [EndDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EducationOrganizationInterventionPrescriptionAssociation]
        ORDER BY [EducationOrganizationId] ASC, [InterventionPrescriptionEducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC;
    END

DROP TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EducationOrganizationInterventionPrescriptionAssociation]', N'EducationOrganizationInterventionPrescriptionAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EducationOrganizationInterventionPrescriptionAssociation_PK1]', N'EducationOrganizationInterventionPrescriptionAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription]
    ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([InterventionPrescriptionEducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[UX_EducationOrganizationInterventionPrescriptionAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EducationOrganizationInterventionPrescriptionAssociation_Id]
    ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[IX_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganizationId]
    ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[IX_EducationOrganizationInterventionPrescriptionAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationInterventionPrescriptionAssociation_AggregateId]
    ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[UX_EducationOrganizationInterventionPrescriptionAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EducationOrganizationInterventionPrescriptionAssociation_ChangeVersion]
    ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EducationOrganizationNetworkAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EducationOrganizationNetworkAssociation] (
    [EducationOrganizationNetworkId] BIGINT           NOT NULL,
    [MemberEducationOrganizationId]  BIGINT           NOT NULL,
    [BeginDate]                      DATE             NULL,
    [EndDate]                        DATE             NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [EducationOrganizationNetworkAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [EducationOrganizationNetworkAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [EducationOrganizationNetworkAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[EducationOrganizationNetworkAssociation_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [EducationOrganizationNetworkAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EducationOrganizationNetworkAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationNetworkId] ASC, [MemberEducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EducationOrganizationNetworkAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EducationOrganizationNetworkAssociation] ([EducationOrganizationNetworkId], [MemberEducationOrganizationId], [BeginDate], [EndDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationNetworkId],
                 [MemberEducationOrganizationId],
                 [BeginDate],
                 [EndDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EducationOrganizationNetworkAssociation]
        ORDER BY [EducationOrganizationNetworkId] ASC, [MemberEducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[EducationOrganizationNetworkAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EducationOrganizationNetworkAssociation]', N'EducationOrganizationNetworkAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EducationOrganizationNetworkAssociation_PK1]', N'EducationOrganizationNetworkAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EducationOrganizationNetworkAssociation].[FK_EducationOrganizationNetworkAssociation_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationOrganizationNetworkAssociation_EducationOrganization]
    ON [edfi].[EducationOrganizationNetworkAssociation]([MemberEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationNetworkAssociation].[UX_EducationOrganizationNetworkAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EducationOrganizationNetworkAssociation_Id]
    ON [edfi].[EducationOrganizationNetworkAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationNetworkAssociation].[IX_EducationOrganizationNetworkAssociation_EducationOrganizationNetworkId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationNetworkAssociation_EducationOrganizationNetworkId]
    ON [edfi].[EducationOrganizationNetworkAssociation]([EducationOrganizationNetworkId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationNetworkAssociation].[IX_EducationOrganizationNetworkAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationNetworkAssociation_AggregateId]
    ON [edfi].[EducationOrganizationNetworkAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationNetworkAssociation].[UX_EducationOrganizationNetworkAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EducationOrganizationNetworkAssociation_ChangeVersion]
    ON [edfi].[EducationOrganizationNetworkAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EducationOrganizationPeerAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EducationOrganizationPeerAssociation] (
    [EducationOrganizationId]     BIGINT           NOT NULL,
    [PeerEducationOrganizationId] BIGINT           NOT NULL,
    [Discriminator]               NVARCHAR (128)   NULL,
    [CreateDate]                  DATETIME2 (7)    CONSTRAINT [EducationOrganizationPeerAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]            DATETIME2 (7)    CONSTRAINT [EducationOrganizationPeerAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                          UNIQUEIDENTIFIER CONSTRAINT [EducationOrganizationPeerAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[EducationOrganizationPeerAssociation_AggSeq]) NOT NULL,
    [AggregateData]               VARBINARY (8000) NULL,
    [ChangeVersion]               BIGINT           CONSTRAINT [EducationOrganizationPeerAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EducationOrganizationPeerAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [PeerEducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EducationOrganizationPeerAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EducationOrganizationPeerAssociation] ([EducationOrganizationId], [PeerEducationOrganizationId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [PeerEducationOrganizationId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EducationOrganizationPeerAssociation]
        ORDER BY [EducationOrganizationId] ASC, [PeerEducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[EducationOrganizationPeerAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EducationOrganizationPeerAssociation]', N'EducationOrganizationPeerAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EducationOrganizationPeerAssociation_PK1]', N'EducationOrganizationPeerAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EducationOrganizationPeerAssociation].[FK_EducationOrganizationPeerAssociation_EducationOrganization1]...';


GO
CREATE NONCLUSTERED INDEX [FK_EducationOrganizationPeerAssociation_EducationOrganization1]
    ON [edfi].[EducationOrganizationPeerAssociation]([PeerEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationPeerAssociation].[UX_EducationOrganizationPeerAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EducationOrganizationPeerAssociation_Id]
    ON [edfi].[EducationOrganizationPeerAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationPeerAssociation].[IX_EducationOrganizationPeerAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationPeerAssociation_EducationOrganizationId]
    ON [edfi].[EducationOrganizationPeerAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationPeerAssociation].[IX_EducationOrganizationPeerAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EducationOrganizationPeerAssociation_AggregateId]
    ON [edfi].[EducationOrganizationPeerAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EducationOrganizationPeerAssociation].[UX_EducationOrganizationPeerAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EducationOrganizationPeerAssociation_ChangeVersion]
    ON [edfi].[EducationOrganizationPeerAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[EvaluationRubricDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_EvaluationRubricDimension] (
    [EvaluationRubricRating]                  INT              NOT NULL,
    [ProgramEducationOrganizationId]          BIGINT           NOT NULL,
    [ProgramEvaluationElementTitle]           NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationPeriodDescriptorId]     INT              NOT NULL,
    [ProgramEvaluationTitle]                  NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationTypeDescriptorId]       INT              NOT NULL,
    [ProgramName]                             NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]                 INT              NOT NULL,
    [EvaluationCriterionDescription]          NVARCHAR (1024)  NOT NULL,
    [EvaluationRubricRatingLevelDescriptorId] INT              NULL,
    [RubricDimensionSortOrder]                INT              NULL,
    [Discriminator]                           NVARCHAR (128)   NULL,
    [CreateDate]                              DATETIME2 (7)    CONSTRAINT [EvaluationRubricDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                        DATETIME2 (7)    CONSTRAINT [EvaluationRubricDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                      UNIQUEIDENTIFIER CONSTRAINT [EvaluationRubricDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                             INT              DEFAULT ( NEXT VALUE FOR [edfi].[EvaluationRubricDimension_AggSeq]) NOT NULL,
    [AggregateData]                           VARBINARY (8000) NULL,
    [ChangeVersion]                           BIGINT           CONSTRAINT [EvaluationRubricDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_EvaluationRubricDimension_PK1] PRIMARY KEY CLUSTERED ([EvaluationRubricRating] ASC, [ProgramEducationOrganizationId] ASC, [ProgramEvaluationElementTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[EvaluationRubricDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_EvaluationRubricDimension] ([EvaluationRubricRating], [ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [EvaluationCriterionDescription], [EvaluationRubricRatingLevelDescriptorId], [RubricDimensionSortOrder], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EvaluationRubricRating],
                 [ProgramEducationOrganizationId],
                 [ProgramEvaluationElementTitle],
                 [ProgramEvaluationPeriodDescriptorId],
                 [ProgramEvaluationTitle],
                 [ProgramEvaluationTypeDescriptorId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [EvaluationCriterionDescription],
                 [EvaluationRubricRatingLevelDescriptorId],
                 [RubricDimensionSortOrder],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[EvaluationRubricDimension]
        ORDER BY [EvaluationRubricRating] ASC, [ProgramEducationOrganizationId] ASC, [ProgramEvaluationElementTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC;
    END

DROP TABLE [edfi].[EvaluationRubricDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_EvaluationRubricDimension]', N'EvaluationRubricDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_EvaluationRubricDimension_PK1]', N'EvaluationRubricDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[FK_EvaluationRubricDimension_ProgramEvaluationElement]...';


GO
CREATE NONCLUSTERED INDEX [FK_EvaluationRubricDimension_ProgramEvaluationElement]
    ON [edfi].[EvaluationRubricDimension]([ProgramEducationOrganizationId] ASC, [ProgramEvaluationElementTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[FK_EvaluationRubricDimension_RatingLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_EvaluationRubricDimension_RatingLevelDescriptor]
    ON [edfi].[EvaluationRubricDimension]([EvaluationRubricRatingLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[UX_EvaluationRubricDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_EvaluationRubricDimension_Id]
    ON [edfi].[EvaluationRubricDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[IX_EvaluationRubricDimension_ProgramEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EvaluationRubricDimension_ProgramEducationOrganizationId]
    ON [edfi].[EvaluationRubricDimension]([ProgramEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[IX_EvaluationRubricDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_EvaluationRubricDimension_AggregateId]
    ON [edfi].[EvaluationRubricDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[EvaluationRubricDimension].[UX_EvaluationRubricDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_EvaluationRubricDimension_ChangeVersion]
    ON [edfi].[EvaluationRubricDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[FeederSchoolAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_FeederSchoolAssociation] (
    [BeginDate]                     DATE             NOT NULL,
    [FeederSchoolId]                BIGINT           NOT NULL,
    [SchoolId]                      BIGINT           NOT NULL,
    [EndDate]                       DATE             NULL,
    [FeederRelationshipDescription] NVARCHAR (1024)  NULL,
    [Discriminator]                 NVARCHAR (128)   NULL,
    [CreateDate]                    DATETIME2 (7)    CONSTRAINT [FeederSchoolAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]              DATETIME2 (7)    CONSTRAINT [FeederSchoolAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                            UNIQUEIDENTIFIER CONSTRAINT [FeederSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                   INT              DEFAULT ( NEXT VALUE FOR [edfi].[FeederSchoolAssociation_AggSeq]) NOT NULL,
    [AggregateData]                 VARBINARY (8000) NULL,
    [ChangeVersion]                 BIGINT           CONSTRAINT [FeederSchoolAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_FeederSchoolAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [FeederSchoolId] ASC, [SchoolId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[FeederSchoolAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_FeederSchoolAssociation] ([BeginDate], [FeederSchoolId], [SchoolId], [EndDate], [FeederRelationshipDescription], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [FeederSchoolId],
                 [SchoolId],
                 [EndDate],
                 [FeederRelationshipDescription],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[FeederSchoolAssociation]
        ORDER BY [BeginDate] ASC, [FeederSchoolId] ASC, [SchoolId] ASC;
    END

DROP TABLE [edfi].[FeederSchoolAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_FeederSchoolAssociation]', N'FeederSchoolAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_FeederSchoolAssociation_PK1]', N'FeederSchoolAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[FeederSchoolAssociation].[FK_FeederSchoolAssociation_School]...';


GO
CREATE NONCLUSTERED INDEX [FK_FeederSchoolAssociation_School]
    ON [edfi].[FeederSchoolAssociation]([FeederSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[FeederSchoolAssociation].[UX_FeederSchoolAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_FeederSchoolAssociation_Id]
    ON [edfi].[FeederSchoolAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[FeederSchoolAssociation].[IX_FeederSchoolAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_FeederSchoolAssociation_SchoolId]
    ON [edfi].[FeederSchoolAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[FeederSchoolAssociation].[IX_FeederSchoolAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_FeederSchoolAssociation_AggregateId]
    ON [edfi].[FeederSchoolAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[FeederSchoolAssociation].[UX_FeederSchoolAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_FeederSchoolAssociation_ChangeVersion]
    ON [edfi].[FeederSchoolAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[FunctionDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_FunctionDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [FunctionDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [FunctionDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [FunctionDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[FunctionDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [FunctionDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_FunctionDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[FunctionDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_FunctionDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[FunctionDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[FunctionDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_FunctionDimension]', N'FunctionDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_FunctionDimension_PK1]', N'FunctionDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[FunctionDimension].[UX_FunctionDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_FunctionDimension_Id]
    ON [edfi].[FunctionDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[FunctionDimension].[IX_FunctionDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_FunctionDimension_AggregateId]
    ON [edfi].[FunctionDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[FunctionDimension].[UX_FunctionDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_FunctionDimension_ChangeVersion]
    ON [edfi].[FunctionDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[FundDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_FundDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [FundDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [FundDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [FundDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[FundDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [FundDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_FundDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[FundDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_FundDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[FundDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[FundDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_FundDimension]', N'FundDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_FundDimension_PK1]', N'FundDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[FundDimension].[UX_FundDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_FundDimension_Id]
    ON [edfi].[FundDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[FundDimension].[IX_FundDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_FundDimension_AggregateId]
    ON [edfi].[FundDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[FundDimension].[UX_FundDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_FundDimension_ChangeVersion]
    ON [edfi].[FundDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[GeneralStudentProgramAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_GeneralStudentProgramAssociation] (
    [BeginDate]                      DATE             NOT NULL,
    [EducationOrganizationId]        BIGINT           NOT NULL,
    [ProgramEducationOrganizationId] BIGINT           NOT NULL,
    [ProgramName]                    NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]        INT              NOT NULL,
    [StudentUSI]                     INT              NOT NULL,
    [EndDate]                        DATE             NULL,
    [ReasonExitedDescriptorId]       INT              NULL,
    [ServedOutsideOfRegularSession]  BIT              NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [GeneralStudentProgramAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [GeneralStudentProgramAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [GeneralStudentProgramAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[GeneralStudentProgramAssociation_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [GeneralStudentProgramAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_GeneralStudentProgramAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[GeneralStudentProgramAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI], [EndDate], [ReasonExitedDescriptorId], [ServedOutsideOfRegularSession], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [EducationOrganizationId],
                 [ProgramEducationOrganizationId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StudentUSI],
                 [EndDate],
                 [ReasonExitedDescriptorId],
                 [ServedOutsideOfRegularSession],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[GeneralStudentProgramAssociation]
        ORDER BY [BeginDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[GeneralStudentProgramAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_GeneralStudentProgramAssociation]', N'GeneralStudentProgramAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_GeneralStudentProgramAssociation_PK1]', N'GeneralStudentProgramAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[FK_GeneralStudentProgramAssociation_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_GeneralStudentProgramAssociation_Program]
    ON [edfi].[GeneralStudentProgramAssociation]([ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor]
    ON [edfi].[GeneralStudentProgramAssociation]([ReasonExitedDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[UX_GeneralStudentProgramAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_GeneralStudentProgramAssociation_Id]
    ON [edfi].[GeneralStudentProgramAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[IX_GeneralStudentProgramAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GeneralStudentProgramAssociation_EducationOrganizationId]
    ON [edfi].[GeneralStudentProgramAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[IX_GeneralStudentProgramAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GeneralStudentProgramAssociation_AggregateId]
    ON [edfi].[GeneralStudentProgramAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[IX_GeneralStudentProgramAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_GeneralStudentProgramAssociation_StudentUSI]
    ON [edfi].[GeneralStudentProgramAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[GeneralStudentProgramAssociation].[UX_GeneralStudentProgramAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_GeneralStudentProgramAssociation_ChangeVersion]
    ON [edfi].[GeneralStudentProgramAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Grade]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Grade] (
    [BeginDate]                             DATE             NOT NULL,
    [GradeTypeDescriptorId]                 INT              NOT NULL,
    [GradingPeriodDescriptorId]             INT              NOT NULL,
    [GradingPeriodName]                     NVARCHAR (60)    NOT NULL,
    [GradingPeriodSchoolYear]               SMALLINT         NOT NULL,
    [LocalCourseCode]                       NVARCHAR (60)    NOT NULL,
    [SchoolId]                              BIGINT           NOT NULL,
    [SchoolYear]                            SMALLINT         NOT NULL,
    [SectionIdentifier]                     NVARCHAR (255)   NOT NULL,
    [SessionName]                           NVARCHAR (60)    NOT NULL,
    [StudentUSI]                            INT              NOT NULL,
    [CurrentGradeAsOfDate]                  DATE             NULL,
    [CurrentGradeIndicator]                 BIT              NULL,
    [DiagnosticStatement]                   NVARCHAR (1024)  NULL,
    [GradeEarnedDescription]                NVARCHAR (64)    NULL,
    [LetterGradeEarned]                     NVARCHAR (20)    NULL,
    [NumericGradeEarned]                    DECIMAL (9, 2)   NULL,
    [PerformanceBaseConversionDescriptorId] INT              NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [Grade_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [Grade_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [Grade_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[Grade_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [Grade_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Grade_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [GradeTypeDescriptorId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolYear] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Grade])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Grade] ([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolYear], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI], [CurrentGradeAsOfDate], [CurrentGradeIndicator], [DiagnosticStatement], [GradeEarnedDescription], [LetterGradeEarned], [NumericGradeEarned], [PerformanceBaseConversionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [GradeTypeDescriptorId],
                 [GradingPeriodDescriptorId],
                 [GradingPeriodName],
                 [GradingPeriodSchoolYear],
                 [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [StudentUSI],
                 [CurrentGradeAsOfDate],
                 [CurrentGradeIndicator],
                 [DiagnosticStatement],
                 [GradeEarnedDescription],
                 [LetterGradeEarned],
                 [NumericGradeEarned],
                 [PerformanceBaseConversionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Grade]
        ORDER BY [BeginDate] ASC, [GradeTypeDescriptorId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolYear] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[Grade];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Grade]', N'Grade';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Grade_PK1]', N'Grade_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Grade].[FK_Grade_GradeTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Grade_GradeTypeDescriptor]
    ON [edfi].[Grade]([GradeTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Grade].[FK_Grade_GradingPeriod]...';


GO
CREATE NONCLUSTERED INDEX [FK_Grade_GradingPeriod]
    ON [edfi].[Grade]([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [SchoolId] ASC, [GradingPeriodSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[Grade].[FK_Grade_PerformanceBaseConversionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Grade_PerformanceBaseConversionDescriptor]
    ON [edfi].[Grade]([PerformanceBaseConversionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Grade].[FK_Grade_StudentSectionAssociation]...';


GO
CREATE NONCLUSTERED INDEX [FK_Grade_StudentSectionAssociation]
    ON [edfi].[Grade]([BeginDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[Grade].[UX_Grade_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Grade_Id]
    ON [edfi].[Grade]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Grade].[IX_Grade_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Grade_SchoolId]
    ON [edfi].[Grade]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Grade].[IX_Grade_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Grade_AggregateId]
    ON [edfi].[Grade]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Grade].[IX_Grade_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_Grade_StudentUSI]
    ON [edfi].[Grade]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Grade].[UX_Grade_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Grade_ChangeVersion]
    ON [edfi].[Grade]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[GradebookEntry]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_GradebookEntry] (
    [GradebookEntryIdentifier]       NVARCHAR (60)    NOT NULL,
    [Namespace]                      NVARCHAR (255)   NOT NULL,
    [DateAssigned]                   DATE             NOT NULL,
    [Description]                    NVARCHAR (1024)  NULL,
    [DueDate]                        DATE             NULL,
    [DueTime]                        TIME (7)         NULL,
    [GradebookEntryTypeDescriptorId] INT              NULL,
    [GradingPeriodDescriptorId]      INT              NULL,
    [GradingPeriodName]              NVARCHAR (60)    NULL,
    [LocalCourseCode]                NVARCHAR (60)    NULL,
    [MaxPoints]                      DECIMAL (9, 2)   NULL,
    [SchoolId]                       BIGINT           NULL,
    [SchoolYear]                     SMALLINT         NULL,
    [SectionIdentifier]              NVARCHAR (255)   NULL,
    [SessionName]                    NVARCHAR (60)    NULL,
    [SourceSectionIdentifier]        NVARCHAR (255)   NOT NULL,
    [Title]                          NVARCHAR (100)   NOT NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [GradebookEntry_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [GradebookEntry_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [GradebookEntry_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[GradebookEntry_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [GradebookEntry_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_GradebookEntry_PK1] PRIMARY KEY CLUSTERED ([GradebookEntryIdentifier] ASC, [Namespace] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[GradebookEntry])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_GradebookEntry] ([GradebookEntryIdentifier], [Namespace], [DateAssigned], [Description], [DueDate], [DueTime], [GradebookEntryTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [LocalCourseCode], [MaxPoints], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [SourceSectionIdentifier], [Title], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [GradebookEntryIdentifier],
                 [Namespace],
                 [DateAssigned],
                 [Description],
                 [DueDate],
                 [DueTime],
                 [GradebookEntryTypeDescriptorId],
                 [GradingPeriodDescriptorId],
                 [GradingPeriodName],
                 [LocalCourseCode],
                 [MaxPoints],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [SourceSectionIdentifier],
                 [Title],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[GradebookEntry]
        ORDER BY [GradebookEntryIdentifier] ASC, [Namespace] ASC;
    END

DROP TABLE [edfi].[GradebookEntry];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_GradebookEntry]', N'GradebookEntry';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_GradebookEntry_PK1]', N'GradebookEntry_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[FK_GradebookEntry_GradebookEntryTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_GradebookEntry_GradebookEntryTypeDescriptor]
    ON [edfi].[GradebookEntry]([GradebookEntryTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[FK_GradebookEntry_GradingPeriod]...';


GO
CREATE NONCLUSTERED INDEX [FK_GradebookEntry_GradingPeriod]
    ON [edfi].[GradebookEntry]([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [SchoolId] ASC, [SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[FK_GradebookEntry_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_GradebookEntry_Section]
    ON [edfi].[GradebookEntry]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[UX_GradebookEntry_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_GradebookEntry_Id]
    ON [edfi].[GradebookEntry]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[IX_GradebookEntry_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GradebookEntry_SchoolId]
    ON [edfi].[GradebookEntry]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[IX_GradebookEntry_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GradebookEntry_AggregateId]
    ON [edfi].[GradebookEntry]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[GradebookEntry].[UX_GradebookEntry_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_GradebookEntry_ChangeVersion]
    ON [edfi].[GradebookEntry]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[GradingPeriod]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_GradingPeriod] (
    [GradingPeriodDescriptorId] INT              NOT NULL,
    [GradingPeriodName]         NVARCHAR (60)    NOT NULL,
    [SchoolId]                  BIGINT           NOT NULL,
    [SchoolYear]                SMALLINT         NOT NULL,
    [BeginDate]                 DATE             NOT NULL,
    [EndDate]                   DATE             NOT NULL,
    [PeriodSequence]            INT              NULL,
    [TotalInstructionalDays]    INT              NOT NULL,
    [Discriminator]             NVARCHAR (128)   NULL,
    [CreateDate]                DATETIME2 (7)    CONSTRAINT [GradingPeriod_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]          DATETIME2 (7)    CONSTRAINT [GradingPeriod_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                        UNIQUEIDENTIFIER CONSTRAINT [GradingPeriod_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]               INT              DEFAULT ( NEXT VALUE FOR [edfi].[GradingPeriod_AggSeq]) NOT NULL,
    [AggregateData]             VARBINARY (8000) NULL,
    [ChangeVersion]             BIGINT           CONSTRAINT [GradingPeriod_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_GradingPeriod_PK1] PRIMARY KEY CLUSTERED ([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [SchoolId] ASC, [SchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[GradingPeriod])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear], [BeginDate], [EndDate], [PeriodSequence], [TotalInstructionalDays], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [GradingPeriodDescriptorId],
                 [GradingPeriodName],
                 [SchoolId],
                 [SchoolYear],
                 [BeginDate],
                 [EndDate],
                 [PeriodSequence],
                 [TotalInstructionalDays],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[GradingPeriod]
        ORDER BY [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [SchoolId] ASC, [SchoolYear] ASC;
    END

DROP TABLE [edfi].[GradingPeriod];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_GradingPeriod]', N'GradingPeriod';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_GradingPeriod_PK1]', N'GradingPeriod_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[FK_GradingPeriod_GradingPeriodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_GradingPeriod_GradingPeriodDescriptor]
    ON [edfi].[GradingPeriod]([GradingPeriodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[FK_GradingPeriod_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_GradingPeriod_SchoolYearType]
    ON [edfi].[GradingPeriod]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[UX_GradingPeriod_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_GradingPeriod_Id]
    ON [edfi].[GradingPeriod]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[IX_GradingPeriod_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GradingPeriod_SchoolId]
    ON [edfi].[GradingPeriod]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[IX_GradingPeriod_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GradingPeriod_AggregateId]
    ON [edfi].[GradingPeriod]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[GradingPeriod].[UX_GradingPeriod_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_GradingPeriod_ChangeVersion]
    ON [edfi].[GradingPeriod]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[GraduationPlan]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_GraduationPlan] (
    [EducationOrganizationId]             BIGINT           NOT NULL,
    [GraduationPlanTypeDescriptorId]      INT              NOT NULL,
    [GraduationSchoolYear]                SMALLINT         NOT NULL,
    [IndividualPlan]                      BIT              NULL,
    [TotalRequiredCreditConversion]       DECIMAL (9, 2)   NULL,
    [TotalRequiredCredits]                DECIMAL (9, 3)   NOT NULL,
    [TotalRequiredCreditTypeDescriptorId] INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [GraduationPlan_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [GraduationPlan_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [GraduationPlan_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[GraduationPlan_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [GraduationPlan_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_GraduationPlan_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[GraduationPlan])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [IndividualPlan], [TotalRequiredCreditConversion], [TotalRequiredCredits], [TotalRequiredCreditTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [GraduationPlanTypeDescriptorId],
                 [GraduationSchoolYear],
                 [IndividualPlan],
                 [TotalRequiredCreditConversion],
                 [TotalRequiredCredits],
                 [TotalRequiredCreditTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[GraduationPlan]
        ORDER BY [EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC;
    END

DROP TABLE [edfi].[GraduationPlan];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_GraduationPlan]', N'GraduationPlan';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_GraduationPlan_PK1]', N'GraduationPlan_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[FK_GraduationPlan_CreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_GraduationPlan_CreditTypeDescriptor]
    ON [edfi].[GraduationPlan]([TotalRequiredCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[FK_GraduationPlan_GraduationPlanTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_GraduationPlan_GraduationPlanTypeDescriptor]
    ON [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[FK_GraduationPlan_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_GraduationPlan_SchoolYearType]
    ON [edfi].[GraduationPlan]([GraduationSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[UX_GraduationPlan_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_GraduationPlan_Id]
    ON [edfi].[GraduationPlan]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[IX_GraduationPlan_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GraduationPlan_EducationOrganizationId]
    ON [edfi].[GraduationPlan]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[IX_GraduationPlan_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_GraduationPlan_AggregateId]
    ON [edfi].[GraduationPlan]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[GraduationPlan].[UX_GraduationPlan_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_GraduationPlan_ChangeVersion]
    ON [edfi].[GraduationPlan]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Intervention]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Intervention] (
    [EducationOrganizationId]        BIGINT           NOT NULL,
    [InterventionIdentificationCode] NVARCHAR (60)    NOT NULL,
    [BeginDate]                      DATE             NOT NULL,
    [DeliveryMethodDescriptorId]     INT              NOT NULL,
    [EndDate]                        DATE             NULL,
    [InterventionClassDescriptorId]  INT              NOT NULL,
    [MaxDosage]                      INT              NULL,
    [MinDosage]                      INT              NULL,
    [Namespace]                      NVARCHAR (255)   NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [Intervention_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [Intervention_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [Intervention_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[Intervention_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [Intervention_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Intervention_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Intervention])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Intervention] ([EducationOrganizationId], [InterventionIdentificationCode], [BeginDate], [DeliveryMethodDescriptorId], [EndDate], [InterventionClassDescriptorId], [MaxDosage], [MinDosage], [Namespace], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [InterventionIdentificationCode],
                 [BeginDate],
                 [DeliveryMethodDescriptorId],
                 [EndDate],
                 [InterventionClassDescriptorId],
                 [MaxDosage],
                 [MinDosage],
                 [Namespace],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Intervention]
        ORDER BY [EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC;
    END

DROP TABLE [edfi].[Intervention];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Intervention]', N'Intervention';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Intervention_PK1]', N'Intervention_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Intervention].[FK_Intervention_DeliveryMethodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Intervention_DeliveryMethodDescriptor]
    ON [edfi].[Intervention]([DeliveryMethodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Intervention].[FK_Intervention_InterventionClassDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Intervention_InterventionClassDescriptor]
    ON [edfi].[Intervention]([InterventionClassDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Intervention].[UX_Intervention_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Intervention_Id]
    ON [edfi].[Intervention]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Intervention].[IX_Intervention_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Intervention_EducationOrganizationId]
    ON [edfi].[Intervention]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Intervention].[IX_Intervention_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Intervention_AggregateId]
    ON [edfi].[Intervention]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Intervention].[UX_Intervention_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Intervention_ChangeVersion]
    ON [edfi].[Intervention]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[InterventionPrescription]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_InterventionPrescription] (
    [EducationOrganizationId]                    BIGINT           NOT NULL,
    [InterventionPrescriptionIdentificationCode] NVARCHAR (60)    NOT NULL,
    [DeliveryMethodDescriptorId]                 INT              NOT NULL,
    [InterventionClassDescriptorId]              INT              NOT NULL,
    [MaxDosage]                                  INT              NULL,
    [MinDosage]                                  INT              NULL,
    [Namespace]                                  NVARCHAR (255)   NULL,
    [Discriminator]                              NVARCHAR (128)   NULL,
    [CreateDate]                                 DATETIME2 (7)    CONSTRAINT [InterventionPrescription_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                           DATETIME2 (7)    CONSTRAINT [InterventionPrescription_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                         UNIQUEIDENTIFIER CONSTRAINT [InterventionPrescription_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                INT              DEFAULT ( NEXT VALUE FOR [edfi].[InterventionPrescription_AggSeq]) NOT NULL,
    [AggregateData]                              VARBINARY (8000) NULL,
    [ChangeVersion]                              BIGINT           CONSTRAINT [InterventionPrescription_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_InterventionPrescription_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[InterventionPrescription])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode], [DeliveryMethodDescriptorId], [InterventionClassDescriptorId], [MaxDosage], [MinDosage], [Namespace], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [InterventionPrescriptionIdentificationCode],
                 [DeliveryMethodDescriptorId],
                 [InterventionClassDescriptorId],
                 [MaxDosage],
                 [MinDosage],
                 [Namespace],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[InterventionPrescription]
        ORDER BY [EducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC;
    END

DROP TABLE [edfi].[InterventionPrescription];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_InterventionPrescription]', N'InterventionPrescription';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_InterventionPrescription_PK1]', N'InterventionPrescription_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[FK_InterventionPrescription_DeliveryMethodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_InterventionPrescription_DeliveryMethodDescriptor]
    ON [edfi].[InterventionPrescription]([DeliveryMethodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[FK_InterventionPrescription_InterventionClassDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_InterventionPrescription_InterventionClassDescriptor]
    ON [edfi].[InterventionPrescription]([InterventionClassDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[UX_InterventionPrescription_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_InterventionPrescription_Id]
    ON [edfi].[InterventionPrescription]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[IX_InterventionPrescription_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_InterventionPrescription_EducationOrganizationId]
    ON [edfi].[InterventionPrescription]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[IX_InterventionPrescription_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_InterventionPrescription_AggregateId]
    ON [edfi].[InterventionPrescription]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionPrescription].[UX_InterventionPrescription_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_InterventionPrescription_ChangeVersion]
    ON [edfi].[InterventionPrescription]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[InterventionStudy]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_InterventionStudy] (
    [EducationOrganizationId]                         BIGINT           NOT NULL,
    [InterventionStudyIdentificationCode]             NVARCHAR (60)    NOT NULL,
    [DeliveryMethodDescriptorId]                      INT              NOT NULL,
    [InterventionClassDescriptorId]                   INT              NOT NULL,
    [InterventionPrescriptionEducationOrganizationId] BIGINT           NOT NULL,
    [InterventionPrescriptionIdentificationCode]      NVARCHAR (60)    NOT NULL,
    [Participants]                                    INT              NOT NULL,
    [Discriminator]                                   NVARCHAR (128)   NULL,
    [CreateDate]                                      DATETIME2 (7)    CONSTRAINT [InterventionStudy_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                DATETIME2 (7)    CONSTRAINT [InterventionStudy_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                              UNIQUEIDENTIFIER CONSTRAINT [InterventionStudy_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[InterventionStudy_AggSeq]) NOT NULL,
    [AggregateData]                                   VARBINARY (8000) NULL,
    [ChangeVersion]                                   BIGINT           CONSTRAINT [InterventionStudy_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_InterventionStudy_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [InterventionStudyIdentificationCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[InterventionStudy])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode], [DeliveryMethodDescriptorId], [InterventionClassDescriptorId], [InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode], [Participants], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [InterventionStudyIdentificationCode],
                 [DeliveryMethodDescriptorId],
                 [InterventionClassDescriptorId],
                 [InterventionPrescriptionEducationOrganizationId],
                 [InterventionPrescriptionIdentificationCode],
                 [Participants],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[InterventionStudy]
        ORDER BY [EducationOrganizationId] ASC, [InterventionStudyIdentificationCode] ASC;
    END

DROP TABLE [edfi].[InterventionStudy];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_InterventionStudy]', N'InterventionStudy';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_InterventionStudy_PK1]', N'InterventionStudy_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[FK_InterventionStudy_DeliveryMethodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_InterventionStudy_DeliveryMethodDescriptor]
    ON [edfi].[InterventionStudy]([DeliveryMethodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[FK_InterventionStudy_InterventionClassDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_InterventionStudy_InterventionClassDescriptor]
    ON [edfi].[InterventionStudy]([InterventionClassDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[FK_InterventionStudy_InterventionPrescription]...';


GO
CREATE NONCLUSTERED INDEX [FK_InterventionStudy_InterventionPrescription]
    ON [edfi].[InterventionStudy]([InterventionPrescriptionEducationOrganizationId] ASC, [InterventionPrescriptionIdentificationCode] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[UX_InterventionStudy_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_InterventionStudy_Id]
    ON [edfi].[InterventionStudy]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[IX_InterventionStudy_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_InterventionStudy_EducationOrganizationId]
    ON [edfi].[InterventionStudy]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[IX_InterventionStudy_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_InterventionStudy_AggregateId]
    ON [edfi].[InterventionStudy]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[InterventionStudy].[UX_InterventionStudy_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_InterventionStudy_ChangeVersion]
    ON [edfi].[InterventionStudy]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LearningStandard]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LearningStandard] (
    [LearningStandardId]                   NVARCHAR (60)    NOT NULL,
    [CourseTitle]                          NVARCHAR (60)    NULL,
    [Description]                          NVARCHAR (1024)  NOT NULL,
    [LearningStandardCategoryDescriptorId] INT              NULL,
    [LearningStandardItemCode]             NVARCHAR (60)    NULL,
    [LearningStandardScopeDescriptorId]    INT              NULL,
    [Namespace]                            NVARCHAR (255)   NOT NULL,
    [ParentLearningStandardId]             NVARCHAR (60)    NULL,
    [SuccessCriteria]                      NVARCHAR (150)   NULL,
    [URI]                                  NVARCHAR (255)   NULL,
    [Discriminator]                        NVARCHAR (128)   NULL,
    [CreateDate]                           DATETIME2 (7)    CONSTRAINT [LearningStandard_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                     DATETIME2 (7)    CONSTRAINT [LearningStandard_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                   UNIQUEIDENTIFIER CONSTRAINT [LearningStandard_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                          INT              DEFAULT ( NEXT VALUE FOR [edfi].[LearningStandard_AggSeq]) NOT NULL,
    [AggregateData]                        VARBINARY (8000) NULL,
    [ChangeVersion]                        BIGINT           CONSTRAINT [LearningStandard_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LearningStandard_PK1] PRIMARY KEY CLUSTERED ([LearningStandardId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LearningStandard])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LearningStandard] ([LearningStandardId], [CourseTitle], [Description], [LearningStandardCategoryDescriptorId], [LearningStandardItemCode], [LearningStandardScopeDescriptorId], [Namespace], [ParentLearningStandardId], [SuccessCriteria], [URI], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [LearningStandardId],
                 [CourseTitle],
                 [Description],
                 [LearningStandardCategoryDescriptorId],
                 [LearningStandardItemCode],
                 [LearningStandardScopeDescriptorId],
                 [Namespace],
                 [ParentLearningStandardId],
                 [SuccessCriteria],
                 [URI],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LearningStandard]
        ORDER BY [LearningStandardId] ASC;
    END

DROP TABLE [edfi].[LearningStandard];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LearningStandard]', N'LearningStandard';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LearningStandard_PK1]', N'LearningStandard_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LearningStandard].[FK_LearningStandard_LearningStandard]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandard_LearningStandard]
    ON [edfi].[LearningStandard]([ParentLearningStandardId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandard].[FK_LearningStandard_LearningStandardCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandard_LearningStandardCategoryDescriptor]
    ON [edfi].[LearningStandard]([LearningStandardCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandard].[FK_LearningStandard_LearningStandardScopeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandard_LearningStandardScopeDescriptor]
    ON [edfi].[LearningStandard]([LearningStandardScopeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandard].[UX_LearningStandard_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LearningStandard_Id]
    ON [edfi].[LearningStandard]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LearningStandard].[IX_LearningStandard_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LearningStandard_AggregateId]
    ON [edfi].[LearningStandard]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandard].[UX_LearningStandard_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LearningStandard_ChangeVersion]
    ON [edfi].[LearningStandard]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LearningStandardEquivalenceAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LearningStandardEquivalenceAssociation] (
    [Namespace]                                       NVARCHAR (255)   NOT NULL,
    [SourceLearningStandardId]                        NVARCHAR (60)    NOT NULL,
    [TargetLearningStandardId]                        NVARCHAR (60)    NOT NULL,
    [EffectiveDate]                                   DATE             NULL,
    [LearningStandardEquivalenceStrengthDescription]  NVARCHAR (255)   NULL,
    [LearningStandardEquivalenceStrengthDescriptorId] INT              NULL,
    [Discriminator]                                   NVARCHAR (128)   NULL,
    [CreateDate]                                      DATETIME2 (7)    CONSTRAINT [LearningStandardEquivalenceAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                DATETIME2 (7)    CONSTRAINT [LearningStandardEquivalenceAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                              UNIQUEIDENTIFIER CONSTRAINT [LearningStandardEquivalenceAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LearningStandardEquivalenceAssociation_AggSeq]) NOT NULL,
    [AggregateData]                                   VARBINARY (8000) NULL,
    [ChangeVersion]                                   BIGINT           CONSTRAINT [LearningStandardEquivalenceAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LearningStandardEquivalenceAssociation_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [SourceLearningStandardId] ASC, [TargetLearningStandardId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LearningStandardEquivalenceAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LearningStandardEquivalenceAssociation] ([Namespace], [SourceLearningStandardId], [TargetLearningStandardId], [EffectiveDate], [LearningStandardEquivalenceStrengthDescription], [LearningStandardEquivalenceStrengthDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [SourceLearningStandardId],
                 [TargetLearningStandardId],
                 [EffectiveDate],
                 [LearningStandardEquivalenceStrengthDescription],
                 [LearningStandardEquivalenceStrengthDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LearningStandardEquivalenceAssociation]
        ORDER BY [Namespace] ASC, [SourceLearningStandardId] ASC, [TargetLearningStandardId] ASC;
    END

DROP TABLE [edfi].[LearningStandardEquivalenceAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LearningStandardEquivalenceAssociation]', N'LearningStandardEquivalenceAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LearningStandardEquivalenceAssociation_PK1]', N'LearningStandardEquivalenceAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[FK_LearningStandardEquivalenceAssociation_LearningStandard]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandardEquivalenceAssociation_LearningStandard]
    ON [edfi].[LearningStandardEquivalenceAssociation]([SourceLearningStandardId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[FK_LearningStandardEquivalenceAssociation_LearningStandard1]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandardEquivalenceAssociation_LearningStandard1]
    ON [edfi].[LearningStandardEquivalenceAssociation]([TargetLearningStandardId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor]
    ON [edfi].[LearningStandardEquivalenceAssociation]([LearningStandardEquivalenceStrengthDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[UX_LearningStandardEquivalenceAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LearningStandardEquivalenceAssociation_Id]
    ON [edfi].[LearningStandardEquivalenceAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[IX_LearningStandardEquivalenceAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LearningStandardEquivalenceAssociation_AggregateId]
    ON [edfi].[LearningStandardEquivalenceAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LearningStandardEquivalenceAssociation].[UX_LearningStandardEquivalenceAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LearningStandardEquivalenceAssociation_ChangeVersion]
    ON [edfi].[LearningStandardEquivalenceAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalAccount]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalAccount] (
    [AccountIdentifier]                     NVARCHAR (50)    NOT NULL,
    [EducationOrganizationId]               BIGINT           NOT NULL,
    [FiscalYear]                            INT              NOT NULL,
    [AccountName]                           NVARCHAR (100)   NULL,
    [ChartOfAccountIdentifier]              NVARCHAR (50)    NOT NULL,
    [ChartOfAccountEducationOrganizationId] BIGINT           NOT NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [LocalAccount_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [LocalAccount_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [LocalAccount_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalAccount_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [LocalAccount_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalAccount_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalAccount])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear], [AccountName], [ChartOfAccountIdentifier], [ChartOfAccountEducationOrganizationId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [AccountName],
                 [ChartOfAccountIdentifier],
                 [ChartOfAccountEducationOrganizationId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalAccount]
        ORDER BY [AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[LocalAccount];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalAccount]', N'LocalAccount';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalAccount_PK1]', N'LocalAccount_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalAccount].[FK_LocalAccount_ChartOfAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalAccount_ChartOfAccount]
    ON [edfi].[LocalAccount]([ChartOfAccountIdentifier] ASC, [ChartOfAccountEducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalAccount].[UX_LocalAccount_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalAccount_Id]
    ON [edfi].[LocalAccount]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalAccount].[IX_LocalAccount_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalAccount_EducationOrganizationId]
    ON [edfi].[LocalAccount]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalAccount].[IX_LocalAccount_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalAccount_AggregateId]
    ON [edfi].[LocalAccount]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalAccount].[UX_LocalAccount_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalAccount_ChangeVersion]
    ON [edfi].[LocalAccount]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalActual]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalActual] (
    [AccountIdentifier]               NVARCHAR (50)    NOT NULL,
    [AsOfDate]                        DATE             NOT NULL,
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [FiscalYear]                      INT              NOT NULL,
    [Amount]                          MONEY            NOT NULL,
    [FinancialCollectionDescriptorId] INT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [LocalActual_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [LocalActual_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [LocalActual_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalActual_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [LocalActual_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalActual_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalActual])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalActual] ([AccountIdentifier], [AsOfDate], [EducationOrganizationId], [FiscalYear], [Amount], [FinancialCollectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [AsOfDate],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [Amount],
                 [FinancialCollectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalActual]
        ORDER BY [AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[LocalActual];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalActual]', N'LocalActual';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalActual_PK1]', N'LocalActual_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalActual].[FK_LocalActual_FinancialCollectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalActual_FinancialCollectionDescriptor]
    ON [edfi].[LocalActual]([FinancialCollectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalActual].[FK_LocalActual_LocalAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalActual_LocalAccount]
    ON [edfi].[LocalActual]([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalActual].[UX_LocalActual_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalActual_Id]
    ON [edfi].[LocalActual]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalActual].[IX_LocalActual_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalActual_EducationOrganizationId]
    ON [edfi].[LocalActual]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalActual].[IX_LocalActual_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalActual_AggregateId]
    ON [edfi].[LocalActual]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalActual].[UX_LocalActual_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalActual_ChangeVersion]
    ON [edfi].[LocalActual]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalBudget]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalBudget] (
    [AccountIdentifier]               NVARCHAR (50)    NOT NULL,
    [AsOfDate]                        DATE             NOT NULL,
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [FiscalYear]                      INT              NOT NULL,
    [Amount]                          MONEY            NOT NULL,
    [FinancialCollectionDescriptorId] INT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [LocalBudget_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [LocalBudget_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [LocalBudget_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalBudget_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [LocalBudget_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalBudget_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalBudget])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalBudget] ([AccountIdentifier], [AsOfDate], [EducationOrganizationId], [FiscalYear], [Amount], [FinancialCollectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [AsOfDate],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [Amount],
                 [FinancialCollectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalBudget]
        ORDER BY [AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[LocalBudget];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalBudget]', N'LocalBudget';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalBudget_PK1]', N'LocalBudget_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalBudget].[FK_LocalBudget_FinancialCollectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalBudget_FinancialCollectionDescriptor]
    ON [edfi].[LocalBudget]([FinancialCollectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalBudget].[FK_LocalBudget_LocalAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalBudget_LocalAccount]
    ON [edfi].[LocalBudget]([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalBudget].[UX_LocalBudget_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalBudget_Id]
    ON [edfi].[LocalBudget]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalBudget].[IX_LocalBudget_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalBudget_EducationOrganizationId]
    ON [edfi].[LocalBudget]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalBudget].[IX_LocalBudget_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalBudget_AggregateId]
    ON [edfi].[LocalBudget]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalBudget].[UX_LocalBudget_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalBudget_ChangeVersion]
    ON [edfi].[LocalBudget]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalContractedStaff]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalContractedStaff] (
    [AccountIdentifier]               NVARCHAR (50)    NOT NULL,
    [AsOfDate]                        DATE             NOT NULL,
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [FiscalYear]                      INT              NOT NULL,
    [StaffUSI]                        INT              NOT NULL,
    [Amount]                          MONEY            NOT NULL,
    [FinancialCollectionDescriptorId] INT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [LocalContractedStaff_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [LocalContractedStaff_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [LocalContractedStaff_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalContractedStaff_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [LocalContractedStaff_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalContractedStaff_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalContractedStaff])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalContractedStaff] ([AccountIdentifier], [AsOfDate], [EducationOrganizationId], [FiscalYear], [StaffUSI], [Amount], [FinancialCollectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [AsOfDate],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [StaffUSI],
                 [Amount],
                 [FinancialCollectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalContractedStaff]
        ORDER BY [AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[LocalContractedStaff];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalContractedStaff]', N'LocalContractedStaff';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalContractedStaff_PK1]', N'LocalContractedStaff_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[FK_LocalContractedStaff_FinancialCollectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalContractedStaff_FinancialCollectionDescriptor]
    ON [edfi].[LocalContractedStaff]([FinancialCollectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[FK_LocalContractedStaff_LocalAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalContractedStaff_LocalAccount]
    ON [edfi].[LocalContractedStaff]([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[UX_LocalContractedStaff_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalContractedStaff_Id]
    ON [edfi].[LocalContractedStaff]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[IX_LocalContractedStaff_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalContractedStaff_EducationOrganizationId]
    ON [edfi].[LocalContractedStaff]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[IX_LocalContractedStaff_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalContractedStaff_AggregateId]
    ON [edfi].[LocalContractedStaff]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[IX_LocalContractedStaff_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalContractedStaff_StaffUSI]
    ON [edfi].[LocalContractedStaff]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalContractedStaff].[UX_LocalContractedStaff_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalContractedStaff_ChangeVersion]
    ON [edfi].[LocalContractedStaff]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalEncumbrance]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalEncumbrance] (
    [AccountIdentifier]               NVARCHAR (50)    NOT NULL,
    [AsOfDate]                        DATE             NOT NULL,
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [FiscalYear]                      INT              NOT NULL,
    [Amount]                          MONEY            NOT NULL,
    [FinancialCollectionDescriptorId] INT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [LocalEncumbrance_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [LocalEncumbrance_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [LocalEncumbrance_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalEncumbrance_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [LocalEncumbrance_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalEncumbrance_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalEncumbrance])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalEncumbrance] ([AccountIdentifier], [AsOfDate], [EducationOrganizationId], [FiscalYear], [Amount], [FinancialCollectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [AsOfDate],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [Amount],
                 [FinancialCollectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalEncumbrance]
        ORDER BY [AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[LocalEncumbrance];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalEncumbrance]', N'LocalEncumbrance';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalEncumbrance_PK1]', N'LocalEncumbrance_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[FK_LocalEncumbrance_FinancialCollectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalEncumbrance_FinancialCollectionDescriptor]
    ON [edfi].[LocalEncumbrance]([FinancialCollectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[FK_LocalEncumbrance_LocalAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalEncumbrance_LocalAccount]
    ON [edfi].[LocalEncumbrance]([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[UX_LocalEncumbrance_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalEncumbrance_Id]
    ON [edfi].[LocalEncumbrance]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[IX_LocalEncumbrance_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalEncumbrance_EducationOrganizationId]
    ON [edfi].[LocalEncumbrance]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[IX_LocalEncumbrance_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalEncumbrance_AggregateId]
    ON [edfi].[LocalEncumbrance]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalEncumbrance].[UX_LocalEncumbrance_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalEncumbrance_ChangeVersion]
    ON [edfi].[LocalEncumbrance]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[LocalPayroll]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_LocalPayroll] (
    [AccountIdentifier]               NVARCHAR (50)    NOT NULL,
    [AsOfDate]                        DATE             NOT NULL,
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [FiscalYear]                      INT              NOT NULL,
    [StaffUSI]                        INT              NOT NULL,
    [Amount]                          MONEY            NOT NULL,
    [FinancialCollectionDescriptorId] INT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [LocalPayroll_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [LocalPayroll_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [LocalPayroll_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[LocalPayroll_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [LocalPayroll_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_LocalPayroll_PK1] PRIMARY KEY CLUSTERED ([AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[LocalPayroll])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_LocalPayroll] ([AccountIdentifier], [AsOfDate], [EducationOrganizationId], [FiscalYear], [StaffUSI], [Amount], [FinancialCollectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AccountIdentifier],
                 [AsOfDate],
                 [EducationOrganizationId],
                 [FiscalYear],
                 [StaffUSI],
                 [Amount],
                 [FinancialCollectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[LocalPayroll]
        ORDER BY [AccountIdentifier] ASC, [AsOfDate] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[LocalPayroll];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_LocalPayroll]', N'LocalPayroll';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_LocalPayroll_PK1]', N'LocalPayroll_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[FK_LocalPayroll_FinancialCollectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalPayroll_FinancialCollectionDescriptor]
    ON [edfi].[LocalPayroll]([FinancialCollectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[FK_LocalPayroll_LocalAccount]...';


GO
CREATE NONCLUSTERED INDEX [FK_LocalPayroll_LocalAccount]
    ON [edfi].[LocalPayroll]([AccountIdentifier] ASC, [EducationOrganizationId] ASC, [FiscalYear] ASC);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[UX_LocalPayroll_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_LocalPayroll_Id]
    ON [edfi].[LocalPayroll]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[IX_LocalPayroll_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalPayroll_EducationOrganizationId]
    ON [edfi].[LocalPayroll]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[IX_LocalPayroll_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalPayroll_AggregateId]
    ON [edfi].[LocalPayroll]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[IX_LocalPayroll_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_LocalPayroll_StaffUSI]
    ON [edfi].[LocalPayroll]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[LocalPayroll].[UX_LocalPayroll_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_LocalPayroll_ChangeVersion]
    ON [edfi].[LocalPayroll]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Location]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Location] (
    [ClassroomIdentificationCode] NVARCHAR (60)    NOT NULL,
    [SchoolId]                    BIGINT           NOT NULL,
    [MaximumNumberOfSeats]        INT              NULL,
    [OptimalNumberOfSeats]        INT              NULL,
    [Discriminator]               NVARCHAR (128)   NULL,
    [CreateDate]                  DATETIME2 (7)    CONSTRAINT [Location_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]            DATETIME2 (7)    CONSTRAINT [Location_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                          UNIQUEIDENTIFIER CONSTRAINT [Location_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[Location_AggSeq]) NOT NULL,
    [AggregateData]               VARBINARY (8000) NULL,
    [ChangeVersion]               BIGINT           CONSTRAINT [Location_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Location_PK1] PRIMARY KEY CLUSTERED ([ClassroomIdentificationCode] ASC, [SchoolId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Location])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Location] ([ClassroomIdentificationCode], [SchoolId], [MaximumNumberOfSeats], [OptimalNumberOfSeats], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ClassroomIdentificationCode],
                 [SchoolId],
                 [MaximumNumberOfSeats],
                 [OptimalNumberOfSeats],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Location]
        ORDER BY [ClassroomIdentificationCode] ASC, [SchoolId] ASC;
    END

DROP TABLE [edfi].[Location];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Location]', N'Location';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Location_PK1]', N'Location_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Location].[UX_Location_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Location_Id]
    ON [edfi].[Location]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Location].[IX_Location_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Location_SchoolId]
    ON [edfi].[Location]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Location].[IX_Location_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Location_AggregateId]
    ON [edfi].[Location]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Location].[UX_Location_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Location_ChangeVersion]
    ON [edfi].[Location]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ObjectDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ObjectDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [ObjectDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [ObjectDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [ObjectDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[ObjectDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [ObjectDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ObjectDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ObjectDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ObjectDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ObjectDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[ObjectDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ObjectDimension]', N'ObjectDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ObjectDimension_PK1]', N'ObjectDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ObjectDimension].[UX_ObjectDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ObjectDimension_Id]
    ON [edfi].[ObjectDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ObjectDimension].[IX_ObjectDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ObjectDimension_AggregateId]
    ON [edfi].[ObjectDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ObjectDimension].[UX_ObjectDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ObjectDimension_ChangeVersion]
    ON [edfi].[ObjectDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ObjectiveAssessment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ObjectiveAssessment] (
    [AssessmentIdentifier]        NVARCHAR (60)    NOT NULL,
    [IdentificationCode]          NVARCHAR (60)    NOT NULL,
    [Namespace]                   NVARCHAR (255)   NOT NULL,
    [AcademicSubjectDescriptorId] INT              NULL,
    [Description]                 NVARCHAR (1024)  NULL,
    [MaxRawScore]                 DECIMAL (15, 5)  NULL,
    [Nomenclature]                NVARCHAR (100)   NULL,
    [ParentIdentificationCode]    NVARCHAR (60)    NULL,
    [PercentOfAssessment]         DECIMAL (5, 4)   NULL,
    [Discriminator]               NVARCHAR (128)   NULL,
    [CreateDate]                  DATETIME2 (7)    CONSTRAINT [ObjectiveAssessment_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]            DATETIME2 (7)    CONSTRAINT [ObjectiveAssessment_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                          UNIQUEIDENTIFIER CONSTRAINT [ObjectiveAssessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[ObjectiveAssessment_AggSeq]) NOT NULL,
    [AggregateData]               VARBINARY (8000) NULL,
    [ChangeVersion]               BIGINT           CONSTRAINT [ObjectiveAssessment_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ObjectiveAssessment_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ObjectiveAssessment])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace], [AcademicSubjectDescriptorId], [Description], [MaxRawScore], [Nomenclature], [ParentIdentificationCode], [PercentOfAssessment], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [IdentificationCode],
                 [Namespace],
                 [AcademicSubjectDescriptorId],
                 [Description],
                 [MaxRawScore],
                 [Nomenclature],
                 [ParentIdentificationCode],
                 [PercentOfAssessment],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ObjectiveAssessment]
        ORDER BY [AssessmentIdentifier] ASC, [IdentificationCode] ASC, [Namespace] ASC;
    END

DROP TABLE [edfi].[ObjectiveAssessment];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ObjectiveAssessment]', N'ObjectiveAssessment';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ObjectiveAssessment_PK1]', N'ObjectiveAssessment_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[FK_ObjectiveAssessment_AcademicSubjectDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessment_AcademicSubjectDescriptor]
    ON [edfi].[ObjectiveAssessment]([AcademicSubjectDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[FK_ObjectiveAssessment_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessment_Assessment]
    ON [edfi].[ObjectiveAssessment]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[FK_ObjectiveAssessment_ObjectiveAssessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessment_ObjectiveAssessment]
    ON [edfi].[ObjectiveAssessment]([AssessmentIdentifier] ASC, [ParentIdentificationCode] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[UX_ObjectiveAssessment_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ObjectiveAssessment_Id]
    ON [edfi].[ObjectiveAssessment]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[IX_ObjectiveAssessment_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ObjectiveAssessment_AggregateId]
    ON [edfi].[ObjectiveAssessment]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ObjectiveAssessment].[UX_ObjectiveAssessment_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ObjectiveAssessment_ChangeVersion]
    ON [edfi].[ObjectiveAssessment]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[OpenStaffPosition]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_OpenStaffPosition] (
    [EducationOrganizationId]         BIGINT           NOT NULL,
    [RequisitionNumber]               NVARCHAR (20)    NOT NULL,
    [DatePosted]                      DATE             NOT NULL,
    [DatePostingRemoved]              DATE             NULL,
    [EmploymentStatusDescriptorId]    INT              NOT NULL,
    [PositionTitle]                   NVARCHAR (100)   NULL,
    [PostingResultDescriptorId]       INT              NULL,
    [ProgramAssignmentDescriptorId]   INT              NULL,
    [StaffClassificationDescriptorId] INT              NOT NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [OpenStaffPosition_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [OpenStaffPosition_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [OpenStaffPosition_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[OpenStaffPosition_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [OpenStaffPosition_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_OpenStaffPosition_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [RequisitionNumber] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[OpenStaffPosition])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_OpenStaffPosition] ([EducationOrganizationId], [RequisitionNumber], [DatePosted], [DatePostingRemoved], [EmploymentStatusDescriptorId], [PositionTitle], [PostingResultDescriptorId], [ProgramAssignmentDescriptorId], [StaffClassificationDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [RequisitionNumber],
                 [DatePosted],
                 [DatePostingRemoved],
                 [EmploymentStatusDescriptorId],
                 [PositionTitle],
                 [PostingResultDescriptorId],
                 [ProgramAssignmentDescriptorId],
                 [StaffClassificationDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[OpenStaffPosition]
        ORDER BY [EducationOrganizationId] ASC, [RequisitionNumber] ASC;
    END

DROP TABLE [edfi].[OpenStaffPosition];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_OpenStaffPosition]', N'OpenStaffPosition';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_OpenStaffPosition_PK1]', N'OpenStaffPosition_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[FK_OpenStaffPosition_EmploymentStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_EmploymentStatusDescriptor]
    ON [edfi].[OpenStaffPosition]([EmploymentStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[FK_OpenStaffPosition_PostingResultDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_PostingResultDescriptor]
    ON [edfi].[OpenStaffPosition]([PostingResultDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[FK_OpenStaffPosition_ProgramAssignmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_ProgramAssignmentDescriptor]
    ON [edfi].[OpenStaffPosition]([ProgramAssignmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[FK_OpenStaffPosition_StaffClassificationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_StaffClassificationDescriptor]
    ON [edfi].[OpenStaffPosition]([StaffClassificationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[UX_OpenStaffPosition_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_OpenStaffPosition_Id]
    ON [edfi].[OpenStaffPosition]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[IX_OpenStaffPosition_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OpenStaffPosition_EducationOrganizationId]
    ON [edfi].[OpenStaffPosition]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[IX_OpenStaffPosition_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OpenStaffPosition_AggregateId]
    ON [edfi].[OpenStaffPosition]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[OpenStaffPosition].[UX_OpenStaffPosition_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_OpenStaffPosition_ChangeVersion]
    ON [edfi].[OpenStaffPosition]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[OperationalUnitDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_OperationalUnitDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [OperationalUnitDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [OperationalUnitDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [OperationalUnitDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[OperationalUnitDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [OperationalUnitDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_OperationalUnitDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[OperationalUnitDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_OperationalUnitDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[OperationalUnitDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[OperationalUnitDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_OperationalUnitDimension]', N'OperationalUnitDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_OperationalUnitDimension_PK1]', N'OperationalUnitDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[OperationalUnitDimension].[UX_OperationalUnitDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_OperationalUnitDimension_Id]
    ON [edfi].[OperationalUnitDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[OperationalUnitDimension].[IX_OperationalUnitDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_OperationalUnitDimension_AggregateId]
    ON [edfi].[OperationalUnitDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[OperationalUnitDimension].[UX_OperationalUnitDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_OperationalUnitDimension_ChangeVersion]
    ON [edfi].[OperationalUnitDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Person]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Person] (
    [PersonId]                 NVARCHAR (32)    NOT NULL,
    [SourceSystemDescriptorId] INT              NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [Person_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [Person_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [Person_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[Person_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [Person_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Person_PK1] PRIMARY KEY CLUSTERED ([PersonId] ASC, [SourceSystemDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Person])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Person] ([PersonId], [SourceSystemDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [PersonId],
                 [SourceSystemDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Person]
        ORDER BY [PersonId] ASC, [SourceSystemDescriptorId] ASC;
    END

DROP TABLE [edfi].[Person];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Person]', N'Person';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Person_PK1]', N'Person_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Person].[FK_Person_SourceSystemDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Person_SourceSystemDescriptor]
    ON [edfi].[Person]([SourceSystemDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Person].[UX_Person_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Person_Id]
    ON [edfi].[Person]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Person].[IX_Person_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Person_AggregateId]
    ON [edfi].[Person]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Person].[UX_Person_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Person_ChangeVersion]
    ON [edfi].[Person]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[PostSecondaryEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_PostSecondaryEvent] (
    [EventDate]                              DATE             NOT NULL,
    [PostSecondaryEventCategoryDescriptorId] INT              NOT NULL,
    [StudentUSI]                             INT              NOT NULL,
    [PostSecondaryInstitutionId]             BIGINT           NULL,
    [Discriminator]                          NVARCHAR (128)   NULL,
    [CreateDate]                             DATETIME2 (7)    CONSTRAINT [PostSecondaryEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                       DATETIME2 (7)    CONSTRAINT [PostSecondaryEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                     UNIQUEIDENTIFIER CONSTRAINT [PostSecondaryEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                            INT              DEFAULT ( NEXT VALUE FOR [edfi].[PostSecondaryEvent_AggSeq]) NOT NULL,
    [AggregateData]                          VARBINARY (8000) NULL,
    [ChangeVersion]                          BIGINT           CONSTRAINT [PostSecondaryEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PostSecondaryEvent_PK1] PRIMARY KEY CLUSTERED ([EventDate] ASC, [PostSecondaryEventCategoryDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[PostSecondaryEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_PostSecondaryEvent] ([EventDate], [PostSecondaryEventCategoryDescriptorId], [StudentUSI], [PostSecondaryInstitutionId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EventDate],
                 [PostSecondaryEventCategoryDescriptorId],
                 [StudentUSI],
                 [PostSecondaryInstitutionId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[PostSecondaryEvent]
        ORDER BY [EventDate] ASC, [PostSecondaryEventCategoryDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[PostSecondaryEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_PostSecondaryEvent]', N'PostSecondaryEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_PostSecondaryEvent_PK1]', N'PostSecondaryEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor]
    ON [edfi].[PostSecondaryEvent]([PostSecondaryEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[UX_PostSecondaryEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_PostSecondaryEvent_Id]
    ON [edfi].[PostSecondaryEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[IX_PostSecondaryEvent_PostSecondaryInstitutionId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PostSecondaryEvent_PostSecondaryInstitutionId]
    ON [edfi].[PostSecondaryEvent]([PostSecondaryInstitutionId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[IX_PostSecondaryEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PostSecondaryEvent_AggregateId]
    ON [edfi].[PostSecondaryEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[IX_PostSecondaryEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_PostSecondaryEvent_StudentUSI]
    ON [edfi].[PostSecondaryEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[PostSecondaryEvent].[UX_PostSecondaryEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_PostSecondaryEvent_ChangeVersion]
    ON [edfi].[PostSecondaryEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Program]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Program] (
    [EducationOrganizationId] BIGINT           NOT NULL,
    [ProgramName]             NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId] INT              NOT NULL,
    [ProgramId]               NVARCHAR (20)    NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [Program_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [Program_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [Program_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[Program_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [Program_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Program_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Program])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [ProgramId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [ProgramId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Program]
        ORDER BY [EducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC;
    END

DROP TABLE [edfi].[Program];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Program]', N'Program';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Program_PK1]', N'Program_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Program].[FK_Program_ProgramTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Program_ProgramTypeDescriptor]
    ON [edfi].[Program]([ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Program].[UX_Program_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Program_Id]
    ON [edfi].[Program]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Program].[IX_Program_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Program_EducationOrganizationId]
    ON [edfi].[Program]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Program].[IX_Program_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Program_AggregateId]
    ON [edfi].[Program]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Program].[UX_Program_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Program_ChangeVersion]
    ON [edfi].[Program]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ProgramDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ProgramDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [ProgramDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [ProgramDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [ProgramDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[ProgramDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [ProgramDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ProgramDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ProgramDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ProgramDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ProgramDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[ProgramDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ProgramDimension]', N'ProgramDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ProgramDimension_PK1]', N'ProgramDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ProgramDimension].[UX_ProgramDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ProgramDimension_Id]
    ON [edfi].[ProgramDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ProgramDimension].[IX_ProgramDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramDimension_AggregateId]
    ON [edfi].[ProgramDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramDimension].[UX_ProgramDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ProgramDimension_ChangeVersion]
    ON [edfi].[ProgramDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ProgramEvaluation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ProgramEvaluation] (
    [ProgramEducationOrganizationId]      BIGINT           NOT NULL,
    [ProgramEvaluationPeriodDescriptorId] INT              NOT NULL,
    [ProgramEvaluationTitle]              NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationTypeDescriptorId]   INT              NOT NULL,
    [ProgramName]                         NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]             INT              NOT NULL,
    [EvaluationMaxNumericRating]          DECIMAL (6, 3)   NULL,
    [EvaluationMinNumericRating]          DECIMAL (6, 3)   NULL,
    [ProgramEvaluationDescription]        NVARCHAR (255)   NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [ProgramEvaluation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [ProgramEvaluation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [ProgramEvaluation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[ProgramEvaluation_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [ProgramEvaluation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ProgramEvaluation_PK1] PRIMARY KEY CLUSTERED ([ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ProgramEvaluation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ProgramEvaluation] ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [EvaluationMaxNumericRating], [EvaluationMinNumericRating], [ProgramEvaluationDescription], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ProgramEducationOrganizationId],
                 [ProgramEvaluationPeriodDescriptorId],
                 [ProgramEvaluationTitle],
                 [ProgramEvaluationTypeDescriptorId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [EvaluationMaxNumericRating],
                 [EvaluationMinNumericRating],
                 [ProgramEvaluationDescription],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ProgramEvaluation]
        ORDER BY [ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC;
    END

DROP TABLE [edfi].[ProgramEvaluation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ProgramEvaluation]', N'ProgramEvaluation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ProgramEvaluation_PK1]', N'ProgramEvaluation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[FK_ProgramEvaluation_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluation_Program]
    ON [edfi].[ProgramEvaluation]([ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor]
    ON [edfi].[ProgramEvaluation]([ProgramEvaluationPeriodDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor]
    ON [edfi].[ProgramEvaluation]([ProgramEvaluationTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[UX_ProgramEvaluation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ProgramEvaluation_Id]
    ON [edfi].[ProgramEvaluation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[IX_ProgramEvaluation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramEvaluation_AggregateId]
    ON [edfi].[ProgramEvaluation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluation].[UX_ProgramEvaluation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ProgramEvaluation_ChangeVersion]
    ON [edfi].[ProgramEvaluation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ProgramEvaluationElement]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ProgramEvaluationElement] (
    [ProgramEducationOrganizationId]      BIGINT           NOT NULL,
    [ProgramEvaluationElementTitle]       NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationPeriodDescriptorId] INT              NOT NULL,
    [ProgramEvaluationTitle]              NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationTypeDescriptorId]   INT              NOT NULL,
    [ProgramName]                         NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]             INT              NOT NULL,
    [ElementMaxNumericRating]             DECIMAL (6, 3)   NULL,
    [ElementMinNumericRating]             DECIMAL (6, 3)   NULL,
    [ElementSortOrder]                    INT              NULL,
    [ProgramEvaluationElementDescription] NVARCHAR (255)   NULL,
    [ProgramEvaluationObjectiveTitle]     NVARCHAR (50)    NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [ProgramEvaluationElement_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [ProgramEvaluationElement_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [ProgramEvaluationElement_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[ProgramEvaluationElement_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [ProgramEvaluationElement_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ProgramEvaluationElement_PK1] PRIMARY KEY CLUSTERED ([ProgramEducationOrganizationId] ASC, [ProgramEvaluationElementTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ProgramEvaluationElement])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ProgramEvaluationElement] ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [ElementMaxNumericRating], [ElementMinNumericRating], [ElementSortOrder], [ProgramEvaluationElementDescription], [ProgramEvaluationObjectiveTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ProgramEducationOrganizationId],
                 [ProgramEvaluationElementTitle],
                 [ProgramEvaluationPeriodDescriptorId],
                 [ProgramEvaluationTitle],
                 [ProgramEvaluationTypeDescriptorId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [ElementMaxNumericRating],
                 [ElementMinNumericRating],
                 [ElementSortOrder],
                 [ProgramEvaluationElementDescription],
                 [ProgramEvaluationObjectiveTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ProgramEvaluationElement]
        ORDER BY [ProgramEducationOrganizationId] ASC, [ProgramEvaluationElementTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC;
    END

DROP TABLE [edfi].[ProgramEvaluationElement];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ProgramEvaluationElement]', N'ProgramEvaluationElement';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ProgramEvaluationElement_PK1]', N'ProgramEvaluationElement_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[FK_ProgramEvaluationElement_ProgramEvaluation]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluationElement_ProgramEvaluation]
    ON [edfi].[ProgramEvaluationElement]([ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[FK_ProgramEvaluationElement_ProgramEvaluationObjective]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluationElement_ProgramEvaluationObjective]
    ON [edfi].[ProgramEvaluationElement]([ProgramEducationOrganizationId] ASC, [ProgramEvaluationObjectiveTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[UX_ProgramEvaluationElement_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ProgramEvaluationElement_Id]
    ON [edfi].[ProgramEvaluationElement]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[IX_ProgramEvaluationElement_ProgramEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramEvaluationElement_ProgramEducationOrganizationId]
    ON [edfi].[ProgramEvaluationElement]([ProgramEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[IX_ProgramEvaluationElement_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramEvaluationElement_AggregateId]
    ON [edfi].[ProgramEvaluationElement]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationElement].[UX_ProgramEvaluationElement_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ProgramEvaluationElement_ChangeVersion]
    ON [edfi].[ProgramEvaluationElement]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ProgramEvaluationObjective]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ProgramEvaluationObjective] (
    [ProgramEducationOrganizationId]        BIGINT           NOT NULL,
    [ProgramEvaluationObjectiveTitle]       NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationPeriodDescriptorId]   INT              NOT NULL,
    [ProgramEvaluationTitle]                NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationTypeDescriptorId]     INT              NOT NULL,
    [ProgramName]                           NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]               INT              NOT NULL,
    [ObjectiveMaxNumericRating]             DECIMAL (6, 3)   NULL,
    [ObjectiveMinNumericRating]             DECIMAL (6, 3)   NULL,
    [ObjectiveSortOrder]                    INT              NULL,
    [ProgramEvaluationObjectiveDescription] NVARCHAR (255)   NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [ProgramEvaluationObjective_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [ProgramEvaluationObjective_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [ProgramEvaluationObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[ProgramEvaluationObjective_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [ProgramEvaluationObjective_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ProgramEvaluationObjective_PK1] PRIMARY KEY CLUSTERED ([ProgramEducationOrganizationId] ASC, [ProgramEvaluationObjectiveTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ProgramEvaluationObjective])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ProgramEvaluationObjective] ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [ObjectiveMaxNumericRating], [ObjectiveMinNumericRating], [ObjectiveSortOrder], [ProgramEvaluationObjectiveDescription], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ProgramEducationOrganizationId],
                 [ProgramEvaluationObjectiveTitle],
                 [ProgramEvaluationPeriodDescriptorId],
                 [ProgramEvaluationTitle],
                 [ProgramEvaluationTypeDescriptorId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [ObjectiveMaxNumericRating],
                 [ObjectiveMinNumericRating],
                 [ObjectiveSortOrder],
                 [ProgramEvaluationObjectiveDescription],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ProgramEvaluationObjective]
        ORDER BY [ProgramEducationOrganizationId] ASC, [ProgramEvaluationObjectiveTitle] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC;
    END

DROP TABLE [edfi].[ProgramEvaluationObjective];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ProgramEvaluationObjective]', N'ProgramEvaluationObjective';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ProgramEvaluationObjective_PK1]', N'ProgramEvaluationObjective_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationObjective].[FK_ProgramEvaluationObjective_ProgramEvaluation]...';


GO
CREATE NONCLUSTERED INDEX [FK_ProgramEvaluationObjective_ProgramEvaluation]
    ON [edfi].[ProgramEvaluationObjective]([ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationObjective].[UX_ProgramEvaluationObjective_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ProgramEvaluationObjective_Id]
    ON [edfi].[ProgramEvaluationObjective]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationObjective].[IX_ProgramEvaluationObjective_ProgramEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramEvaluationObjective_ProgramEducationOrganizationId]
    ON [edfi].[ProgramEvaluationObjective]([ProgramEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationObjective].[IX_ProgramEvaluationObjective_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProgramEvaluationObjective_AggregateId]
    ON [edfi].[ProgramEvaluationObjective]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ProgramEvaluationObjective].[UX_ProgramEvaluationObjective_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ProgramEvaluationObjective_ChangeVersion]
    ON [edfi].[ProgramEvaluationObjective]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ProjectDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ProjectDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [ProjectDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [ProjectDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [ProjectDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[ProjectDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [ProjectDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ProjectDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ProjectDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ProjectDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ProjectDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[ProjectDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ProjectDimension]', N'ProjectDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ProjectDimension_PK1]', N'ProjectDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ProjectDimension].[UX_ProjectDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ProjectDimension_Id]
    ON [edfi].[ProjectDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ProjectDimension].[IX_ProjectDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProjectDimension_AggregateId]
    ON [edfi].[ProjectDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ProjectDimension].[UX_ProjectDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ProjectDimension_ChangeVersion]
    ON [edfi].[ProjectDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[ReportCard]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_ReportCard] (
    [EducationOrganizationId]   BIGINT           NOT NULL,
    [GradingPeriodDescriptorId] INT              NOT NULL,
    [GradingPeriodName]         NVARCHAR (60)    NOT NULL,
    [GradingPeriodSchoolId]     BIGINT           NOT NULL,
    [GradingPeriodSchoolYear]   SMALLINT         NOT NULL,
    [StudentUSI]                INT              NOT NULL,
    [NumberOfDaysAbsent]        DECIMAL (18, 4)  NULL,
    [NumberOfDaysInAttendance]  DECIMAL (18, 4)  NULL,
    [NumberOfDaysTardy]         INT              NULL,
    [Discriminator]             NVARCHAR (128)   NULL,
    [CreateDate]                DATETIME2 (7)    CONSTRAINT [ReportCard_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]          DATETIME2 (7)    CONSTRAINT [ReportCard_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                        UNIQUEIDENTIFIER CONSTRAINT [ReportCard_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]               INT              DEFAULT ( NEXT VALUE FOR [edfi].[ReportCard_AggSeq]) NOT NULL,
    [AggregateData]             VARBINARY (8000) NULL,
    [ChangeVersion]             BIGINT           CONSTRAINT [ReportCard_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_ReportCard_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[ReportCard])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_ReportCard] ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI], [NumberOfDaysAbsent], [NumberOfDaysInAttendance], [NumberOfDaysTardy], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [GradingPeriodDescriptorId],
                 [GradingPeriodName],
                 [GradingPeriodSchoolId],
                 [GradingPeriodSchoolYear],
                 [StudentUSI],
                 [NumberOfDaysAbsent],
                 [NumberOfDaysInAttendance],
                 [NumberOfDaysTardy],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[ReportCard]
        ORDER BY [EducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[ReportCard];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_ReportCard]', N'ReportCard';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_ReportCard_PK1]', N'ReportCard_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[ReportCard].[FK_ReportCard_GradingPeriod]...';


GO
CREATE NONCLUSTERED INDEX [FK_ReportCard_GradingPeriod]
    ON [edfi].[ReportCard]([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[ReportCard].[UX_ReportCard_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_ReportCard_Id]
    ON [edfi].[ReportCard]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[ReportCard].[IX_ReportCard_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ReportCard_EducationOrganizationId]
    ON [edfi].[ReportCard]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ReportCard].[IX_ReportCard_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ReportCard_AggregateId]
    ON [edfi].[ReportCard]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[ReportCard].[IX_ReportCard_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_ReportCard_StudentUSI]
    ON [edfi].[ReportCard]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[ReportCard].[UX_ReportCard_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_ReportCard_ChangeVersion]
    ON [edfi].[ReportCard]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[RestraintEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_RestraintEvent] (
    [RestraintEventIdentifier]           NVARCHAR (36)    NOT NULL,
    [SchoolId]                           BIGINT           NOT NULL,
    [StudentUSI]                         INT              NOT NULL,
    [EducationalEnvironmentDescriptorId] INT              NULL,
    [EventDate]                          DATE             NOT NULL,
    [IncidentIdentifier]                 NVARCHAR (36)    NULL,
    [Discriminator]                      NVARCHAR (128)   NULL,
    [CreateDate]                         DATETIME2 (7)    CONSTRAINT [RestraintEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                   DATETIME2 (7)    CONSTRAINT [RestraintEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                 UNIQUEIDENTIFIER CONSTRAINT [RestraintEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                        INT              DEFAULT ( NEXT VALUE FOR [edfi].[RestraintEvent_AggSeq]) NOT NULL,
    [AggregateData]                      VARBINARY (8000) NULL,
    [ChangeVersion]                      BIGINT           CONSTRAINT [RestraintEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_RestraintEvent_PK1] PRIMARY KEY CLUSTERED ([RestraintEventIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[RestraintEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_RestraintEvent] ([RestraintEventIdentifier], [SchoolId], [StudentUSI], [EducationalEnvironmentDescriptorId], [EventDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [RestraintEventIdentifier],
                 [SchoolId],
                 [StudentUSI],
                 [EducationalEnvironmentDescriptorId],
                 [EventDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[RestraintEvent]
        ORDER BY [RestraintEventIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[RestraintEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_RestraintEvent]', N'RestraintEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_RestraintEvent_PK1]', N'RestraintEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[FK_RestraintEvent_DisciplineIncident]...';


GO
CREATE NONCLUSTERED INDEX [FK_RestraintEvent_DisciplineIncident]
    ON [edfi].[RestraintEvent]([IncidentIdentifier] ASC, [SchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[FK_RestraintEvent_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_RestraintEvent_EducationalEnvironmentDescriptor]
    ON [edfi].[RestraintEvent]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[UX_RestraintEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_RestraintEvent_Id]
    ON [edfi].[RestraintEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[IX_RestraintEvent_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RestraintEvent_SchoolId]
    ON [edfi].[RestraintEvent]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[IX_RestraintEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RestraintEvent_AggregateId]
    ON [edfi].[RestraintEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[IX_RestraintEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_RestraintEvent_StudentUSI]
    ON [edfi].[RestraintEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[RestraintEvent].[UX_RestraintEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_RestraintEvent_ChangeVersion]
    ON [edfi].[RestraintEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SchoolYearType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SchoolYearType] (
    [SchoolYear]            SMALLINT         NOT NULL,
    [SchoolYearDescription] NVARCHAR (50)    NOT NULL,
    [CurrentSchoolYear]     BIT              NOT NULL,
    [CreateDate]            DATETIME2 (7)    CONSTRAINT [SchoolYearType_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]      DATETIME2 (7)    CONSTRAINT [SchoolYearType_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                    UNIQUEIDENTIFIER CONSTRAINT [SchoolYearType_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]           INT              DEFAULT ( NEXT VALUE FOR [edfi].[SchoolYearType_AggSeq]) NOT NULL,
    [AggregateData]         VARBINARY (8000) NULL,
    [ChangeVersion]         BIGINT           CONSTRAINT [SchoolYearType_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SchoolYearType_PK1] PRIMARY KEY CLUSTERED ([SchoolYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SchoolYearType])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [SchoolYear],
                 [SchoolYearDescription],
                 [CurrentSchoolYear],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SchoolYearType]
        ORDER BY [SchoolYear] ASC;
    END

DROP TABLE [edfi].[SchoolYearType];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SchoolYearType]', N'SchoolYearType';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SchoolYearType_PK1]', N'SchoolYearType_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SchoolYearType].[UX_SchoolYearType_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SchoolYearType_Id]
    ON [edfi].[SchoolYearType]([Id] ASC) WITH (FILLFACTOR = 100, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SchoolYearType].[IX_SchoolYearType_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SchoolYearType_AggregateId]
    ON [edfi].[SchoolYearType]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SchoolYearType].[UX_SchoolYearType_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SchoolYearType_ChangeVersion]
    ON [edfi].[SchoolYearType]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Section]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Section] (
    [LocalCourseCode]                     NVARCHAR (60)    NOT NULL,
    [SchoolId]                            BIGINT           NOT NULL,
    [SchoolYear]                          SMALLINT         NOT NULL,
    [SectionIdentifier]                   NVARCHAR (255)   NOT NULL,
    [SessionName]                         NVARCHAR (60)    NOT NULL,
    [AvailableCreditConversion]           DECIMAL (9, 2)   NULL,
    [AvailableCredits]                    DECIMAL (9, 3)   NULL,
    [AvailableCreditTypeDescriptorId]     INT              NULL,
    [EducationalEnvironmentDescriptorId]  INT              NULL,
    [InstructionLanguageDescriptorId]     INT              NULL,
    [LocationClassroomIdentificationCode] NVARCHAR (60)    NULL,
    [LocationSchoolId]                    BIGINT           NULL,
    [MediumOfInstructionDescriptorId]     INT              NULL,
    [OfficialAttendancePeriod]            BIT              NULL,
    [PopulationServedDescriptorId]        INT              NULL,
    [SectionName]                         NVARCHAR (100)   NULL,
    [SectionTypeDescriptorId]             INT              NULL,
    [SequenceOfCourse]                    INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [Section_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [Section_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [Section_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[Section_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [Section_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Section_PK1] PRIMARY KEY CLUSTERED ([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Section])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [AvailableCreditConversion], [AvailableCredits], [AvailableCreditTypeDescriptorId], [EducationalEnvironmentDescriptorId], [InstructionLanguageDescriptorId], [LocationClassroomIdentificationCode], [LocationSchoolId], [MediumOfInstructionDescriptorId], [OfficialAttendancePeriod], [PopulationServedDescriptorId], [SectionName], [SectionTypeDescriptorId], [SequenceOfCourse], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [AvailableCreditConversion],
                 [AvailableCredits],
                 [AvailableCreditTypeDescriptorId],
                 [EducationalEnvironmentDescriptorId],
                 [InstructionLanguageDescriptorId],
                 [LocationClassroomIdentificationCode],
                 [LocationSchoolId],
                 [MediumOfInstructionDescriptorId],
                 [OfficialAttendancePeriod],
                 [PopulationServedDescriptorId],
                 [SectionName],
                 [SectionTypeDescriptorId],
                 [SequenceOfCourse],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Section]
        ORDER BY [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC;
    END

DROP TABLE [edfi].[Section];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Section]', N'Section';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Section_PK1]', N'Section_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_CourseOffering]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_CourseOffering]
    ON [edfi].[Section]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_CreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_CreditTypeDescriptor]
    ON [edfi].[Section]([AvailableCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_EducationalEnvironmentDescriptor]
    ON [edfi].[Section]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_LanguageDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_LanguageDescriptor]
    ON [edfi].[Section]([InstructionLanguageDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_Location]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_Location]
    ON [edfi].[Section]([LocationClassroomIdentificationCode] ASC, [LocationSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_MediumOfInstructionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_MediumOfInstructionDescriptor]
    ON [edfi].[Section]([MediumOfInstructionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_PopulationServedDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_PopulationServedDescriptor]
    ON [edfi].[Section]([PopulationServedDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_School]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_School]
    ON [edfi].[Section]([LocationSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[FK_Section_SectionTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Section_SectionTypeDescriptor]
    ON [edfi].[Section]([SectionTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[UX_Section_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Section_Id]
    ON [edfi].[Section]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Section].[IX_Section_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Section_SchoolId]
    ON [edfi].[Section]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Section].[IX_Section_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Section_AggregateId]
    ON [edfi].[Section]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Section].[UX_Section_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Section_ChangeVersion]
    ON [edfi].[Section]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SectionAttendanceTakenEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SectionAttendanceTakenEvent] (
    [CalendarCode]      NVARCHAR (60)    NOT NULL,
    [Date]              DATE             NOT NULL,
    [LocalCourseCode]   NVARCHAR (60)    NOT NULL,
    [SchoolId]          BIGINT           NOT NULL,
    [SchoolYear]        SMALLINT         NOT NULL,
    [SectionIdentifier] NVARCHAR (255)   NOT NULL,
    [SessionName]       NVARCHAR (60)    NOT NULL,
    [EventDate]         DATE             NOT NULL,
    [StaffUSI]          INT              NULL,
    [Discriminator]     NVARCHAR (128)   NULL,
    [CreateDate]        DATETIME2 (7)    CONSTRAINT [SectionAttendanceTakenEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]  DATETIME2 (7)    CONSTRAINT [SectionAttendanceTakenEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                UNIQUEIDENTIFIER CONSTRAINT [SectionAttendanceTakenEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]       INT              DEFAULT ( NEXT VALUE FOR [edfi].[SectionAttendanceTakenEvent_AggSeq]) NOT NULL,
    [AggregateData]     VARBINARY (8000) NULL,
    [ChangeVersion]     BIGINT           CONSTRAINT [SectionAttendanceTakenEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SectionAttendanceTakenEvent_PK1] PRIMARY KEY CLUSTERED ([CalendarCode] ASC, [Date] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SectionAttendanceTakenEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SectionAttendanceTakenEvent] ([CalendarCode], [Date], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [EventDate], [StaffUSI], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CalendarCode],
                 [Date],
                 [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [EventDate],
                 [StaffUSI],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SectionAttendanceTakenEvent]
        ORDER BY [CalendarCode] ASC, [Date] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC;
    END

DROP TABLE [edfi].[SectionAttendanceTakenEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SectionAttendanceTakenEvent]', N'SectionAttendanceTakenEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SectionAttendanceTakenEvent_PK1]', N'SectionAttendanceTakenEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[FK_SectionAttendanceTakenEvent_CalendarDate]...';


GO
CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_CalendarDate]
    ON [edfi].[SectionAttendanceTakenEvent]([CalendarCode] ASC, [Date] ASC, [SchoolId] ASC, [SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[FK_SectionAttendanceTakenEvent_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_Section]
    ON [edfi].[SectionAttendanceTakenEvent]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[UX_SectionAttendanceTakenEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SectionAttendanceTakenEvent_Id]
    ON [edfi].[SectionAttendanceTakenEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[IX_SectionAttendanceTakenEvent_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SectionAttendanceTakenEvent_SchoolId]
    ON [edfi].[SectionAttendanceTakenEvent]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[IX_SectionAttendanceTakenEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SectionAttendanceTakenEvent_AggregateId]
    ON [edfi].[SectionAttendanceTakenEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[IX_SectionAttendanceTakenEvent_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SectionAttendanceTakenEvent_StaffUSI]
    ON [edfi].[SectionAttendanceTakenEvent]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SectionAttendanceTakenEvent].[UX_SectionAttendanceTakenEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SectionAttendanceTakenEvent_ChangeVersion]
    ON [edfi].[SectionAttendanceTakenEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Session]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Session] (
    [SchoolId]               BIGINT           NOT NULL,
    [SchoolYear]             SMALLINT         NOT NULL,
    [SessionName]            NVARCHAR (60)    NOT NULL,
    [BeginDate]              DATE             NOT NULL,
    [EndDate]                DATE             NOT NULL,
    [TermDescriptorId]       INT              NOT NULL,
    [TotalInstructionalDays] INT              NOT NULL,
    [Discriminator]          NVARCHAR (128)   NULL,
    [CreateDate]             DATETIME2 (7)    CONSTRAINT [Session_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]       DATETIME2 (7)    CONSTRAINT [Session_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                     UNIQUEIDENTIFIER CONSTRAINT [Session_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]            INT              DEFAULT ( NEXT VALUE FOR [edfi].[Session_AggSeq]) NOT NULL,
    [AggregateData]          VARBINARY (8000) NULL,
    [ChangeVersion]          BIGINT           CONSTRAINT [Session_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Session_PK1] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Session])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Session] ([SchoolId], [SchoolYear], [SessionName], [BeginDate], [EndDate], [TermDescriptorId], [TotalInstructionalDays], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [SchoolId],
                 [SchoolYear],
                 [SessionName],
                 [BeginDate],
                 [EndDate],
                 [TermDescriptorId],
                 [TotalInstructionalDays],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Session]
        ORDER BY [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC;
    END

DROP TABLE [edfi].[Session];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Session]', N'Session';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Session_PK1]', N'Session_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Session].[FK_Session_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_Session_SchoolYearType]
    ON [edfi].[Session]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[Session].[FK_Session_TermDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Session_TermDescriptor]
    ON [edfi].[Session]([TermDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Session].[UX_Session_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Session_Id]
    ON [edfi].[Session]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Session].[IX_Session_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Session_SchoolId]
    ON [edfi].[Session]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Session].[IX_Session_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Session_AggregateId]
    ON [edfi].[Session]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Session].[UX_Session_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Session_ChangeVersion]
    ON [edfi].[Session]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SourceDimension]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SourceDimension] (
    [Code]             NVARCHAR (16)    NOT NULL,
    [FiscalYear]       INT              NOT NULL,
    [CodeName]         NVARCHAR (100)   NULL,
    [Discriminator]    NVARCHAR (128)   NULL,
    [CreateDate]       DATETIME2 (7)    CONSTRAINT [SourceDimension_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate] DATETIME2 (7)    CONSTRAINT [SourceDimension_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]               UNIQUEIDENTIFIER CONSTRAINT [SourceDimension_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]      INT              DEFAULT ( NEXT VALUE FOR [edfi].[SourceDimension_AggSeq]) NOT NULL,
    [AggregateData]    VARBINARY (8000) NULL,
    [ChangeVersion]    BIGINT           CONSTRAINT [SourceDimension_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SourceDimension_PK1] PRIMARY KEY CLUSTERED ([Code] ASC, [FiscalYear] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SourceDimension])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SourceDimension] ([Code], [FiscalYear], [CodeName], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Code],
                 [FiscalYear],
                 [CodeName],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SourceDimension]
        ORDER BY [Code] ASC, [FiscalYear] ASC;
    END

DROP TABLE [edfi].[SourceDimension];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SourceDimension]', N'SourceDimension';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SourceDimension_PK1]', N'SourceDimension_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SourceDimension].[UX_SourceDimension_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SourceDimension_Id]
    ON [edfi].[SourceDimension]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SourceDimension].[IX_SourceDimension_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SourceDimension_AggregateId]
    ON [edfi].[SourceDimension]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SourceDimension].[UX_SourceDimension_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SourceDimension_ChangeVersion]
    ON [edfi].[SourceDimension]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Staff]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Staff] (
    [StaffUSI]                                     INT              IDENTITY (1, 1) NOT NULL,
    [BirthDate]                                    DATE             NULL,
    [CitizenshipStatusDescriptorId]                INT              NULL,
    [FirstName]                                    NVARCHAR (75)    NOT NULL,
    [GenderIdentity]                               NVARCHAR (60)    NULL,
    [GenerationCodeSuffix]                         NVARCHAR (10)    NULL,
    [HighestCompletedLevelOfEducationDescriptorId] INT              NULL,
    [HighlyQualifiedTeacher]                       BIT              NULL,
    [HispanicLatinoEthnicity]                      BIT              NULL,
    [LastSurname]                                  NVARCHAR (75)    NOT NULL,
    [LoginId]                                      NVARCHAR (60)    NULL,
    [MaidenName]                                   NVARCHAR (75)    NULL,
    [MiddleName]                                   NVARCHAR (75)    NULL,
    [PersonalTitlePrefix]                          NVARCHAR (30)    NULL,
    [PersonId]                                     NVARCHAR (32)    NULL,
    [PreferredFirstName]                           NVARCHAR (75)    NULL,
    [PreferredLastSurname]                         NVARCHAR (75)    NULL,
    [SexDescriptorId]                              INT              NULL,
    [SourceSystemDescriptorId]                     INT              NULL,
    [StaffUniqueId]                                NVARCHAR (32)    NOT NULL,
    [YearsOfPriorProfessionalExperience]           DECIMAL (5, 2)   NULL,
    [YearsOfPriorTeachingExperience]               DECIMAL (5, 2)   NULL,
    [Discriminator]                                NVARCHAR (128)   NULL,
    [CreateDate]                                   DATETIME2 (7)    CONSTRAINT [Staff_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                             DATETIME2 (7)    CONSTRAINT [Staff_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                           UNIQUEIDENTIFIER CONSTRAINT [Staff_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                  INT              DEFAULT ( NEXT VALUE FOR [edfi].[Staff_AggSeq]) NOT NULL,
    [AggregateData]                                VARBINARY (8000) NULL,
    [ChangeVersion]                                BIGINT           CONSTRAINT [Staff_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Staff_PK1] PRIMARY KEY CLUSTERED ([StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Staff])
    BEGIN
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Staff] ON;
        INSERT INTO [edfi].[tmp_ms_xx_Staff] ([StaffUSI], [BirthDate], [CitizenshipStatusDescriptorId], [FirstName], [GenderIdentity], [GenerationCodeSuffix], [HighestCompletedLevelOfEducationDescriptorId], [HighlyQualifiedTeacher], [HispanicLatinoEthnicity], [LastSurname], [LoginId], [MaidenName], [MiddleName], [PersonalTitlePrefix], [PersonId], [PreferredFirstName], [PreferredLastSurname], [SexDescriptorId], [SourceSystemDescriptorId], [StaffUniqueId], [YearsOfPriorProfessionalExperience], [YearsOfPriorTeachingExperience], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [StaffUSI],
                 [BirthDate],
                 [CitizenshipStatusDescriptorId],
                 [FirstName],
                 [GenderIdentity],
                 [GenerationCodeSuffix],
                 [HighestCompletedLevelOfEducationDescriptorId],
                 [HighlyQualifiedTeacher],
                 [HispanicLatinoEthnicity],
                 [LastSurname],
                 [LoginId],
                 [MaidenName],
                 [MiddleName],
                 [PersonalTitlePrefix],
                 [PersonId],
                 [PreferredFirstName],
                 [PreferredLastSurname],
                 [SexDescriptorId],
                 [SourceSystemDescriptorId],
                 [StaffUniqueId],
                 [YearsOfPriorProfessionalExperience],
                 [YearsOfPriorTeachingExperience],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Staff]
        ORDER BY [StaffUSI] ASC;
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Staff] OFF;
    END

DROP TABLE [edfi].[Staff];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Staff]', N'Staff';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Staff_PK1]', N'Staff_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Staff].[Staff_UI_StaffUniqueId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Staff_UI_StaffUniqueId]
    ON [edfi].[Staff]([StaffUniqueId] ASC)
    INCLUDE([StaffUSI]);


GO
PRINT N'Creating Index [edfi].[Staff].[FK_Staff_CitizenshipStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Staff_CitizenshipStatusDescriptor]
    ON [edfi].[Staff]([CitizenshipStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Staff].[FK_Staff_LevelOfEducationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Staff_LevelOfEducationDescriptor]
    ON [edfi].[Staff]([HighestCompletedLevelOfEducationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Staff].[FK_Staff_Person]...';


GO
CREATE NONCLUSTERED INDEX [FK_Staff_Person]
    ON [edfi].[Staff]([PersonId] ASC, [SourceSystemDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Staff].[FK_Staff_SexDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Staff_SexDescriptor]
    ON [edfi].[Staff]([SexDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Staff].[UX_Staff_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Staff_Id]
    ON [edfi].[Staff]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Staff].[IX_Staff_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staff_AggregateId]
    ON [edfi].[Staff]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Staff].[IX_Staff_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_Staff_StaffUSI]
    ON [edfi].[Staff]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Staff].[UX_Staff_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Staff_ChangeVersion]
    ON [edfi].[Staff]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffAbsenceEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffAbsenceEvent] (
    [AbsenceEventCategoryDescriptorId] INT              NOT NULL,
    [EventDate]                        DATE             NOT NULL,
    [StaffUSI]                         INT              NOT NULL,
    [AbsenceEventReason]               NVARCHAR (40)    NULL,
    [HoursAbsent]                      DECIMAL (18, 2)  NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    CONSTRAINT [StaffAbsenceEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    CONSTRAINT [StaffAbsenceEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                               UNIQUEIDENTIFIER CONSTRAINT [StaffAbsenceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                      INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffAbsenceEvent_AggSeq]) NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           CONSTRAINT [StaffAbsenceEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffAbsenceEvent_PK1] PRIMARY KEY CLUSTERED ([AbsenceEventCategoryDescriptorId] ASC, [EventDate] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffAbsenceEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffAbsenceEvent] ([AbsenceEventCategoryDescriptorId], [EventDate], [StaffUSI], [AbsenceEventReason], [HoursAbsent], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AbsenceEventCategoryDescriptorId],
                 [EventDate],
                 [StaffUSI],
                 [AbsenceEventReason],
                 [HoursAbsent],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffAbsenceEvent]
        ORDER BY [AbsenceEventCategoryDescriptorId] ASC, [EventDate] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffAbsenceEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffAbsenceEvent]', N'StaffAbsenceEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffAbsenceEvent_PK1]', N'StaffAbsenceEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffAbsenceEvent].[FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor]
    ON [edfi].[StaffAbsenceEvent]([AbsenceEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffAbsenceEvent].[UX_StaffAbsenceEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffAbsenceEvent_Id]
    ON [edfi].[StaffAbsenceEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffAbsenceEvent].[IX_StaffAbsenceEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffAbsenceEvent_AggregateId]
    ON [edfi].[StaffAbsenceEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffAbsenceEvent].[IX_StaffAbsenceEvent_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffAbsenceEvent_StaffUSI]
    ON [edfi].[StaffAbsenceEvent]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffAbsenceEvent].[UX_StaffAbsenceEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffAbsenceEvent_ChangeVersion]
    ON [edfi].[StaffAbsenceEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffCohortAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffCohortAssociation] (
    [BeginDate]               DATE             NOT NULL,
    [CohortIdentifier]        NVARCHAR (36)    NOT NULL,
    [EducationOrganizationId] BIGINT           NOT NULL,
    [StaffUSI]                INT              NOT NULL,
    [EndDate]                 DATE             NULL,
    [StudentRecordAccess]     BIT              NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [StaffCohortAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [StaffCohortAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [StaffCohortAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffCohortAssociation_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [StaffCohortAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffCohortAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [CohortIdentifier] ASC, [EducationOrganizationId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffCohortAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffCohortAssociation] ([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StaffUSI], [EndDate], [StudentRecordAccess], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [CohortIdentifier],
                 [EducationOrganizationId],
                 [StaffUSI],
                 [EndDate],
                 [StudentRecordAccess],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffCohortAssociation]
        ORDER BY [BeginDate] ASC, [CohortIdentifier] ASC, [EducationOrganizationId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffCohortAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffCohortAssociation]', N'StaffCohortAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffCohortAssociation_PK1]', N'StaffCohortAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[FK_StaffCohortAssociation_Cohort]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffCohortAssociation_Cohort]
    ON [edfi].[StaffCohortAssociation]([CohortIdentifier] ASC, [EducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[UX_StaffCohortAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffCohortAssociation_Id]
    ON [edfi].[StaffCohortAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[IX_StaffCohortAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffCohortAssociation_EducationOrganizationId]
    ON [edfi].[StaffCohortAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[IX_StaffCohortAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffCohortAssociation_AggregateId]
    ON [edfi].[StaffCohortAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[IX_StaffCohortAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffCohortAssociation_StaffUSI]
    ON [edfi].[StaffCohortAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffCohortAssociation].[UX_StaffCohortAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffCohortAssociation_ChangeVersion]
    ON [edfi].[StaffCohortAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffDisciplineIncidentAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffDisciplineIncidentAssociation] (
    [IncidentIdentifier] NVARCHAR (36)    NOT NULL,
    [SchoolId]           BIGINT           NOT NULL,
    [StaffUSI]           INT              NOT NULL,
    [Discriminator]      NVARCHAR (128)   NULL,
    [CreateDate]         DATETIME2 (7)    CONSTRAINT [StaffDisciplineIncidentAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]   DATETIME2 (7)    CONSTRAINT [StaffDisciplineIncidentAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                 UNIQUEIDENTIFIER CONSTRAINT [StaffDisciplineIncidentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]        INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffDisciplineIncidentAssociation_AggSeq]) NOT NULL,
    [AggregateData]      VARBINARY (8000) NULL,
    [ChangeVersion]      BIGINT           CONSTRAINT [StaffDisciplineIncidentAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffDisciplineIncidentAssociation_PK1] PRIMARY KEY CLUSTERED ([IncidentIdentifier] ASC, [SchoolId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffDisciplineIncidentAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffDisciplineIncidentAssociation] ([IncidentIdentifier], [SchoolId], [StaffUSI], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [IncidentIdentifier],
                 [SchoolId],
                 [StaffUSI],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffDisciplineIncidentAssociation]
        ORDER BY [IncidentIdentifier] ASC, [SchoolId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffDisciplineIncidentAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffDisciplineIncidentAssociation]', N'StaffDisciplineIncidentAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffDisciplineIncidentAssociation_PK1]', N'StaffDisciplineIncidentAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[FK_StaffDisciplineIncidentAssociation_DisciplineIncident]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffDisciplineIncidentAssociation_DisciplineIncident]
    ON [edfi].[StaffDisciplineIncidentAssociation]([IncidentIdentifier] ASC, [SchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[UX_StaffDisciplineIncidentAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffDisciplineIncidentAssociation_Id]
    ON [edfi].[StaffDisciplineIncidentAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[IX_StaffDisciplineIncidentAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffDisciplineIncidentAssociation_SchoolId]
    ON [edfi].[StaffDisciplineIncidentAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[IX_StaffDisciplineIncidentAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffDisciplineIncidentAssociation_AggregateId]
    ON [edfi].[StaffDisciplineIncidentAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[IX_StaffDisciplineIncidentAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffDisciplineIncidentAssociation_StaffUSI]
    ON [edfi].[StaffDisciplineIncidentAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffDisciplineIncidentAssociation].[UX_StaffDisciplineIncidentAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffDisciplineIncidentAssociation_ChangeVersion]
    ON [edfi].[StaffDisciplineIncidentAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffEducationOrganizationAssignmentAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffEducationOrganizationAssignmentAssociation] (
    [BeginDate]                                 DATE             NOT NULL,
    [EducationOrganizationId]                   BIGINT           NOT NULL,
    [StaffClassificationDescriptorId]           INT              NOT NULL,
    [StaffUSI]                                  INT              NOT NULL,
    [CredentialIdentifier]                      NVARCHAR (60)    NULL,
    [EmploymentEducationOrganizationId]         BIGINT           NULL,
    [EmploymentStatusDescriptorId]              INT              NULL,
    [EmploymentHireDate]                        DATE             NULL,
    [EndDate]                                   DATE             NULL,
    [FullTimeEquivalency]                       DECIMAL (5, 4)   NULL,
    [OrderOfAssignment]                         INT              NULL,
    [PositionTitle]                             NVARCHAR (100)   NULL,
    [StateOfIssueStateAbbreviationDescriptorId] INT              NULL,
    [Discriminator]                             NVARCHAR (128)   NULL,
    [CreateDate]                                DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                          DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                        UNIQUEIDENTIFIER CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                               INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffEducationOrganizationAssignmentAssociation_AggSeq]) NOT NULL,
    [AggregateData]                             VARBINARY (8000) NULL,
    [ChangeVersion]                             BIGINT           CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffEducationOrganizationAssignmentAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [EducationOrganizationId] ASC, [StaffClassificationDescriptorId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffEducationOrganizationAssignmentAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffEducationOrganizationAssignmentAssociation] ([BeginDate], [EducationOrganizationId], [StaffClassificationDescriptorId], [StaffUSI], [CredentialIdentifier], [EmploymentEducationOrganizationId], [EmploymentStatusDescriptorId], [EmploymentHireDate], [EndDate], [FullTimeEquivalency], [OrderOfAssignment], [PositionTitle], [StateOfIssueStateAbbreviationDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [EducationOrganizationId],
                 [StaffClassificationDescriptorId],
                 [StaffUSI],
                 [CredentialIdentifier],
                 [EmploymentEducationOrganizationId],
                 [EmploymentStatusDescriptorId],
                 [EmploymentHireDate],
                 [EndDate],
                 [FullTimeEquivalency],
                 [OrderOfAssignment],
                 [PositionTitle],
                 [StateOfIssueStateAbbreviationDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffEducationOrganizationAssignmentAssociation]
        ORDER BY [BeginDate] ASC, [EducationOrganizationId] ASC, [StaffClassificationDescriptorId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffEducationOrganizationAssignmentAssociation]', N'StaffEducationOrganizationAssignmentAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffEducationOrganizationAssignmentAssociation_PK1]', N'StaffEducationOrganizationAssignmentAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[FK_StaffEducationOrganizationAssignmentAssociation_Credential]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_Credential]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([CredentialIdentifier] ASC, [StateOfIssueStateAbbreviationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([StaffClassificationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([EmploymentEducationOrganizationId] ASC, [EmploymentStatusDescriptorId] ASC, [EmploymentHireDate] ASC, [StaffUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[UX_StaffEducationOrganizationAssignmentAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffEducationOrganizationAssignmentAssociation_Id]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[IX_StaffEducationOrganizationAssignmentAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationAssignmentAssociation_EducationOrganizationId]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[IX_StaffEducationOrganizationAssignmentAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationAssignmentAssociation_AggregateId]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[IX_StaffEducationOrganizationAssignmentAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationAssignmentAssociation_StaffUSI]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationAssignmentAssociation].[UX_StaffEducationOrganizationAssignmentAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffEducationOrganizationAssignmentAssociation_ChangeVersion]
    ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffEducationOrganizationContactAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffEducationOrganizationContactAssociation] (
    [ContactTitle]            NVARCHAR (75)    NOT NULL,
    [EducationOrganizationId] BIGINT           NOT NULL,
    [StaffUSI]                INT              NOT NULL,
    [ContactTypeDescriptorId] INT              NULL,
    [ElectronicMailAddress]   NVARCHAR (128)   NOT NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffEducationOrganizationContactAssociation_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [StaffEducationOrganizationContactAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffEducationOrganizationContactAssociation_PK1] PRIMARY KEY CLUSTERED ([ContactTitle] ASC, [EducationOrganizationId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffEducationOrganizationContactAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffEducationOrganizationContactAssociation] ([ContactTitle], [EducationOrganizationId], [StaffUSI], [ContactTypeDescriptorId], [ElectronicMailAddress], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ContactTitle],
                 [EducationOrganizationId],
                 [StaffUSI],
                 [ContactTypeDescriptorId],
                 [ElectronicMailAddress],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffEducationOrganizationContactAssociation]
        ORDER BY [ContactTitle] ASC, [EducationOrganizationId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffEducationOrganizationContactAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffEducationOrganizationContactAssociation]', N'StaffEducationOrganizationContactAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffEducationOrganizationContactAssociation_PK1]', N'StaffEducationOrganizationContactAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([ContactTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[UX_StaffEducationOrganizationContactAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffEducationOrganizationContactAssociation_Id]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[IX_StaffEducationOrganizationContactAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationContactAssociation_EducationOrganizationId]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[IX_StaffEducationOrganizationContactAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationContactAssociation_AggregateId]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[IX_StaffEducationOrganizationContactAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationContactAssociation_StaffUSI]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationContactAssociation].[UX_StaffEducationOrganizationContactAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffEducationOrganizationContactAssociation_ChangeVersion]
    ON [edfi].[StaffEducationOrganizationContactAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffEducationOrganizationEmploymentAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffEducationOrganizationEmploymentAssociation] (
    [EducationOrganizationId]                   BIGINT           NOT NULL,
    [EmploymentStatusDescriptorId]              INT              NOT NULL,
    [HireDate]                                  DATE             NOT NULL,
    [StaffUSI]                                  INT              NOT NULL,
    [AnnualWage]                                MONEY            NULL,
    [CredentialIdentifier]                      NVARCHAR (60)    NULL,
    [Department]                                NVARCHAR (60)    NULL,
    [EndDate]                                   DATE             NULL,
    [FullTimeEquivalency]                       DECIMAL (5, 4)   NULL,
    [HourlyWage]                                MONEY            NULL,
    [OfferDate]                                 DATE             NULL,
    [SeparationDescriptorId]                    INT              NULL,
    [SeparationReasonDescriptorId]              INT              NULL,
    [StateOfIssueStateAbbreviationDescriptorId] INT              NULL,
    [Discriminator]                             NVARCHAR (128)   NULL,
    [CreateDate]                                DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                          DATETIME2 (7)    CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                        UNIQUEIDENTIFIER CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                               INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffEducationOrganizationEmploymentAssociation_AggSeq]) NOT NULL,
    [AggregateData]                             VARBINARY (8000) NULL,
    [ChangeVersion]                             BIGINT           CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffEducationOrganizationEmploymentAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [EmploymentStatusDescriptorId] ASC, [HireDate] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffEducationOrganizationEmploymentAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffEducationOrganizationEmploymentAssociation] ([EducationOrganizationId], [EmploymentStatusDescriptorId], [HireDate], [StaffUSI], [AnnualWage], [CredentialIdentifier], [Department], [EndDate], [FullTimeEquivalency], [HourlyWage], [OfferDate], [SeparationDescriptorId], [SeparationReasonDescriptorId], [StateOfIssueStateAbbreviationDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [EmploymentStatusDescriptorId],
                 [HireDate],
                 [StaffUSI],
                 [AnnualWage],
                 [CredentialIdentifier],
                 [Department],
                 [EndDate],
                 [FullTimeEquivalency],
                 [HourlyWage],
                 [OfferDate],
                 [SeparationDescriptorId],
                 [SeparationReasonDescriptorId],
                 [StateOfIssueStateAbbreviationDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffEducationOrganizationEmploymentAssociation]
        ORDER BY [EducationOrganizationId] ASC, [EmploymentStatusDescriptorId] ASC, [HireDate] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffEducationOrganizationEmploymentAssociation]', N'StaffEducationOrganizationEmploymentAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffEducationOrganizationEmploymentAssociation_PK1]', N'StaffEducationOrganizationEmploymentAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[FK_StaffEducationOrganizationEmploymentAssociation_Credential]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_Credential]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([CredentialIdentifier] ASC, [StateOfIssueStateAbbreviationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([EmploymentStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([SeparationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([SeparationReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[UX_StaffEducationOrganizationEmploymentAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffEducationOrganizationEmploymentAssociation_Id]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[IX_StaffEducationOrganizationEmploymentAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationEmploymentAssociation_EducationOrganizationId]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[IX_StaffEducationOrganizationEmploymentAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationEmploymentAssociation_AggregateId]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[IX_StaffEducationOrganizationEmploymentAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffEducationOrganizationEmploymentAssociation_StaffUSI]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffEducationOrganizationEmploymentAssociation].[UX_StaffEducationOrganizationEmploymentAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffEducationOrganizationEmploymentAssociation_ChangeVersion]
    ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffLeave]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffLeave] (
    [BeginDate]                           DATE             NOT NULL,
    [StaffLeaveEventCategoryDescriptorId] INT              NOT NULL,
    [StaffUSI]                            INT              NOT NULL,
    [EndDate]                             DATE             NULL,
    [Reason]                              NVARCHAR (40)    NULL,
    [SubstituteAssigned]                  BIT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [StaffLeave_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [StaffLeave_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [StaffLeave_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffLeave_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [StaffLeave_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffLeave_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [StaffLeaveEventCategoryDescriptorId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffLeave])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffLeave] ([BeginDate], [StaffLeaveEventCategoryDescriptorId], [StaffUSI], [EndDate], [Reason], [SubstituteAssigned], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [StaffLeaveEventCategoryDescriptorId],
                 [StaffUSI],
                 [EndDate],
                 [Reason],
                 [SubstituteAssigned],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffLeave]
        ORDER BY [BeginDate] ASC, [StaffLeaveEventCategoryDescriptorId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffLeave];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffLeave]', N'StaffLeave';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffLeave_PK1]', N'StaffLeave_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffLeave].[FK_StaffLeave_StaffLeaveEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffLeave_StaffLeaveEventCategoryDescriptor]
    ON [edfi].[StaffLeave]([StaffLeaveEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffLeave].[UX_StaffLeave_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffLeave_Id]
    ON [edfi].[StaffLeave]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffLeave].[IX_StaffLeave_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffLeave_AggregateId]
    ON [edfi].[StaffLeave]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffLeave].[IX_StaffLeave_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffLeave_StaffUSI]
    ON [edfi].[StaffLeave]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffLeave].[UX_StaffLeave_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffLeave_ChangeVersion]
    ON [edfi].[StaffLeave]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffProgramAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffProgramAssociation] (
    [BeginDate]                      DATE             NOT NULL,
    [ProgramEducationOrganizationId] BIGINT           NOT NULL,
    [ProgramName]                    NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]        INT              NOT NULL,
    [StaffUSI]                       INT              NOT NULL,
    [EndDate]                        DATE             NULL,
    [StudentRecordAccess]            BIT              NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [StaffProgramAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [StaffProgramAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [StaffProgramAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffProgramAssociation_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [StaffProgramAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffProgramAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffProgramAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffProgramAssociation] ([BeginDate], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StaffUSI], [EndDate], [StudentRecordAccess], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [ProgramEducationOrganizationId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StaffUSI],
                 [EndDate],
                 [StudentRecordAccess],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffProgramAssociation]
        ORDER BY [BeginDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffProgramAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffProgramAssociation]', N'StaffProgramAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffProgramAssociation_PK1]', N'StaffProgramAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffProgramAssociation].[FK_StaffProgramAssociation_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffProgramAssociation_Program]
    ON [edfi].[StaffProgramAssociation]([ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffProgramAssociation].[UX_StaffProgramAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffProgramAssociation_Id]
    ON [edfi].[StaffProgramAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffProgramAssociation].[IX_StaffProgramAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffProgramAssociation_AggregateId]
    ON [edfi].[StaffProgramAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffProgramAssociation].[IX_StaffProgramAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffProgramAssociation_StaffUSI]
    ON [edfi].[StaffProgramAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffProgramAssociation].[UX_StaffProgramAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffProgramAssociation_ChangeVersion]
    ON [edfi].[StaffProgramAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffSchoolAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffSchoolAssociation] (
    [ProgramAssignmentDescriptorId] INT              NOT NULL,
    [SchoolId]                      BIGINT           NOT NULL,
    [StaffUSI]                      INT              NOT NULL,
    [CalendarCode]                  NVARCHAR (60)    NULL,
    [SchoolYear]                    SMALLINT         NULL,
    [Discriminator]                 NVARCHAR (128)   NULL,
    [CreateDate]                    DATETIME2 (7)    CONSTRAINT [StaffSchoolAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]              DATETIME2 (7)    CONSTRAINT [StaffSchoolAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                            UNIQUEIDENTIFIER CONSTRAINT [StaffSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                   INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffSchoolAssociation_AggSeq]) NOT NULL,
    [AggregateData]                 VARBINARY (8000) NULL,
    [ChangeVersion]                 BIGINT           CONSTRAINT [StaffSchoolAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffSchoolAssociation_PK1] PRIMARY KEY CLUSTERED ([ProgramAssignmentDescriptorId] ASC, [SchoolId] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffSchoolAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffSchoolAssociation] ([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI], [CalendarCode], [SchoolYear], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ProgramAssignmentDescriptorId],
                 [SchoolId],
                 [StaffUSI],
                 [CalendarCode],
                 [SchoolYear],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffSchoolAssociation]
        ORDER BY [ProgramAssignmentDescriptorId] ASC, [SchoolId] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffSchoolAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffSchoolAssociation]', N'StaffSchoolAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffSchoolAssociation_PK1]', N'StaffSchoolAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[FK_StaffSchoolAssociation_Calendar]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_Calendar]
    ON [edfi].[StaffSchoolAssociation]([CalendarCode] ASC, [SchoolId] ASC, [SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[FK_StaffSchoolAssociation_ProgramAssignmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor]
    ON [edfi].[StaffSchoolAssociation]([ProgramAssignmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[FK_StaffSchoolAssociation_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_SchoolYearType]
    ON [edfi].[StaffSchoolAssociation]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[UX_StaffSchoolAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffSchoolAssociation_Id]
    ON [edfi].[StaffSchoolAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[IX_StaffSchoolAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSchoolAssociation_SchoolId]
    ON [edfi].[StaffSchoolAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[IX_StaffSchoolAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSchoolAssociation_AggregateId]
    ON [edfi].[StaffSchoolAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[IX_StaffSchoolAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSchoolAssociation_StaffUSI]
    ON [edfi].[StaffSchoolAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffSchoolAssociation].[UX_StaffSchoolAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffSchoolAssociation_ChangeVersion]
    ON [edfi].[StaffSchoolAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StaffSectionAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StaffSectionAssociation] (
    [BeginDate]                       DATE             NOT NULL,
    [LocalCourseCode]                 NVARCHAR (60)    NOT NULL,
    [SchoolId]                        BIGINT           NOT NULL,
    [SchoolYear]                      SMALLINT         NOT NULL,
    [SectionIdentifier]               NVARCHAR (255)   NOT NULL,
    [SessionName]                     NVARCHAR (60)    NOT NULL,
    [StaffUSI]                        INT              NOT NULL,
    [ClassroomPositionDescriptorId]   INT              NOT NULL,
    [EndDate]                         DATE             NULL,
    [HighlyQualifiedTeacher]          BIT              NULL,
    [PercentageContribution]          DECIMAL (5, 4)   NULL,
    [TeacherStudentDataLinkExclusion] BIT              NULL,
    [Discriminator]                   NVARCHAR (128)   NULL,
    [CreateDate]                      DATETIME2 (7)    CONSTRAINT [StaffSectionAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                DATETIME2 (7)    CONSTRAINT [StaffSectionAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                              UNIQUEIDENTIFIER CONSTRAINT [StaffSectionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[StaffSectionAssociation_AggSeq]) NOT NULL,
    [AggregateData]                   VARBINARY (8000) NULL,
    [ChangeVersion]                   BIGINT           CONSTRAINT [StaffSectionAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StaffSectionAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StaffUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StaffSectionAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StaffSectionAssociation] ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StaffUSI], [ClassroomPositionDescriptorId], [EndDate], [HighlyQualifiedTeacher], [PercentageContribution], [TeacherStudentDataLinkExclusion], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [StaffUSI],
                 [ClassroomPositionDescriptorId],
                 [EndDate],
                 [HighlyQualifiedTeacher],
                 [PercentageContribution],
                 [TeacherStudentDataLinkExclusion],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StaffSectionAssociation]
        ORDER BY [BeginDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StaffUSI] ASC;
    END

DROP TABLE [edfi].[StaffSectionAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StaffSectionAssociation]', N'StaffSectionAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StaffSectionAssociation_PK1]', N'StaffSectionAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[FK_StaffSectionAssociation_ClassroomPositionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffSectionAssociation_ClassroomPositionDescriptor]
    ON [edfi].[StaffSectionAssociation]([ClassroomPositionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[FK_StaffSectionAssociation_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_StaffSectionAssociation_Section]
    ON [edfi].[StaffSectionAssociation]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[UX_StaffSectionAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StaffSectionAssociation_Id]
    ON [edfi].[StaffSectionAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[IX_StaffSectionAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSectionAssociation_SchoolId]
    ON [edfi].[StaffSectionAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[IX_StaffSectionAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSectionAssociation_AggregateId]
    ON [edfi].[StaffSectionAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[IX_StaffSectionAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StaffSectionAssociation_StaffUSI]
    ON [edfi].[StaffSectionAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StaffSectionAssociation].[UX_StaffSectionAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StaffSectionAssociation_ChangeVersion]
    ON [edfi].[StaffSectionAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Student]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Student] (
    [StudentUSI]                         INT              IDENTITY (1, 1) NOT NULL,
    [BirthCity]                          NVARCHAR (30)    NULL,
    [BirthCountryDescriptorId]           INT              NULL,
    [BirthDate]                          DATE             NOT NULL,
    [BirthInternationalProvince]         NVARCHAR (150)   NULL,
    [BirthSexDescriptorId]               INT              NULL,
    [BirthStateAbbreviationDescriptorId] INT              NULL,
    [CitizenshipStatusDescriptorId]      INT              NULL,
    [DateEnteredUS]                      DATE             NULL,
    [FirstName]                          NVARCHAR (75)    NOT NULL,
    [GenerationCodeSuffix]               NVARCHAR (10)    NULL,
    [LastSurname]                        NVARCHAR (75)    NOT NULL,
    [MaidenName]                         NVARCHAR (75)    NULL,
    [MiddleName]                         NVARCHAR (75)    NULL,
    [MultipleBirthStatus]                BIT              NULL,
    [PersonalTitlePrefix]                NVARCHAR (30)    NULL,
    [PersonId]                           NVARCHAR (32)    NULL,
    [PreferredFirstName]                 NVARCHAR (75)    NULL,
    [PreferredLastSurname]               NVARCHAR (75)    NULL,
    [SourceSystemDescriptorId]           INT              NULL,
    [StudentUniqueId]                    NVARCHAR (32)    NOT NULL,
    [Discriminator]                      NVARCHAR (128)   NULL,
    [CreateDate]                         DATETIME2 (7)    CONSTRAINT [Student_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                   DATETIME2 (7)    CONSTRAINT [Student_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                 UNIQUEIDENTIFIER CONSTRAINT [Student_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                        INT              DEFAULT ( NEXT VALUE FOR [edfi].[Student_AggSeq]) NOT NULL,
    [AggregateData]                      VARBINARY (8000) NULL,
    [ChangeVersion]                      BIGINT           CONSTRAINT [Student_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Student_PK1] PRIMARY KEY CLUSTERED ([StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Student])
    BEGIN
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Student] ON;
        INSERT INTO [edfi].[tmp_ms_xx_Student] ([StudentUSI], [BirthCity], [BirthCountryDescriptorId], [BirthDate], [BirthInternationalProvince], [BirthSexDescriptorId], [BirthStateAbbreviationDescriptorId], [CitizenshipStatusDescriptorId], [DateEnteredUS], [FirstName], [GenerationCodeSuffix], [LastSurname], [MaidenName], [MiddleName], [MultipleBirthStatus], [PersonalTitlePrefix], [PersonId], [PreferredFirstName], [PreferredLastSurname], [SourceSystemDescriptorId], [StudentUniqueId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [StudentUSI],
                 [BirthCity],
                 [BirthCountryDescriptorId],
                 [BirthDate],
                 [BirthInternationalProvince],
                 [BirthSexDescriptorId],
                 [BirthStateAbbreviationDescriptorId],
                 [CitizenshipStatusDescriptorId],
                 [DateEnteredUS],
                 [FirstName],
                 [GenerationCodeSuffix],
                 [LastSurname],
                 [MaidenName],
                 [MiddleName],
                 [MultipleBirthStatus],
                 [PersonalTitlePrefix],
                 [PersonId],
                 [PreferredFirstName],
                 [PreferredLastSurname],
                 [SourceSystemDescriptorId],
                 [StudentUniqueId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Student]
        ORDER BY [StudentUSI] ASC;
        SET IDENTITY_INSERT [edfi].[tmp_ms_xx_Student] OFF;
    END

DROP TABLE [edfi].[Student];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Student]', N'Student';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Student_PK1]', N'Student_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Student].[Student_UI_StudentUniqueId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Student_UI_StudentUniqueId]
    ON [edfi].[Student]([StudentUniqueId] ASC)
    INCLUDE([StudentUSI]);


GO
PRINT N'Creating Index [edfi].[Student].[FK_Student_CitizenshipStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Student_CitizenshipStatusDescriptor]
    ON [edfi].[Student]([CitizenshipStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[FK_Student_CountryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Student_CountryDescriptor]
    ON [edfi].[Student]([BirthCountryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[FK_Student_Person]...';


GO
CREATE NONCLUSTERED INDEX [FK_Student_Person]
    ON [edfi].[Student]([PersonId] ASC, [SourceSystemDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[FK_Student_SexDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Student_SexDescriptor]
    ON [edfi].[Student]([BirthSexDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[FK_Student_StateAbbreviationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Student_StateAbbreviationDescriptor]
    ON [edfi].[Student]([BirthStateAbbreviationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[UX_Student_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Student_Id]
    ON [edfi].[Student]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Student].[IX_Student_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Student_AggregateId]
    ON [edfi].[Student]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Student].[IX_Student_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_Student_StudentUSI]
    ON [edfi].[Student]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Student].[UX_Student_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Student_ChangeVersion]
    ON [edfi].[Student]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentAcademicRecord]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentAcademicRecord] (
    [EducationOrganizationId]                   BIGINT           NOT NULL,
    [SchoolYear]                                SMALLINT         NOT NULL,
    [StudentUSI]                                INT              NOT NULL,
    [TermDescriptorId]                          INT              NOT NULL,
    [CumulativeAttemptedCreditConversion]       DECIMAL (9, 2)   NULL,
    [CumulativeAttemptedCredits]                DECIMAL (9, 3)   NULL,
    [CumulativeAttemptedCreditTypeDescriptorId] INT              NULL,
    [CumulativeEarnedCreditConversion]          DECIMAL (9, 2)   NULL,
    [CumulativeEarnedCredits]                   DECIMAL (9, 3)   NULL,
    [CumulativeEarnedCreditTypeDescriptorId]    INT              NULL,
    [ProjectedGraduationDate]                   DATE             NULL,
    [SessionAttemptedCreditConversion]          DECIMAL (9, 2)   NULL,
    [SessionAttemptedCredits]                   DECIMAL (9, 3)   NULL,
    [SessionAttemptedCreditTypeDescriptorId]    INT              NULL,
    [SessionEarnedCreditConversion]             DECIMAL (9, 2)   NULL,
    [SessionEarnedCredits]                      DECIMAL (9, 3)   NULL,
    [SessionEarnedCreditTypeDescriptorId]       INT              NULL,
    [Discriminator]                             NVARCHAR (128)   NULL,
    [CreateDate]                                DATETIME2 (7)    CONSTRAINT [StudentAcademicRecord_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                          DATETIME2 (7)    CONSTRAINT [StudentAcademicRecord_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                        UNIQUEIDENTIFIER CONSTRAINT [StudentAcademicRecord_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                               INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentAcademicRecord_AggSeq]) NOT NULL,
    [AggregateData]                             VARBINARY (8000) NULL,
    [ChangeVersion]                             BIGINT           CONSTRAINT [StudentAcademicRecord_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentAcademicRecord_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentAcademicRecord])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId], [CumulativeAttemptedCreditConversion], [CumulativeAttemptedCredits], [CumulativeAttemptedCreditTypeDescriptorId], [CumulativeEarnedCreditConversion], [CumulativeEarnedCredits], [CumulativeEarnedCreditTypeDescriptorId], [ProjectedGraduationDate], [SessionAttemptedCreditConversion], [SessionAttemptedCredits], [SessionAttemptedCreditTypeDescriptorId], [SessionEarnedCreditConversion], [SessionEarnedCredits], [SessionEarnedCreditTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [SchoolYear],
                 [StudentUSI],
                 [TermDescriptorId],
                 [CumulativeAttemptedCreditConversion],
                 [CumulativeAttemptedCredits],
                 [CumulativeAttemptedCreditTypeDescriptorId],
                 [CumulativeEarnedCreditConversion],
                 [CumulativeEarnedCredits],
                 [CumulativeEarnedCreditTypeDescriptorId],
                 [ProjectedGraduationDate],
                 [SessionAttemptedCreditConversion],
                 [SessionAttemptedCredits],
                 [SessionAttemptedCreditTypeDescriptorId],
                 [SessionEarnedCreditConversion],
                 [SessionEarnedCredits],
                 [SessionEarnedCreditTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentAcademicRecord]
        ORDER BY [EducationOrganizationId] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC;
    END

DROP TABLE [edfi].[StudentAcademicRecord];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentAcademicRecord]', N'StudentAcademicRecord';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentAcademicRecord_PK1]', N'StudentAcademicRecord_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_CreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditTypeDescriptor]
    ON [edfi].[StudentAcademicRecord]([CumulativeEarnedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_CreditTypeDescriptor1]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditTypeDescriptor1]
    ON [edfi].[StudentAcademicRecord]([CumulativeAttemptedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_CreditTypeDescriptor2]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditTypeDescriptor2]
    ON [edfi].[StudentAcademicRecord]([SessionEarnedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_CreditTypeDescriptor3]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditTypeDescriptor3]
    ON [edfi].[StudentAcademicRecord]([SessionAttemptedCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_SchoolYearType]
    ON [edfi].[StudentAcademicRecord]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[FK_StudentAcademicRecord_TermDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_TermDescriptor]
    ON [edfi].[StudentAcademicRecord]([TermDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[UX_StudentAcademicRecord_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentAcademicRecord_Id]
    ON [edfi].[StudentAcademicRecord]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[IX_StudentAcademicRecord_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAcademicRecord_EducationOrganizationId]
    ON [edfi].[StudentAcademicRecord]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[IX_StudentAcademicRecord_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAcademicRecord_AggregateId]
    ON [edfi].[StudentAcademicRecord]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[IX_StudentAcademicRecord_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAcademicRecord_StudentUSI]
    ON [edfi].[StudentAcademicRecord]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAcademicRecord].[UX_StudentAcademicRecord_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentAcademicRecord_ChangeVersion]
    ON [edfi].[StudentAcademicRecord]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentAssessment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentAssessment] (
    [AssessmentIdentifier]                  NVARCHAR (60)    NOT NULL,
    [Namespace]                             NVARCHAR (255)   NOT NULL,
    [StudentAssessmentIdentifier]           NVARCHAR (60)    NOT NULL,
    [StudentUSI]                            INT              NOT NULL,
    [AdministrationDate]                    DATETIME2 (7)    NULL,
    [AdministrationEndDate]                 DATETIME2 (7)    NULL,
    [AdministrationEnvironmentDescriptorId] INT              NULL,
    [AdministrationLanguageDescriptorId]    INT              NULL,
    [AssessedMinutes]                       INT              NULL,
    [EventCircumstanceDescriptorId]         INT              NULL,
    [EventDescription]                      NVARCHAR (1024)  NULL,
    [PlatformTypeDescriptorId]              INT              NULL,
    [ReasonNotTestedDescriptorId]           INT              NULL,
    [ReportedSchoolId]                      BIGINT           NULL,
    [ReportedSchoolIdentifier]              NVARCHAR (60)    NULL,
    [RetestIndicatorDescriptorId]           INT              NULL,
    [SchoolYear]                            SMALLINT         NULL,
    [SerialNumber]                          NVARCHAR (60)    NULL,
    [WhenAssessedGradeLevelDescriptorId]    INT              NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [StudentAssessment_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [StudentAssessment_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [StudentAssessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentAssessment_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [StudentAssessment_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentAssessment_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [Namespace] ASC, [StudentAssessmentIdentifier] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentAssessment])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI], [AdministrationDate], [AdministrationEndDate], [AdministrationEnvironmentDescriptorId], [AdministrationLanguageDescriptorId], [AssessedMinutes], [EventCircumstanceDescriptorId], [EventDescription], [PlatformTypeDescriptorId], [ReasonNotTestedDescriptorId], [ReportedSchoolId], [ReportedSchoolIdentifier], [RetestIndicatorDescriptorId], [SchoolYear], [SerialNumber], [WhenAssessedGradeLevelDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [Namespace],
                 [StudentAssessmentIdentifier],
                 [StudentUSI],
                 [AdministrationDate],
                 [AdministrationEndDate],
                 [AdministrationEnvironmentDescriptorId],
                 [AdministrationLanguageDescriptorId],
                 [AssessedMinutes],
                 [EventCircumstanceDescriptorId],
                 [EventDescription],
                 [PlatformTypeDescriptorId],
                 [ReasonNotTestedDescriptorId],
                 [ReportedSchoolId],
                 [ReportedSchoolIdentifier],
                 [RetestIndicatorDescriptorId],
                 [SchoolYear],
                 [SerialNumber],
                 [WhenAssessedGradeLevelDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentAssessment]
        ORDER BY [AssessmentIdentifier] ASC, [Namespace] ASC, [StudentAssessmentIdentifier] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentAssessment];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentAssessment]', N'StudentAssessment';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentAssessment_PK1]', N'StudentAssessment_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_AdministrationEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_AdministrationEnvironmentDescriptor]
    ON [edfi].[StudentAssessment]([AdministrationEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_Assessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_Assessment]
    ON [edfi].[StudentAssessment]([AssessmentIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_EventCircumstanceDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_EventCircumstanceDescriptor]
    ON [edfi].[StudentAssessment]([EventCircumstanceDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_GradeLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_GradeLevelDescriptor]
    ON [edfi].[StudentAssessment]([WhenAssessedGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_LanguageDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_LanguageDescriptor]
    ON [edfi].[StudentAssessment]([AdministrationLanguageDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_PlatformTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_PlatformTypeDescriptor]
    ON [edfi].[StudentAssessment]([PlatformTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_ReasonNotTestedDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_ReasonNotTestedDescriptor]
    ON [edfi].[StudentAssessment]([ReasonNotTestedDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_RetestIndicatorDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_RetestIndicatorDescriptor]
    ON [edfi].[StudentAssessment]([RetestIndicatorDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_School]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_School]
    ON [edfi].[StudentAssessment]([ReportedSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[FK_StudentAssessment_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessment_SchoolYearType]
    ON [edfi].[StudentAssessment]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[UX_StudentAssessment_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentAssessment_Id]
    ON [edfi].[StudentAssessment]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[IX_StudentAssessment_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessment_AggregateId]
    ON [edfi].[StudentAssessment]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[IX_StudentAssessment_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessment_StudentUSI]
    ON [edfi].[StudentAssessment]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessment].[UX_StudentAssessment_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentAssessment_ChangeVersion]
    ON [edfi].[StudentAssessment]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentAssessmentEducationOrganizationAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentAssessmentEducationOrganizationAssociation] (
    [AssessmentIdentifier]                             NVARCHAR (60)    NOT NULL,
    [EducationOrganizationAssociationTypeDescriptorId] INT              NOT NULL,
    [EducationOrganizationId]                          BIGINT           NOT NULL,
    [Namespace]                                        NVARCHAR (255)   NOT NULL,
    [StudentAssessmentIdentifier]                      NVARCHAR (60)    NOT NULL,
    [StudentUSI]                                       INT              NOT NULL,
    [SchoolYear]                                       SMALLINT         NULL,
    [Discriminator]                                    NVARCHAR (128)   NULL,
    [CreateDate]                                       DATETIME2 (7)    CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                 DATETIME2 (7)    CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                               UNIQUEIDENTIFIER CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                      INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentAssessmentEducationOrganizationAssociation_AggSeq]) NOT NULL,
    [AggregateData]                                    VARBINARY (8000) NULL,
    [ChangeVersion]                                    BIGINT           CONSTRAINT [StudentAssessmentEducationOrganizationAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentAssessmentEducationOrganizationAssociation_PK1] PRIMARY KEY CLUSTERED ([AssessmentIdentifier] ASC, [EducationOrganizationAssociationTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentAssessmentIdentifier] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentAssessmentEducationOrganizationAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentAssessmentEducationOrganizationAssociation] ([AssessmentIdentifier], [EducationOrganizationAssociationTypeDescriptorId], [EducationOrganizationId], [Namespace], [StudentAssessmentIdentifier], [StudentUSI], [SchoolYear], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AssessmentIdentifier],
                 [EducationOrganizationAssociationTypeDescriptorId],
                 [EducationOrganizationId],
                 [Namespace],
                 [StudentAssessmentIdentifier],
                 [StudentUSI],
                 [SchoolYear],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentAssessmentEducationOrganizationAssociation]
        ORDER BY [AssessmentIdentifier] ASC, [EducationOrganizationAssociationTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [StudentAssessmentIdentifier] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentAssessmentEducationOrganizationAssociation]', N'StudentAssessmentEducationOrganizationAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentAssessmentEducationOrganizationAssociation_PK1]', N'StudentAssessmentEducationOrganizationAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([EducationOrganizationAssociationTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([AssessmentIdentifier] ASC, [Namespace] ASC, [StudentAssessmentIdentifier] ASC, [StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[UX_StudentAssessmentEducationOrganizationAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentAssessmentEducationOrganizationAssociation_Id]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[IX_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationId]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[IX_StudentAssessmentEducationOrganizationAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentEducationOrganizationAssociation_AggregateId]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[IX_StudentAssessmentEducationOrganizationAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentAssessmentEducationOrganizationAssociation_StudentUSI]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentAssessmentEducationOrganizationAssociation].[UX_StudentAssessmentEducationOrganizationAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentAssessmentEducationOrganizationAssociation_ChangeVersion]
    ON [edfi].[StudentAssessmentEducationOrganizationAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentCohortAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentCohortAssociation] (
    [BeginDate]               DATE             NOT NULL,
    [CohortIdentifier]        NVARCHAR (36)    NOT NULL,
    [EducationOrganizationId] BIGINT           NOT NULL,
    [StudentUSI]              INT              NOT NULL,
    [EndDate]                 DATE             NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [StudentCohortAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [StudentCohortAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [StudentCohortAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentCohortAssociation_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [StudentCohortAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentCohortAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [CohortIdentifier] ASC, [EducationOrganizationId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentCohortAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentCohortAssociation] ([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUSI], [EndDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [CohortIdentifier],
                 [EducationOrganizationId],
                 [StudentUSI],
                 [EndDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentCohortAssociation]
        ORDER BY [BeginDate] ASC, [CohortIdentifier] ASC, [EducationOrganizationId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentCohortAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentCohortAssociation]', N'StudentCohortAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentCohortAssociation_PK1]', N'StudentCohortAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[FK_StudentCohortAssociation_Cohort]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentCohortAssociation_Cohort]
    ON [edfi].[StudentCohortAssociation]([CohortIdentifier] ASC, [EducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[UX_StudentCohortAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentCohortAssociation_Id]
    ON [edfi].[StudentCohortAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[IX_StudentCohortAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentCohortAssociation_EducationOrganizationId]
    ON [edfi].[StudentCohortAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[IX_StudentCohortAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentCohortAssociation_AggregateId]
    ON [edfi].[StudentCohortAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[IX_StudentCohortAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentCohortAssociation_StudentUSI]
    ON [edfi].[StudentCohortAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentCohortAssociation].[UX_StudentCohortAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentCohortAssociation_ChangeVersion]
    ON [edfi].[StudentCohortAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentCompetencyObjective]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentCompetencyObjective] (
    [GradingPeriodDescriptorId]        INT              NOT NULL,
    [GradingPeriodName]                NVARCHAR (60)    NOT NULL,
    [GradingPeriodSchoolId]            BIGINT           NOT NULL,
    [GradingPeriodSchoolYear]          SMALLINT         NOT NULL,
    [ObjectiveEducationOrganizationId] BIGINT           NOT NULL,
    [Objective]                        NVARCHAR (60)    NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  INT              NOT NULL,
    [StudentUSI]                       INT              NOT NULL,
    [CompetencyLevelDescriptorId]      INT              NOT NULL,
    [DiagnosticStatement]              NVARCHAR (1024)  NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    CONSTRAINT [StudentCompetencyObjective_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    CONSTRAINT [StudentCompetencyObjective_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                               UNIQUEIDENTIFIER CONSTRAINT [StudentCompetencyObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                      INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentCompetencyObjective_AggSeq]) NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           CONSTRAINT [StudentCompetencyObjective_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentCompetencyObjective_PK1] PRIMARY KEY CLUSTERED ([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC, [ObjectiveEducationOrganizationId] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentCompetencyObjective])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentCompetencyObjective] ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI], [CompetencyLevelDescriptorId], [DiagnosticStatement], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [GradingPeriodDescriptorId],
                 [GradingPeriodName],
                 [GradingPeriodSchoolId],
                 [GradingPeriodSchoolYear],
                 [ObjectiveEducationOrganizationId],
                 [Objective],
                 [ObjectiveGradeLevelDescriptorId],
                 [StudentUSI],
                 [CompetencyLevelDescriptorId],
                 [DiagnosticStatement],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentCompetencyObjective]
        ORDER BY [GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC, [ObjectiveEducationOrganizationId] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentCompetencyObjective];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentCompetencyObjective]', N'StudentCompetencyObjective';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentCompetencyObjective_PK1]', N'StudentCompetencyObjective_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[FK_StudentCompetencyObjective_CompetencyLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_CompetencyLevelDescriptor]
    ON [edfi].[StudentCompetencyObjective]([CompetencyLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[FK_StudentCompetencyObjective_CompetencyObjective]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_CompetencyObjective]
    ON [edfi].[StudentCompetencyObjective]([ObjectiveEducationOrganizationId] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[FK_StudentCompetencyObjective_GradingPeriod]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_GradingPeriod]
    ON [edfi].[StudentCompetencyObjective]([GradingPeriodDescriptorId] ASC, [GradingPeriodName] ASC, [GradingPeriodSchoolId] ASC, [GradingPeriodSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[UX_StudentCompetencyObjective_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentCompetencyObjective_Id]
    ON [edfi].[StudentCompetencyObjective]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[IX_StudentCompetencyObjective_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentCompetencyObjective_AggregateId]
    ON [edfi].[StudentCompetencyObjective]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[IX_StudentCompetencyObjective_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentCompetencyObjective_StudentUSI]
    ON [edfi].[StudentCompetencyObjective]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentCompetencyObjective].[UX_StudentCompetencyObjective_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentCompetencyObjective_ChangeVersion]
    ON [edfi].[StudentCompetencyObjective]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentContactAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentContactAssociation] (
    [ContactUSI]             INT              NOT NULL,
    [StudentUSI]             INT              NOT NULL,
    [ContactPriority]        INT              NULL,
    [ContactRestrictions]    NVARCHAR (250)   NULL,
    [EmergencyContactStatus] BIT              NULL,
    [LegalGuardian]          BIT              NULL,
    [LivesWith]              BIT              NULL,
    [PrimaryContactStatus]   BIT              NULL,
    [RelationDescriptorId]   INT              NULL,
    [Discriminator]          NVARCHAR (128)   NULL,
    [CreateDate]             DATETIME2 (7)    CONSTRAINT [StudentContactAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]       DATETIME2 (7)    CONSTRAINT [StudentContactAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                     UNIQUEIDENTIFIER CONSTRAINT [StudentContactAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]            INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentContactAssociation_AggSeq]) NOT NULL,
    [AggregateData]          VARBINARY (8000) NULL,
    [ChangeVersion]          BIGINT           CONSTRAINT [StudentContactAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentContactAssociation_PK1] PRIMARY KEY CLUSTERED ([ContactUSI] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentContactAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentContactAssociation] ([ContactUSI], [StudentUSI], [ContactPriority], [ContactRestrictions], [EmergencyContactStatus], [LegalGuardian], [LivesWith], [PrimaryContactStatus], [RelationDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ContactUSI],
                 [StudentUSI],
                 [ContactPriority],
                 [ContactRestrictions],
                 [EmergencyContactStatus],
                 [LegalGuardian],
                 [LivesWith],
                 [PrimaryContactStatus],
                 [RelationDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentContactAssociation]
        ORDER BY [ContactUSI] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentContactAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentContactAssociation]', N'StudentContactAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentContactAssociation_PK1]', N'StudentContactAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[FK_StudentContactAssociation_Contact]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentContactAssociation_Contact]
    ON [edfi].[StudentContactAssociation]([ContactUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[FK_StudentContactAssociation_RelationDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentContactAssociation_RelationDescriptor]
    ON [edfi].[StudentContactAssociation]([RelationDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[FK_StudentContactAssociation_Student]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentContactAssociation_Student]
    ON [edfi].[StudentContactAssociation]([StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[UX_StudentContactAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentContactAssociation_Id]
    ON [edfi].[StudentContactAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[IX_StudentContactAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentContactAssociation_AggregateId]
    ON [edfi].[StudentContactAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[IX_StudentContactAssociation_ContactUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentContactAssociation_ContactUSI]
    ON [edfi].[StudentContactAssociation]([ContactUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[IX_StudentContactAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentContactAssociation_StudentUSI]
    ON [edfi].[StudentContactAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentContactAssociation].[UX_StudentContactAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentContactAssociation_ChangeVersion]
    ON [edfi].[StudentContactAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentDisciplineIncidentBehaviorAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentDisciplineIncidentBehaviorAssociation] (
    [BehaviorDescriptorId]        INT              NOT NULL,
    [IncidentIdentifier]          NVARCHAR (36)    NOT NULL,
    [SchoolId]                    BIGINT           NOT NULL,
    [StudentUSI]                  INT              NOT NULL,
    [BehaviorDetailedDescription] NVARCHAR (1024)  NULL,
    [Discriminator]               NVARCHAR (128)   NULL,
    [CreateDate]                  DATETIME2 (7)    CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]            DATETIME2 (7)    CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                          UNIQUEIDENTIFIER CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentDisciplineIncidentBehaviorAssociation_AggSeq]) NOT NULL,
    [AggregateData]               VARBINARY (8000) NULL,
    [ChangeVersion]               BIGINT           CONSTRAINT [StudentDisciplineIncidentBehaviorAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentDisciplineIncidentBehaviorAssociation_PK1] PRIMARY KEY CLUSTERED ([BehaviorDescriptorId] ASC, [IncidentIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentDisciplineIncidentBehaviorAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentDisciplineIncidentBehaviorAssociation] ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI], [BehaviorDetailedDescription], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BehaviorDescriptorId],
                 [IncidentIdentifier],
                 [SchoolId],
                 [StudentUSI],
                 [BehaviorDetailedDescription],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentDisciplineIncidentBehaviorAssociation]
        ORDER BY [BehaviorDescriptorId] ASC, [IncidentIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentDisciplineIncidentBehaviorAssociation]', N'StudentDisciplineIncidentBehaviorAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentDisciplineIncidentBehaviorAssociation_PK1]', N'StudentDisciplineIncidentBehaviorAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([BehaviorDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([IncidentIdentifier] ASC, [SchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[UX_StudentDisciplineIncidentBehaviorAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentDisciplineIncidentBehaviorAssociation_Id]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[IX_StudentDisciplineIncidentBehaviorAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentBehaviorAssociation_SchoolId]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[IX_StudentDisciplineIncidentBehaviorAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentBehaviorAssociation_AggregateId]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[IX_StudentDisciplineIncidentBehaviorAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentBehaviorAssociation_StudentUSI]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentBehaviorAssociation].[UX_StudentDisciplineIncidentBehaviorAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentDisciplineIncidentBehaviorAssociation_ChangeVersion]
    ON [edfi].[StudentDisciplineIncidentBehaviorAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentDisciplineIncidentNonOffenderAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentDisciplineIncidentNonOffenderAssociation] (
    [IncidentIdentifier] NVARCHAR (36)    NOT NULL,
    [SchoolId]           BIGINT           NOT NULL,
    [StudentUSI]         INT              NOT NULL,
    [Discriminator]      NVARCHAR (128)   NULL,
    [CreateDate]         DATETIME2 (7)    CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]   DATETIME2 (7)    CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                 UNIQUEIDENTIFIER CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]        INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentDisciplineIncidentNonOffenderAssociation_AggSeq]) NOT NULL,
    [AggregateData]      VARBINARY (8000) NULL,
    [ChangeVersion]      BIGINT           CONSTRAINT [StudentDisciplineIncidentNonOffenderAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentDisciplineIncidentNonOffenderAssociation_PK1] PRIMARY KEY CLUSTERED ([IncidentIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentDisciplineIncidentNonOffenderAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentDisciplineIncidentNonOffenderAssociation] ([IncidentIdentifier], [SchoolId], [StudentUSI], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [IncidentIdentifier],
                 [SchoolId],
                 [StudentUSI],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentDisciplineIncidentNonOffenderAssociation]
        ORDER BY [IncidentIdentifier] ASC, [SchoolId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentDisciplineIncidentNonOffenderAssociation]', N'StudentDisciplineIncidentNonOffenderAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentDisciplineIncidentNonOffenderAssociation_PK1]', N'StudentDisciplineIncidentNonOffenderAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([IncidentIdentifier] ASC, [SchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[UX_StudentDisciplineIncidentNonOffenderAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentDisciplineIncidentNonOffenderAssociation_Id]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[IX_StudentDisciplineIncidentNonOffenderAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentNonOffenderAssociation_SchoolId]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[IX_StudentDisciplineIncidentNonOffenderAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentNonOffenderAssociation_AggregateId]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[IX_StudentDisciplineIncidentNonOffenderAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentDisciplineIncidentNonOffenderAssociation_StudentUSI]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[UX_StudentDisciplineIncidentNonOffenderAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentDisciplineIncidentNonOffenderAssociation_ChangeVersion]
    ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentEducationOrganizationAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentEducationOrganizationAssociation] (
    [EducationOrganizationId]                         BIGINT           NOT NULL,
    [StudentUSI]                                      INT              NOT NULL,
    [BarrierToInternetAccessInResidenceDescriptorId]  INT              NULL,
    [GenderIdentity]                                  NVARCHAR (60)    NULL,
    [HispanicLatinoEthnicity]                         BIT              NULL,
    [InternetAccessInResidence]                       BIT              NULL,
    [InternetAccessTypeInResidenceDescriptorId]       INT              NULL,
    [InternetPerformanceInResidenceDescriptorId]      INT              NULL,
    [LimitedEnglishProficiencyDescriptorId]           INT              NULL,
    [LoginId]                                         NVARCHAR (60)    NULL,
    [PrimaryLearningDeviceAccessDescriptorId]         INT              NULL,
    [PrimaryLearningDeviceAwayFromSchoolDescriptorId] INT              NULL,
    [PrimaryLearningDeviceProviderDescriptorId]       INT              NULL,
    [ProfileThumbnail]                                NVARCHAR (255)   NULL,
    [SexDescriptorId]                                 INT              NULL,
    [SupporterMilitaryConnectionDescriptorId]         INT              NULL,
    [Discriminator]                                   NVARCHAR (128)   NULL,
    [CreateDate]                                      DATETIME2 (7)    CONSTRAINT [StudentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                DATETIME2 (7)    CONSTRAINT [StudentEducationOrganizationAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                              UNIQUEIDENTIFIER CONSTRAINT [StudentEducationOrganizationAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                     INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentEducationOrganizationAssociation_AggSeq]) NOT NULL,
    [AggregateData]                                   VARBINARY (8000) NULL,
    [ChangeVersion]                                   BIGINT           CONSTRAINT [StudentEducationOrganizationAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentEducationOrganizationAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentEducationOrganizationAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI], [BarrierToInternetAccessInResidenceDescriptorId], [GenderIdentity], [HispanicLatinoEthnicity], [InternetAccessInResidence], [InternetAccessTypeInResidenceDescriptorId], [InternetPerformanceInResidenceDescriptorId], [LimitedEnglishProficiencyDescriptorId], [LoginId], [PrimaryLearningDeviceAccessDescriptorId], [PrimaryLearningDeviceAwayFromSchoolDescriptorId], [PrimaryLearningDeviceProviderDescriptorId], [ProfileThumbnail], [SexDescriptorId], [SupporterMilitaryConnectionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [StudentUSI],
                 [BarrierToInternetAccessInResidenceDescriptorId],
                 [GenderIdentity],
                 [HispanicLatinoEthnicity],
                 [InternetAccessInResidence],
                 [InternetAccessTypeInResidenceDescriptorId],
                 [InternetPerformanceInResidenceDescriptorId],
                 [LimitedEnglishProficiencyDescriptorId],
                 [LoginId],
                 [PrimaryLearningDeviceAccessDescriptorId],
                 [PrimaryLearningDeviceAwayFromSchoolDescriptorId],
                 [PrimaryLearningDeviceProviderDescriptorId],
                 [ProfileThumbnail],
                 [SexDescriptorId],
                 [SupporterMilitaryConnectionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentEducationOrganizationAssociation]
        ORDER BY [EducationOrganizationId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentEducationOrganizationAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentEducationOrganizationAssociation]', N'StudentEducationOrganizationAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentEducationOrganizationAssociation_PK1]', N'StudentEducationOrganizationAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([BarrierToInternetAccessInResidenceDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([InternetAccessTypeInResidenceDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([InternetPerformanceInResidenceDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([LimitedEnglishProficiencyDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([PrimaryLearningDeviceAccessDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([PrimaryLearningDeviceAwayFromSchoolDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([PrimaryLearningDeviceProviderDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_SexDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_SexDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([SexDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor]
    ON [edfi].[StudentEducationOrganizationAssociation]([SupporterMilitaryConnectionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[UX_StudentEducationOrganizationAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentEducationOrganizationAssociation_Id]
    ON [edfi].[StudentEducationOrganizationAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[IX_StudentEducationOrganizationAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssociation_EducationOrganizationId]
    ON [edfi].[StudentEducationOrganizationAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[IX_StudentEducationOrganizationAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssociation_AggregateId]
    ON [edfi].[StudentEducationOrganizationAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[IX_StudentEducationOrganizationAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationAssociation_StudentUSI]
    ON [edfi].[StudentEducationOrganizationAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationAssociation].[UX_StudentEducationOrganizationAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentEducationOrganizationAssociation_ChangeVersion]
    ON [edfi].[StudentEducationOrganizationAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentEducationOrganizationResponsibilityAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentEducationOrganizationResponsibilityAssociation] (
    [BeginDate]                  DATE             NOT NULL,
    [EducationOrganizationId]    BIGINT           NOT NULL,
    [ResponsibilityDescriptorId] INT              NOT NULL,
    [StudentUSI]                 INT              NOT NULL,
    [EndDate]                    DATE             NULL,
    [Discriminator]              NVARCHAR (128)   NULL,
    [CreateDate]                 DATETIME2 (7)    CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]           DATETIME2 (7)    CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                         UNIQUEIDENTIFIER CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentEducationOrganizationResponsibilityAssociation_AggSeq]) NOT NULL,
    [AggregateData]              VARBINARY (8000) NULL,
    [ChangeVersion]              BIGINT           CONSTRAINT [StudentEducationOrganizationResponsibilityAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentEducationOrganizationResponsibilityAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [EducationOrganizationId] ASC, [ResponsibilityDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentEducationOrganizationResponsibilityAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentEducationOrganizationResponsibilityAssociation] ([BeginDate], [EducationOrganizationId], [ResponsibilityDescriptorId], [StudentUSI], [EndDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [EducationOrganizationId],
                 [ResponsibilityDescriptorId],
                 [StudentUSI],
                 [EndDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentEducationOrganizationResponsibilityAssociation]
        ORDER BY [BeginDate] ASC, [EducationOrganizationId] ASC, [ResponsibilityDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentEducationOrganizationResponsibilityAssociation]', N'StudentEducationOrganizationResponsibilityAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentEducationOrganizationResponsibilityAssociation_PK1]', N'StudentEducationOrganizationResponsibilityAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([ResponsibilityDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[UX_StudentEducationOrganizationResponsibilityAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentEducationOrganizationResponsibilityAssociation_Id]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[IX_StudentEducationOrganizationResponsibilityAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationResponsibilityAssociation_EducationOrganizationId]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[IX_StudentEducationOrganizationResponsibilityAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationResponsibilityAssociation_AggregateId]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[IX_StudentEducationOrganizationResponsibilityAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentEducationOrganizationResponsibilityAssociation_StudentUSI]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentEducationOrganizationResponsibilityAssociation].[UX_StudentEducationOrganizationResponsibilityAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentEducationOrganizationResponsibilityAssociation_ChangeVersion]
    ON [edfi].[StudentEducationOrganizationResponsibilityAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentGradebookEntry]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentGradebookEntry] (
    [GradebookEntryIdentifier]         NVARCHAR (60)    NOT NULL,
    [Namespace]                        NVARCHAR (255)   NOT NULL,
    [StudentUSI]                       INT              NOT NULL,
    [AssignmentLateStatusDescriptorId] INT              NULL,
    [CompetencyLevelDescriptorId]      INT              NULL,
    [DateFulfilled]                    DATE             NULL,
    [DiagnosticStatement]              NVARCHAR (1024)  NULL,
    [LetterGradeEarned]                NVARCHAR (20)    NULL,
    [NumericGradeEarned]               DECIMAL (9, 2)   NULL,
    [PointsEarned]                     DECIMAL (9, 2)   NULL,
    [SubmissionStatusDescriptorId]     INT              NULL,
    [TimeFulfilled]                    TIME (7)         NULL,
    [Discriminator]                    NVARCHAR (128)   NULL,
    [CreateDate]                       DATETIME2 (7)    CONSTRAINT [StudentGradebookEntry_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                 DATETIME2 (7)    CONSTRAINT [StudentGradebookEntry_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                               UNIQUEIDENTIFIER CONSTRAINT [StudentGradebookEntry_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                      INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentGradebookEntry_AggSeq]) NOT NULL,
    [AggregateData]                    VARBINARY (8000) NULL,
    [ChangeVersion]                    BIGINT           CONSTRAINT [StudentGradebookEntry_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentGradebookEntry_PK1] PRIMARY KEY CLUSTERED ([GradebookEntryIdentifier] ASC, [Namespace] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentGradebookEntry])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentGradebookEntry] ([GradebookEntryIdentifier], [Namespace], [StudentUSI], [AssignmentLateStatusDescriptorId], [CompetencyLevelDescriptorId], [DateFulfilled], [DiagnosticStatement], [LetterGradeEarned], [NumericGradeEarned], [PointsEarned], [SubmissionStatusDescriptorId], [TimeFulfilled], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [GradebookEntryIdentifier],
                 [Namespace],
                 [StudentUSI],
                 [AssignmentLateStatusDescriptorId],
                 [CompetencyLevelDescriptorId],
                 [DateFulfilled],
                 [DiagnosticStatement],
                 [LetterGradeEarned],
                 [NumericGradeEarned],
                 [PointsEarned],
                 [SubmissionStatusDescriptorId],
                 [TimeFulfilled],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentGradebookEntry]
        ORDER BY [GradebookEntryIdentifier] ASC, [Namespace] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentGradebookEntry];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentGradebookEntry]', N'StudentGradebookEntry';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentGradebookEntry_PK1]', N'StudentGradebookEntry_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[FK_StudentGradebookEntry_AssignmentLateStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_AssignmentLateStatusDescriptor]
    ON [edfi].[StudentGradebookEntry]([AssignmentLateStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[FK_StudentGradebookEntry_CompetencyLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_CompetencyLevelDescriptor]
    ON [edfi].[StudentGradebookEntry]([CompetencyLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[FK_StudentGradebookEntry_GradebookEntry]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_GradebookEntry]
    ON [edfi].[StudentGradebookEntry]([GradebookEntryIdentifier] ASC, [Namespace] ASC);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[FK_StudentGradebookEntry_SubmissionStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_SubmissionStatusDescriptor]
    ON [edfi].[StudentGradebookEntry]([SubmissionStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[UX_StudentGradebookEntry_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentGradebookEntry_Id]
    ON [edfi].[StudentGradebookEntry]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[IX_StudentGradebookEntry_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentGradebookEntry_AggregateId]
    ON [edfi].[StudentGradebookEntry]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[IX_StudentGradebookEntry_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentGradebookEntry_StudentUSI]
    ON [edfi].[StudentGradebookEntry]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentGradebookEntry].[UX_StudentGradebookEntry_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentGradebookEntry_ChangeVersion]
    ON [edfi].[StudentGradebookEntry]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentHealth]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentHealth] (
    [EducationOrganizationId]                     BIGINT           NOT NULL,
    [StudentUSI]                                  INT              NOT NULL,
    [AsOfDate]                                    DATE             NOT NULL,
    [NonMedicalImmunizationExemptionDate]         DATE             NULL,
    [NonMedicalImmunizationExemptionDescriptorId] INT              NULL,
    [Discriminator]                               NVARCHAR (128)   NULL,
    [CreateDate]                                  DATETIME2 (7)    CONSTRAINT [StudentHealth_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                            DATETIME2 (7)    CONSTRAINT [StudentHealth_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                          UNIQUEIDENTIFIER CONSTRAINT [StudentHealth_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                 INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentHealth_AggSeq]) NOT NULL,
    [AggregateData]                               VARBINARY (8000) NULL,
    [ChangeVersion]                               BIGINT           CONSTRAINT [StudentHealth_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentHealth_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentHealth])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentHealth] ([EducationOrganizationId], [StudentUSI], [AsOfDate], [NonMedicalImmunizationExemptionDate], [NonMedicalImmunizationExemptionDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [StudentUSI],
                 [AsOfDate],
                 [NonMedicalImmunizationExemptionDate],
                 [NonMedicalImmunizationExemptionDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentHealth]
        ORDER BY [EducationOrganizationId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentHealth];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentHealth]', N'StudentHealth';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentHealth_PK1]', N'StudentHealth_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentHealth].[FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor]
    ON [edfi].[StudentHealth]([NonMedicalImmunizationExemptionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentHealth].[UX_StudentHealth_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentHealth_Id]
    ON [edfi].[StudentHealth]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentHealth].[IX_StudentHealth_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentHealth_EducationOrganizationId]
    ON [edfi].[StudentHealth]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentHealth].[IX_StudentHealth_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentHealth_AggregateId]
    ON [edfi].[StudentHealth]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentHealth].[IX_StudentHealth_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentHealth_StudentUSI]
    ON [edfi].[StudentHealth]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentHealth].[UX_StudentHealth_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentHealth_ChangeVersion]
    ON [edfi].[StudentHealth]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentInterventionAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentInterventionAssociation] (
    [EducationOrganizationId]        BIGINT           NOT NULL,
    [InterventionIdentificationCode] NVARCHAR (60)    NOT NULL,
    [StudentUSI]                     INT              NOT NULL,
    [CohortIdentifier]               NVARCHAR (36)    NULL,
    [CohortEducationOrganizationId]  BIGINT           NULL,
    [DiagnosticStatement]            NVARCHAR (1024)  NULL,
    [Dosage]                         INT              NULL,
    [Discriminator]                  NVARCHAR (128)   NULL,
    [CreateDate]                     DATETIME2 (7)    CONSTRAINT [StudentInterventionAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]               DATETIME2 (7)    CONSTRAINT [StudentInterventionAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                             UNIQUEIDENTIFIER CONSTRAINT [StudentInterventionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                    INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentInterventionAssociation_AggSeq]) NOT NULL,
    [AggregateData]                  VARBINARY (8000) NULL,
    [ChangeVersion]                  BIGINT           CONSTRAINT [StudentInterventionAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentInterventionAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentInterventionAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentInterventionAssociation] ([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI], [CohortIdentifier], [CohortEducationOrganizationId], [DiagnosticStatement], [Dosage], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [InterventionIdentificationCode],
                 [StudentUSI],
                 [CohortIdentifier],
                 [CohortEducationOrganizationId],
                 [DiagnosticStatement],
                 [Dosage],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentInterventionAssociation]
        ORDER BY [EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentInterventionAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentInterventionAssociation]', N'StudentInterventionAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentInterventionAssociation_PK1]', N'StudentInterventionAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[FK_StudentInterventionAssociation_Cohort]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociation_Cohort]
    ON [edfi].[StudentInterventionAssociation]([CohortIdentifier] ASC, [CohortEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[FK_StudentInterventionAssociation_Intervention]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociation_Intervention]
    ON [edfi].[StudentInterventionAssociation]([EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[UX_StudentInterventionAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentInterventionAssociation_Id]
    ON [edfi].[StudentInterventionAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[IX_StudentInterventionAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAssociation_EducationOrganizationId]
    ON [edfi].[StudentInterventionAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[IX_StudentInterventionAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAssociation_AggregateId]
    ON [edfi].[StudentInterventionAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[IX_StudentInterventionAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAssociation_StudentUSI]
    ON [edfi].[StudentInterventionAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAssociation].[UX_StudentInterventionAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentInterventionAssociation_ChangeVersion]
    ON [edfi].[StudentInterventionAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentInterventionAttendanceEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentInterventionAttendanceEvent] (
    [AttendanceEventCategoryDescriptorId] INT              NOT NULL,
    [EducationOrganizationId]             BIGINT           NOT NULL,
    [EventDate]                           DATE             NOT NULL,
    [InterventionIdentificationCode]      NVARCHAR (60)    NOT NULL,
    [StudentUSI]                          INT              NOT NULL,
    [AttendanceEventReason]               NVARCHAR (255)   NULL,
    [EducationalEnvironmentDescriptorId]  INT              NULL,
    [EventDuration]                       DECIMAL (3, 2)   NULL,
    [InterventionDuration]                INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [StudentInterventionAttendanceEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [StudentInterventionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [StudentInterventionAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentInterventionAttendanceEvent_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [StudentInterventionAttendanceEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentInterventionAttendanceEvent_PK1] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryDescriptorId] ASC, [EducationOrganizationId] ASC, [EventDate] ASC, [InterventionIdentificationCode] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentInterventionAttendanceEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentInterventionAttendanceEvent] ([AttendanceEventCategoryDescriptorId], [EducationOrganizationId], [EventDate], [InterventionIdentificationCode], [StudentUSI], [AttendanceEventReason], [EducationalEnvironmentDescriptorId], [EventDuration], [InterventionDuration], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AttendanceEventCategoryDescriptorId],
                 [EducationOrganizationId],
                 [EventDate],
                 [InterventionIdentificationCode],
                 [StudentUSI],
                 [AttendanceEventReason],
                 [EducationalEnvironmentDescriptorId],
                 [EventDuration],
                 [InterventionDuration],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentInterventionAttendanceEvent]
        ORDER BY [AttendanceEventCategoryDescriptorId] ASC, [EducationOrganizationId] ASC, [EventDate] ASC, [InterventionIdentificationCode] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentInterventionAttendanceEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentInterventionAttendanceEvent]', N'StudentInterventionAttendanceEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentInterventionAttendanceEvent_PK1]', N'StudentInterventionAttendanceEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor]
    ON [edfi].[StudentInterventionAttendanceEvent]([AttendanceEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor]
    ON [edfi].[StudentInterventionAttendanceEvent]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[FK_StudentInterventionAttendanceEvent_Intervention]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_Intervention]
    ON [edfi].[StudentInterventionAttendanceEvent]([EducationOrganizationId] ASC, [InterventionIdentificationCode] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[UX_StudentInterventionAttendanceEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentInterventionAttendanceEvent_Id]
    ON [edfi].[StudentInterventionAttendanceEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[IX_StudentInterventionAttendanceEvent_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAttendanceEvent_EducationOrganizationId]
    ON [edfi].[StudentInterventionAttendanceEvent]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[IX_StudentInterventionAttendanceEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAttendanceEvent_AggregateId]
    ON [edfi].[StudentInterventionAttendanceEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[IX_StudentInterventionAttendanceEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentInterventionAttendanceEvent_StudentUSI]
    ON [edfi].[StudentInterventionAttendanceEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentInterventionAttendanceEvent].[UX_StudentInterventionAttendanceEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentInterventionAttendanceEvent_ChangeVersion]
    ON [edfi].[StudentInterventionAttendanceEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentProgramAttendanceEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentProgramAttendanceEvent] (
    [AttendanceEventCategoryDescriptorId] INT              NOT NULL,
    [EducationOrganizationId]             BIGINT           NOT NULL,
    [EventDate]                           DATE             NOT NULL,
    [ProgramEducationOrganizationId]      BIGINT           NOT NULL,
    [ProgramName]                         NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]             INT              NOT NULL,
    [StudentUSI]                          INT              NOT NULL,
    [AttendanceEventReason]               NVARCHAR (255)   NULL,
    [EducationalEnvironmentDescriptorId]  INT              NULL,
    [EventDuration]                       DECIMAL (3, 2)   NULL,
    [ProgramAttendanceDuration]           INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [StudentProgramAttendanceEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [StudentProgramAttendanceEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [StudentProgramAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentProgramAttendanceEvent_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [StudentProgramAttendanceEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentProgramAttendanceEvent_PK1] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryDescriptorId] ASC, [EducationOrganizationId] ASC, [EventDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentProgramAttendanceEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentProgramAttendanceEvent] ([AttendanceEventCategoryDescriptorId], [EducationOrganizationId], [EventDate], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI], [AttendanceEventReason], [EducationalEnvironmentDescriptorId], [EventDuration], [ProgramAttendanceDuration], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AttendanceEventCategoryDescriptorId],
                 [EducationOrganizationId],
                 [EventDate],
                 [ProgramEducationOrganizationId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StudentUSI],
                 [AttendanceEventReason],
                 [EducationalEnvironmentDescriptorId],
                 [EventDuration],
                 [ProgramAttendanceDuration],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentProgramAttendanceEvent]
        ORDER BY [AttendanceEventCategoryDescriptorId] ASC, [EducationOrganizationId] ASC, [EventDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentProgramAttendanceEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentProgramAttendanceEvent]', N'StudentProgramAttendanceEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentProgramAttendanceEvent_PK1]', N'StudentProgramAttendanceEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor]
    ON [edfi].[StudentProgramAttendanceEvent]([AttendanceEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor]
    ON [edfi].[StudentProgramAttendanceEvent]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[FK_StudentProgramAttendanceEvent_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_Program]
    ON [edfi].[StudentProgramAttendanceEvent]([ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[UX_StudentProgramAttendanceEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentProgramAttendanceEvent_Id]
    ON [edfi].[StudentProgramAttendanceEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[IX_StudentProgramAttendanceEvent_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramAttendanceEvent_EducationOrganizationId]
    ON [edfi].[StudentProgramAttendanceEvent]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[IX_StudentProgramAttendanceEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramAttendanceEvent_AggregateId]
    ON [edfi].[StudentProgramAttendanceEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[IX_StudentProgramAttendanceEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramAttendanceEvent_StudentUSI]
    ON [edfi].[StudentProgramAttendanceEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramAttendanceEvent].[UX_StudentProgramAttendanceEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentProgramAttendanceEvent_ChangeVersion]
    ON [edfi].[StudentProgramAttendanceEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentProgramEvaluation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentProgramEvaluation] (
    [EvaluationDate]                           DATE             NOT NULL,
    [ProgramEducationOrganizationId]           BIGINT           NOT NULL,
    [ProgramEvaluationPeriodDescriptorId]      INT              NOT NULL,
    [ProgramEvaluationTitle]                   NVARCHAR (50)    NOT NULL,
    [ProgramEvaluationTypeDescriptorId]        INT              NOT NULL,
    [ProgramName]                              NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]                  INT              NOT NULL,
    [StudentUSI]                               INT              NOT NULL,
    [EducationOrganizationId]                  BIGINT           NULL,
    [EvaluationDuration]                       INT              NULL,
    [StaffEvaluatorStaffUSI]                   INT              NULL,
    [SummaryEvaluationComment]                 NVARCHAR (1024)  NULL,
    [SummaryEvaluationNumericRating]           DECIMAL (6, 3)   NULL,
    [SummaryEvaluationRatingLevelDescriptorId] INT              NULL,
    [Discriminator]                            NVARCHAR (128)   NULL,
    [CreateDate]                               DATETIME2 (7)    CONSTRAINT [StudentProgramEvaluation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                         DATETIME2 (7)    CONSTRAINT [StudentProgramEvaluation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                       UNIQUEIDENTIFIER CONSTRAINT [StudentProgramEvaluation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                              INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentProgramEvaluation_AggSeq]) NOT NULL,
    [AggregateData]                            VARBINARY (8000) NULL,
    [ChangeVersion]                            BIGINT           CONSTRAINT [StudentProgramEvaluation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentProgramEvaluation_PK1] PRIMARY KEY CLUSTERED ([EvaluationDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentProgramEvaluation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentProgramEvaluation] ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI], [EducationOrganizationId], [EvaluationDuration], [StaffEvaluatorStaffUSI], [SummaryEvaluationComment], [SummaryEvaluationNumericRating], [SummaryEvaluationRatingLevelDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EvaluationDate],
                 [ProgramEducationOrganizationId],
                 [ProgramEvaluationPeriodDescriptorId],
                 [ProgramEvaluationTitle],
                 [ProgramEvaluationTypeDescriptorId],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StudentUSI],
                 [EducationOrganizationId],
                 [EvaluationDuration],
                 [StaffEvaluatorStaffUSI],
                 [SummaryEvaluationComment],
                 [SummaryEvaluationNumericRating],
                 [SummaryEvaluationRatingLevelDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentProgramEvaluation]
        ORDER BY [EvaluationDate] ASC, [ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentProgramEvaluation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentProgramEvaluation]', N'StudentProgramEvaluation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentProgramEvaluation_PK1]', N'StudentProgramEvaluation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[FK_StudentProgramEvaluation_ProgramEvaluation]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramEvaluation_ProgramEvaluation]
    ON [edfi].[StudentProgramEvaluation]([ProgramEducationOrganizationId] ASC, [ProgramEvaluationPeriodDescriptorId] ASC, [ProgramEvaluationTitle] ASC, [ProgramEvaluationTypeDescriptorId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[FK_StudentProgramEvaluation_RatingLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramEvaluation_RatingLevelDescriptor]
    ON [edfi].[StudentProgramEvaluation]([SummaryEvaluationRatingLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[FK_StudentProgramEvaluation_Staff]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramEvaluation_Staff]
    ON [edfi].[StudentProgramEvaluation]([StaffEvaluatorStaffUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[FK_StudentProgramEvaluation_Student]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentProgramEvaluation_Student]
    ON [edfi].[StudentProgramEvaluation]([StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[UX_StudentProgramEvaluation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentProgramEvaluation_Id]
    ON [edfi].[StudentProgramEvaluation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[IX_StudentProgramEvaluation_ProgramEducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramEvaluation_ProgramEducationOrganizationId]
    ON [edfi].[StudentProgramEvaluation]([ProgramEducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[IX_StudentProgramEvaluation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramEvaluation_EducationOrganizationId]
    ON [edfi].[StudentProgramEvaluation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[IX_StudentProgramEvaluation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramEvaluation_AggregateId]
    ON [edfi].[StudentProgramEvaluation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[IX_StudentProgramEvaluation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramEvaluation_StudentUSI]
    ON [edfi].[StudentProgramEvaluation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[IX_StudentProgramEvaluation_StaffEvaluatorStaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentProgramEvaluation_StaffEvaluatorStaffUSI]
    ON [edfi].[StudentProgramEvaluation]([StaffEvaluatorStaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentProgramEvaluation].[UX_StudentProgramEvaluation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentProgramEvaluation_ChangeVersion]
    ON [edfi].[StudentProgramEvaluation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentSchoolAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSchoolAssociation] (
    [EntryDate]                         DATE             NOT NULL,
    [SchoolId]                          BIGINT           NOT NULL,
    [StudentUSI]                        INT              NOT NULL,
    [CalendarCode]                      NVARCHAR (60)    NULL,
    [ClassOfSchoolYear]                 SMALLINT         NULL,
    [EducationOrganizationId]           BIGINT           NULL,
    [EmployedWhileEnrolled]             BIT              NULL,
    [EnrollmentTypeDescriptorId]        INT              NULL,
    [EntryGradeLevelDescriptorId]       INT              NOT NULL,
    [EntryGradeLevelReasonDescriptorId] INT              NULL,
    [EntryTypeDescriptorId]             INT              NULL,
    [ExitWithdrawDate]                  DATE             NULL,
    [ExitWithdrawTypeDescriptorId]      INT              NULL,
    [FullTimeEquivalency]               DECIMAL (5, 4)   NULL,
    [GraduationPlanTypeDescriptorId]    INT              NULL,
    [GraduationSchoolYear]              SMALLINT         NULL,
    [NextYearGradeLevelDescriptorId]    INT              NULL,
    [NextYearSchoolId]                  BIGINT           NULL,
    [PrimarySchool]                     BIT              NULL,
    [RepeatGradeIndicator]              BIT              NULL,
    [ResidencyStatusDescriptorId]       INT              NULL,
    [SchoolChoice]                      BIT              NULL,
    [SchoolChoiceBasisDescriptorId]     INT              NULL,
    [SchoolChoiceTransfer]              BIT              NULL,
    [SchoolYear]                        SMALLINT         NULL,
    [TermCompletionIndicator]           BIT              NULL,
    [Discriminator]                     NVARCHAR (128)   NULL,
    [CreateDate]                        DATETIME2 (7)    CONSTRAINT [StudentSchoolAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                  DATETIME2 (7)    CONSTRAINT [StudentSchoolAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                UNIQUEIDENTIFIER CONSTRAINT [StudentSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                       INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentSchoolAssociation_AggSeq]) NOT NULL,
    [AggregateData]                     VARBINARY (8000) NULL,
    [ChangeVersion]                     BIGINT           CONSTRAINT [StudentSchoolAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSchoolAssociation_PK1] PRIMARY KEY CLUSTERED ([EntryDate] ASC, [SchoolId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSchoolAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSchoolAssociation] ([EntryDate], [SchoolId], [StudentUSI], [CalendarCode], [ClassOfSchoolYear], [EducationOrganizationId], [EmployedWhileEnrolled], [EnrollmentTypeDescriptorId], [EntryGradeLevelDescriptorId], [EntryGradeLevelReasonDescriptorId], [EntryTypeDescriptorId], [ExitWithdrawDate], [ExitWithdrawTypeDescriptorId], [FullTimeEquivalency], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [NextYearGradeLevelDescriptorId], [NextYearSchoolId], [PrimarySchool], [RepeatGradeIndicator], [ResidencyStatusDescriptorId], [SchoolChoice], [SchoolChoiceBasisDescriptorId], [SchoolChoiceTransfer], [SchoolYear], [TermCompletionIndicator], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EntryDate],
                 [SchoolId],
                 [StudentUSI],
                 [CalendarCode],
                 [ClassOfSchoolYear],
                 [EducationOrganizationId],
                 [EmployedWhileEnrolled],
                 [EnrollmentTypeDescriptorId],
                 [EntryGradeLevelDescriptorId],
                 [EntryGradeLevelReasonDescriptorId],
                 [EntryTypeDescriptorId],
                 [ExitWithdrawDate],
                 [ExitWithdrawTypeDescriptorId],
                 [FullTimeEquivalency],
                 [GraduationPlanTypeDescriptorId],
                 [GraduationSchoolYear],
                 [NextYearGradeLevelDescriptorId],
                 [NextYearSchoolId],
                 [PrimarySchool],
                 [RepeatGradeIndicator],
                 [ResidencyStatusDescriptorId],
                 [SchoolChoice],
                 [SchoolChoiceBasisDescriptorId],
                 [SchoolChoiceTransfer],
                 [SchoolYear],
                 [TermCompletionIndicator],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentSchoolAssociation]
        ORDER BY [EntryDate] ASC, [SchoolId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSchoolAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSchoolAssociation]', N'StudentSchoolAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSchoolAssociation_PK1]', N'StudentSchoolAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_Calendar]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_Calendar]
    ON [edfi].[StudentSchoolAssociation]([CalendarCode] ASC, [SchoolId] ASC, [SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_EnrollmentTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_EnrollmentTypeDescriptor]
    ON [edfi].[StudentSchoolAssociation]([EnrollmentTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor]
    ON [edfi].[StudentSchoolAssociation]([EntryGradeLevelReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_EntryTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_EntryTypeDescriptor]
    ON [edfi].[StudentSchoolAssociation]([EntryTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor]
    ON [edfi].[StudentSchoolAssociation]([ExitWithdrawTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_GradeLevelDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_GradeLevelDescriptor]
    ON [edfi].[StudentSchoolAssociation]([EntryGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_GradeLevelDescriptor1]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_GradeLevelDescriptor1]
    ON [edfi].[StudentSchoolAssociation]([NextYearGradeLevelDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_GraduationPlan]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_GraduationPlan]
    ON [edfi].[StudentSchoolAssociation]([EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_ResidencyStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_ResidencyStatusDescriptor]
    ON [edfi].[StudentSchoolAssociation]([ResidencyStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_School1]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_School1]
    ON [edfi].[StudentSchoolAssociation]([NextYearSchoolId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor]
    ON [edfi].[StudentSchoolAssociation]([SchoolChoiceBasisDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_SchoolYearType]
    ON [edfi].[StudentSchoolAssociation]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[FK_StudentSchoolAssociation_SchoolYearType1]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_SchoolYearType1]
    ON [edfi].[StudentSchoolAssociation]([ClassOfSchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[UX_StudentSchoolAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentSchoolAssociation_Id]
    ON [edfi].[StudentSchoolAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[IX_StudentSchoolAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAssociation_SchoolId]
    ON [edfi].[StudentSchoolAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[IX_StudentSchoolAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAssociation_EducationOrganizationId]
    ON [edfi].[StudentSchoolAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[IX_StudentSchoolAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAssociation_AggregateId]
    ON [edfi].[StudentSchoolAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[IX_StudentSchoolAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAssociation_StudentUSI]
    ON [edfi].[StudentSchoolAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAssociation].[UX_StudentSchoolAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentSchoolAssociation_ChangeVersion]
    ON [edfi].[StudentSchoolAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentSchoolAttendanceEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSchoolAttendanceEvent] (
    [AttendanceEventCategoryDescriptorId] INT              NOT NULL,
    [EventDate]                           DATE             NOT NULL,
    [SchoolId]                            BIGINT           NOT NULL,
    [SchoolYear]                          SMALLINT         NOT NULL,
    [SessionName]                         NVARCHAR (60)    NOT NULL,
    [StudentUSI]                          INT              NOT NULL,
    [ArrivalTime]                         TIME (7)         NULL,
    [AttendanceEventReason]               NVARCHAR (255)   NULL,
    [DepartureTime]                       TIME (7)         NULL,
    [EducationalEnvironmentDescriptorId]  INT              NULL,
    [EventDuration]                       DECIMAL (3, 2)   NULL,
    [SchoolAttendanceDuration]            INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [StudentSchoolAttendanceEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [StudentSchoolAttendanceEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [StudentSchoolAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentSchoolAttendanceEvent_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [StudentSchoolAttendanceEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSchoolAttendanceEvent_PK1] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryDescriptorId] ASC, [EventDate] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSchoolAttendanceEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSchoolAttendanceEvent] ([AttendanceEventCategoryDescriptorId], [EventDate], [SchoolId], [SchoolYear], [SessionName], [StudentUSI], [ArrivalTime], [AttendanceEventReason], [DepartureTime], [EducationalEnvironmentDescriptorId], [EventDuration], [SchoolAttendanceDuration], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AttendanceEventCategoryDescriptorId],
                 [EventDate],
                 [SchoolId],
                 [SchoolYear],
                 [SessionName],
                 [StudentUSI],
                 [ArrivalTime],
                 [AttendanceEventReason],
                 [DepartureTime],
                 [EducationalEnvironmentDescriptorId],
                 [EventDuration],
                 [SchoolAttendanceDuration],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentSchoolAttendanceEvent]
        ORDER BY [AttendanceEventCategoryDescriptorId] ASC, [EventDate] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSchoolAttendanceEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSchoolAttendanceEvent]', N'StudentSchoolAttendanceEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSchoolAttendanceEvent_PK1]', N'StudentSchoolAttendanceEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor]
    ON [edfi].[StudentSchoolAttendanceEvent]([AttendanceEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor]
    ON [edfi].[StudentSchoolAttendanceEvent]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[FK_StudentSchoolAttendanceEvent_Session]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_Session]
    ON [edfi].[StudentSchoolAttendanceEvent]([SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[UX_StudentSchoolAttendanceEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentSchoolAttendanceEvent_Id]
    ON [edfi].[StudentSchoolAttendanceEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[IX_StudentSchoolAttendanceEvent_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAttendanceEvent_SchoolId]
    ON [edfi].[StudentSchoolAttendanceEvent]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[IX_StudentSchoolAttendanceEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAttendanceEvent_AggregateId]
    ON [edfi].[StudentSchoolAttendanceEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[IX_StudentSchoolAttendanceEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSchoolAttendanceEvent_StudentUSI]
    ON [edfi].[StudentSchoolAttendanceEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSchoolAttendanceEvent].[UX_StudentSchoolAttendanceEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentSchoolAttendanceEvent_ChangeVersion]
    ON [edfi].[StudentSchoolAttendanceEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentSectionAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSectionAssociation] (
    [BeginDate]                         DATE             NOT NULL,
    [LocalCourseCode]                   NVARCHAR (60)    NOT NULL,
    [SchoolId]                          BIGINT           NOT NULL,
    [SchoolYear]                        SMALLINT         NOT NULL,
    [SectionIdentifier]                 NVARCHAR (255)   NOT NULL,
    [SessionName]                       NVARCHAR (60)    NOT NULL,
    [StudentUSI]                        INT              NOT NULL,
    [AttemptStatusDescriptorId]         INT              NULL,
    [DualCreditEducationOrganizationId] BIGINT           NULL,
    [DualCreditIndicator]               BIT              NULL,
    [DualCreditInstitutionDescriptorId] INT              NULL,
    [DualCreditTypeDescriptorId]        INT              NULL,
    [DualHighSchoolCreditIndicator]     BIT              NULL,
    [EndDate]                           DATE             NULL,
    [HomeroomIndicator]                 BIT              NULL,
    [RepeatIdentifierDescriptorId]      INT              NULL,
    [TeacherStudentDataLinkExclusion]   BIT              NULL,
    [Discriminator]                     NVARCHAR (128)   NULL,
    [CreateDate]                        DATETIME2 (7)    CONSTRAINT [StudentSectionAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                  DATETIME2 (7)    CONSTRAINT [StudentSectionAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                UNIQUEIDENTIFIER CONSTRAINT [StudentSectionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                       INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentSectionAssociation_AggSeq]) NOT NULL,
    [AggregateData]                     VARBINARY (8000) NULL,
    [ChangeVersion]                     BIGINT           CONSTRAINT [StudentSectionAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSectionAssociation_PK1] PRIMARY KEY CLUSTERED ([BeginDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSectionAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSectionAssociation] ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI], [AttemptStatusDescriptorId], [EndDate], [HomeroomIndicator], [RepeatIdentifierDescriptorId], [TeacherStudentDataLinkExclusion], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [BeginDate],
                 [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [StudentUSI],
                 [AttemptStatusDescriptorId],
                 [EndDate],
                 [HomeroomIndicator],
                 [RepeatIdentifierDescriptorId],
                 [TeacherStudentDataLinkExclusion],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentSectionAssociation]
        ORDER BY [BeginDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSectionAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSectionAssociation]', N'StudentSectionAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSectionAssociation_PK1]', N'StudentSectionAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_AttemptStatusDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_AttemptStatusDescriptor]
    ON [edfi].[StudentSectionAssociation]([AttemptStatusDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_DualCreditInstitutionDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_DualCreditInstitutionDescriptor]
    ON [edfi].[StudentSectionAssociation]([DualCreditInstitutionDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_DualCreditTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_DualCreditTypeDescriptor]
    ON [edfi].[StudentSectionAssociation]([DualCreditTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_EducationOrganization]
    ON [edfi].[StudentSectionAssociation]([DualCreditEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_RepeatIdentifierDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_RepeatIdentifierDescriptor]
    ON [edfi].[StudentSectionAssociation]([RepeatIdentifierDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[FK_StudentSectionAssociation_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_Section]
    ON [edfi].[StudentSectionAssociation]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[UX_StudentSectionAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentSectionAssociation_Id]
    ON [edfi].[StudentSectionAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[IX_StudentSectionAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAssociation_SchoolId]
    ON [edfi].[StudentSectionAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[IX_StudentSectionAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAssociation_AggregateId]
    ON [edfi].[StudentSectionAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[IX_StudentSectionAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAssociation_StudentUSI]
    ON [edfi].[StudentSectionAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSectionAssociation].[UX_StudentSectionAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentSectionAssociation_ChangeVersion]
    ON [edfi].[StudentSectionAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentSectionAttendanceEvent]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSectionAttendanceEvent] (
    [AttendanceEventCategoryDescriptorId] INT              NOT NULL,
    [EventDate]                           DATE             NOT NULL,
    [LocalCourseCode]                     NVARCHAR (60)    NOT NULL,
    [SchoolId]                            BIGINT           NOT NULL,
    [SchoolYear]                          SMALLINT         NOT NULL,
    [SectionIdentifier]                   NVARCHAR (255)   NOT NULL,
    [SessionName]                         NVARCHAR (60)    NOT NULL,
    [StudentUSI]                          INT              NOT NULL,
    [ArrivalTime]                         TIME (7)         NULL,
    [AttendanceEventReason]               NVARCHAR (255)   NULL,
    [DepartureTime]                       TIME (7)         NULL,
    [EducationalEnvironmentDescriptorId]  INT              NULL,
    [EventDuration]                       DECIMAL (3, 2)   NULL,
    [SectionAttendanceDuration]           INT              NULL,
    [Discriminator]                       NVARCHAR (128)   NULL,
    [CreateDate]                          DATETIME2 (7)    CONSTRAINT [StudentSectionAttendanceEvent_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                    DATETIME2 (7)    CONSTRAINT [StudentSectionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER CONSTRAINT [StudentSectionAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                         INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentSectionAttendanceEvent_AggSeq]) NOT NULL,
    [AggregateData]                       VARBINARY (8000) NULL,
    [ChangeVersion]                       BIGINT           CONSTRAINT [StudentSectionAttendanceEvent_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSectionAttendanceEvent_PK1] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryDescriptorId] ASC, [EventDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSectionAttendanceEvent])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSectionAttendanceEvent] ([AttendanceEventCategoryDescriptorId], [EventDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI], [ArrivalTime], [AttendanceEventReason], [DepartureTime], [EducationalEnvironmentDescriptorId], [EventDuration], [SectionAttendanceDuration], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [AttendanceEventCategoryDescriptorId],
                 [EventDate],
                 [LocalCourseCode],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [StudentUSI],
                 [ArrivalTime],
                 [AttendanceEventReason],
                 [DepartureTime],
                 [EducationalEnvironmentDescriptorId],
                 [EventDuration],
                 [SectionAttendanceDuration],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentSectionAttendanceEvent]
        ORDER BY [AttendanceEventCategoryDescriptorId] ASC, [EventDate] ASC, [LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSectionAttendanceEvent];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSectionAttendanceEvent]', N'StudentSectionAttendanceEvent';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSectionAttendanceEvent_PK1]', N'StudentSectionAttendanceEvent_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor]
    ON [edfi].[StudentSectionAttendanceEvent]([AttendanceEventCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor]
    ON [edfi].[StudentSectionAttendanceEvent]([EducationalEnvironmentDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[FK_StudentSectionAttendanceEvent_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_Section]
    ON [edfi].[StudentSectionAttendanceEvent]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[UX_StudentSectionAttendanceEvent_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentSectionAttendanceEvent_Id]
    ON [edfi].[StudentSectionAttendanceEvent]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[IX_StudentSectionAttendanceEvent_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAttendanceEvent_SchoolId]
    ON [edfi].[StudentSectionAttendanceEvent]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[IX_StudentSectionAttendanceEvent_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAttendanceEvent_AggregateId]
    ON [edfi].[StudentSectionAttendanceEvent]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[IX_StudentSectionAttendanceEvent_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSectionAttendanceEvent_StudentUSI]
    ON [edfi].[StudentSectionAttendanceEvent]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSectionAttendanceEvent].[UX_StudentSectionAttendanceEvent_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentSectionAttendanceEvent_ChangeVersion]
    ON [edfi].[StudentSectionAttendanceEvent]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentSpecialEducationProgramEligibilityAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation] (
    [ConsentToEvaluationReceivedDate]       DATE             NOT NULL,
    [EducationOrganizationId]               BIGINT           NOT NULL,
    [ProgramEducationOrganizationId]        BIGINT           NOT NULL,
    [ProgramName]                           NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId]               INT              NOT NULL,
    [StudentUSI]                            INT              NOT NULL,
    [ConsentToEvaluationDate]               DATE             NULL,
    [EligibilityConferenceDate]             DATE             NULL,
    [EligibilityDelayReasonDescriptorId]    INT              NULL,
    [EligibilityDeterminationDate]          DATE             NULL,
    [EligibilityEvaluationDate]             DATE             NULL,
    [EligibilityEvaluationTypeDescriptorId] INT              NULL,
    [EvaluationCompleteIndicator]           BIT              NULL,
    [EvaluationDelayDays]                   INT              NULL,
    [EvaluationDelayReasonDescriptorId]     INT              NULL,
    [EvaluationLateReason]                  NVARCHAR (255)   NULL,
    [IDEAIndicator]                         BIT              NULL,
    [IDEAPartDescriptorId]                  INT              NOT NULL,
    [OriginalECIServicesDate]               DATE             NULL,
    [TransitionConferenceDate]              DATE             NULL,
    [TransitionNotificationDate]            DATE             NULL,
    [Discriminator]                         NVARCHAR (128)   NULL,
    [CreateDate]                            DATETIME2 (7)    CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                      DATETIME2 (7)    CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                    UNIQUEIDENTIFIER CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                           INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentSpecialEducationProgramEligibilityAssociation_AggSeq]) NOT NULL,
    [AggregateData]                         VARBINARY (8000) NULL,
    [ChangeVersion]                         BIGINT           CONSTRAINT [StudentSpecialEducationProgramEligibilityAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentSpecialEducationProgramEligibilityAssociation_PK1] PRIMARY KEY CLUSTERED ([ConsentToEvaluationReceivedDate] ASC, [EducationOrganizationId] ASC, [ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentSpecialEducationProgramEligibilityAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation] ([ConsentToEvaluationReceivedDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI], [ConsentToEvaluationDate], [EligibilityConferenceDate], [EligibilityDelayReasonDescriptorId], [EligibilityDeterminationDate], [EligibilityEvaluationDate], [EligibilityEvaluationTypeDescriptorId], [EvaluationCompleteIndicator], [EvaluationDelayDays], [EvaluationDelayReasonDescriptorId], [EvaluationLateReason], [IDEAIndicator], [IDEAPartDescriptorId], [OriginalECIServicesDate], [TransitionConferenceDate], [TransitionNotificationDate], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [ConsentToEvaluationReceivedDate],
                 [EducationOrganizationId] as edorg1,
				 [EducationOrganizationId] as edorg2,
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [StudentUSI],
                 [ConsentToEvaluationDate],
                 [EligibilityConferenceDate],
                 [EligibilityDelayReasonDescriptorId],
                 [EligibilityDeterminationDate],
                 [EligibilityEvaluationDate],
                 [EligibilityEvaluationTypeDescriptorId],
                 [EvaluationCompleteIndicator],
                 [EvaluationDelayDays],
                 [EvaluationDelayReasonDescriptorId],
                 [EvaluationLateReason],
                 [IDEAIndicator],
                 [IDEAPartDescriptorId],
                 [OriginalECIServicesDate],
                 [TransitionConferenceDate],
                 [TransitionNotificationDate],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentSpecialEducationProgramEligibilityAssociation]
        ORDER BY [ConsentToEvaluationReceivedDate] ASC, edorg1 ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [StudentUSI] ASC;
    END

DROP TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentSpecialEducationProgramEligibilityAssociation]', N'StudentSpecialEducationProgramEligibilityAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentSpecialEducationProgramEligibilityAssociation_PK1]', N'StudentSpecialEducationProgramEligibilityAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([EligibilityDelayReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([EligibilityEvaluationTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([EvaluationDelayReasonDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([IDEAPartDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[FK_StudentSpecialEducationProgramEligibilityAssociation_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramEligibilityAssociation_Program]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([ProgramEducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[UX_StudentSpecialEducationProgramEligibilityAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentSpecialEducationProgramEligibilityAssociation_Id]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[IX_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganizationId]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[IX_StudentSpecialEducationProgramEligibilityAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSpecialEducationProgramEligibilityAssociation_AggregateId]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[IX_StudentSpecialEducationProgramEligibilityAssociation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentSpecialEducationProgramEligibilityAssociation_StudentUSI]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[UX_StudentSpecialEducationProgramEligibilityAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentSpecialEducationProgramEligibilityAssociation_ChangeVersion]
    ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[StudentTransportation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_StudentTransportation] (
    [StudentUSI]                                             INT              NOT NULL,
    [TransportationEducationOrganizationId]                  BIGINT           NOT NULL,
    [SpecialAccomodationRequirements]                        NVARCHAR (1024)  NULL,
    [TransportationPublicExpenseEligibilityTypeDescriptorId] INT              NULL,
    [TransportationTypeDescriptorId]                         INT              NULL,
    [Discriminator]                                          NVARCHAR (128)   NULL,
    [CreateDate]                                             DATETIME2 (7)    CONSTRAINT [StudentTransportation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]                                       DATETIME2 (7)    CONSTRAINT [StudentTransportation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                                     UNIQUEIDENTIFIER CONSTRAINT [StudentTransportation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                                            INT              DEFAULT ( NEXT VALUE FOR [edfi].[StudentTransportation_AggSeq]) NOT NULL,
    [AggregateData]                                          VARBINARY (8000) NULL,
    [ChangeVersion]                                          BIGINT           CONSTRAINT [StudentTransportation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_StudentTransportation_PK1] PRIMARY KEY CLUSTERED ([StudentUSI] ASC, [TransportationEducationOrganizationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[StudentTransportation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_StudentTransportation] ([StudentUSI], [TransportationEducationOrganizationId], [SpecialAccomodationRequirements], [TransportationPublicExpenseEligibilityTypeDescriptorId], [TransportationTypeDescriptorId], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [StudentUSI],
                 [TransportationEducationOrganizationId],
                 [SpecialAccomodationRequirements],
                 [TransportationPublicExpenseEligibilityTypeDescriptorId],
                 [TransportationTypeDescriptorId],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[StudentTransportation]
        ORDER BY [StudentUSI] ASC, [TransportationEducationOrganizationId] ASC;
    END

DROP TABLE [edfi].[StudentTransportation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_StudentTransportation]', N'StudentTransportation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_StudentTransportation_PK1]', N'StudentTransportation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[FK_StudentTransportation_EducationOrganization]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentTransportation_EducationOrganization]
    ON [edfi].[StudentTransportation]([TransportationEducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor]
    ON [edfi].[StudentTransportation]([TransportationPublicExpenseEligibilityTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[FK_StudentTransportation_TransportationTypeDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_StudentTransportation_TransportationTypeDescriptor]
    ON [edfi].[StudentTransportation]([TransportationTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[UX_StudentTransportation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_StudentTransportation_Id]
    ON [edfi].[StudentTransportation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[IX_StudentTransportation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentTransportation_AggregateId]
    ON [edfi].[StudentTransportation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[IX_StudentTransportation_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_StudentTransportation_StudentUSI]
    ON [edfi].[StudentTransportation]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[StudentTransportation].[UX_StudentTransportation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_StudentTransportation_ChangeVersion]
    ON [edfi].[StudentTransportation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[Survey]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_Survey] (
    [Namespace]                  NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]           NVARCHAR (60)    NOT NULL,
    [EducationOrganizationId]    BIGINT           NULL,
    [NumberAdministered]         INT              NULL,
    [SchoolId]                   BIGINT           NULL,
    [SchoolYear]                 SMALLINT         NOT NULL,
    [SessionName]                NVARCHAR (60)    NULL,
    [SurveyCategoryDescriptorId] INT              NULL,
    [SurveyTitle]                NVARCHAR (255)   NOT NULL,
    [Discriminator]              NVARCHAR (128)   NULL,
    [CreateDate]                 DATETIME2 (7)    CONSTRAINT [Survey_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]           DATETIME2 (7)    CONSTRAINT [Survey_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                         UNIQUEIDENTIFIER CONSTRAINT [Survey_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]                INT              DEFAULT ( NEXT VALUE FOR [edfi].[Survey_AggSeq]) NOT NULL,
    [AggregateData]              VARBINARY (8000) NULL,
    [ChangeVersion]              BIGINT           CONSTRAINT [Survey_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_Survey_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [SurveyIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[Survey])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_Survey] ([Namespace], [SurveyIdentifier], [EducationOrganizationId], [NumberAdministered], [SchoolId], [SchoolYear], [SessionName], [SurveyCategoryDescriptorId], [SurveyTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [SurveyIdentifier],
                 [EducationOrganizationId],
                 [NumberAdministered],
                 [SchoolId],
                 [SchoolYear],
                 [SessionName],
                 [SurveyCategoryDescriptorId],
                 [SurveyTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[Survey]
        ORDER BY [Namespace] ASC, [SurveyIdentifier] ASC;
    END

DROP TABLE [edfi].[Survey];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_Survey]', N'Survey';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_Survey_PK1]', N'Survey_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[Survey].[FK_Survey_SchoolYearType]...';


GO
CREATE NONCLUSTERED INDEX [FK_Survey_SchoolYearType]
    ON [edfi].[Survey]([SchoolYear] ASC);


GO
PRINT N'Creating Index [edfi].[Survey].[FK_Survey_Session]...';


GO
CREATE NONCLUSTERED INDEX [FK_Survey_Session]
    ON [edfi].[Survey]([SchoolId] ASC, [SchoolYear] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[Survey].[FK_Survey_SurveyCategoryDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_Survey_SurveyCategoryDescriptor]
    ON [edfi].[Survey]([SurveyCategoryDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[Survey].[UX_Survey_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_Survey_Id]
    ON [edfi].[Survey]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[Survey].[IX_Survey_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Survey_EducationOrganizationId]
    ON [edfi].[Survey]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Survey].[IX_Survey_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Survey_SchoolId]
    ON [edfi].[Survey]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[Survey].[IX_Survey_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Survey_AggregateId]
    ON [edfi].[Survey]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[Survey].[UX_Survey_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_Survey_ChangeVersion]
    ON [edfi].[Survey]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyCourseAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyCourseAssociation] (
    [CourseCode]              NVARCHAR (60)    NOT NULL,
    [EducationOrganizationId] BIGINT           NOT NULL,
    [Namespace]               NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]        NVARCHAR (60)    NOT NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [SurveyCourseAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [SurveyCourseAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [SurveyCourseAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyCourseAssociation_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [SurveyCourseAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyCourseAssociation_PK1] PRIMARY KEY CLUSTERED ([CourseCode] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyCourseAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyCourseAssociation] ([CourseCode], [EducationOrganizationId], [Namespace], [SurveyIdentifier], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [CourseCode],
                 [EducationOrganizationId],
                 [Namespace],
                 [SurveyIdentifier],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyCourseAssociation]
        ORDER BY [CourseCode] ASC, [EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyCourseAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyCourseAssociation]', N'SurveyCourseAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyCourseAssociation_PK1]', N'SurveyCourseAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[FK_SurveyCourseAssociation_Course]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyCourseAssociation_Course]
    ON [edfi].[SurveyCourseAssociation]([CourseCode] ASC, [EducationOrganizationId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[FK_SurveyCourseAssociation_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyCourseAssociation_Survey]
    ON [edfi].[SurveyCourseAssociation]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[UX_SurveyCourseAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyCourseAssociation_Id]
    ON [edfi].[SurveyCourseAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[IX_SurveyCourseAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyCourseAssociation_EducationOrganizationId]
    ON [edfi].[SurveyCourseAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[IX_SurveyCourseAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyCourseAssociation_AggregateId]
    ON [edfi].[SurveyCourseAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyCourseAssociation].[UX_SurveyCourseAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyCourseAssociation_ChangeVersion]
    ON [edfi].[SurveyCourseAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyProgramAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyProgramAssociation] (
    [EducationOrganizationId] BIGINT           NOT NULL,
    [Namespace]               NVARCHAR (255)   NOT NULL,
    [ProgramName]             NVARCHAR (60)    NOT NULL,
    [ProgramTypeDescriptorId] INT              NOT NULL,
    [SurveyIdentifier]        NVARCHAR (60)    NOT NULL,
    [Discriminator]           NVARCHAR (128)   NULL,
    [CreateDate]              DATETIME2 (7)    CONSTRAINT [SurveyProgramAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]        DATETIME2 (7)    CONSTRAINT [SurveyProgramAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                      UNIQUEIDENTIFIER CONSTRAINT [SurveyProgramAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]             INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyProgramAssociation_AggSeq]) NOT NULL,
    [AggregateData]           VARBINARY (8000) NULL,
    [ChangeVersion]           BIGINT           CONSTRAINT [SurveyProgramAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyProgramAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [Namespace] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [SurveyIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyProgramAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyProgramAssociation] ([EducationOrganizationId], [Namespace], [ProgramName], [ProgramTypeDescriptorId], [SurveyIdentifier], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [Namespace],
                 [ProgramName],
                 [ProgramTypeDescriptorId],
                 [SurveyIdentifier],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyProgramAssociation]
        ORDER BY [EducationOrganizationId] ASC, [Namespace] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC, [SurveyIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyProgramAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyProgramAssociation]', N'SurveyProgramAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyProgramAssociation_PK1]', N'SurveyProgramAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[FK_SurveyProgramAssociation_Program]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyProgramAssociation_Program]
    ON [edfi].[SurveyProgramAssociation]([EducationOrganizationId] ASC, [ProgramName] ASC, [ProgramTypeDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[FK_SurveyProgramAssociation_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyProgramAssociation_Survey]
    ON [edfi].[SurveyProgramAssociation]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[UX_SurveyProgramAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyProgramAssociation_Id]
    ON [edfi].[SurveyProgramAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[IX_SurveyProgramAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyProgramAssociation_EducationOrganizationId]
    ON [edfi].[SurveyProgramAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[IX_SurveyProgramAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyProgramAssociation_AggregateId]
    ON [edfi].[SurveyProgramAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyProgramAssociation].[UX_SurveyProgramAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyProgramAssociation_ChangeVersion]
    ON [edfi].[SurveyProgramAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyQuestion]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyQuestion] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [QuestionCode]             NVARCHAR (60)    NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [QuestionFormDescriptorId] INT              NOT NULL,
    [QuestionText]             NVARCHAR (1024)  NOT NULL,
    [SurveySectionTitle]       NVARCHAR (255)   NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveyQuestion_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveyQuestion_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveyQuestion_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyQuestion_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveyQuestion_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyQuestion_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [QuestionCode] ASC, [SurveyIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyQuestion])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyQuestion] ([Namespace], [QuestionCode], [SurveyIdentifier], [QuestionFormDescriptorId], [QuestionText], [SurveySectionTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [QuestionCode],
                 [SurveyIdentifier],
                 [QuestionFormDescriptorId],
                 [QuestionText],
                 [SurveySectionTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyQuestion]
        ORDER BY [Namespace] ASC, [QuestionCode] ASC, [SurveyIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyQuestion];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyQuestion]', N'SurveyQuestion';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyQuestion_PK1]', N'SurveyQuestion_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[FK_SurveyQuestion_QuestionFormDescriptor]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyQuestion_QuestionFormDescriptor]
    ON [edfi].[SurveyQuestion]([QuestionFormDescriptorId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[FK_SurveyQuestion_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyQuestion_Survey]
    ON [edfi].[SurveyQuestion]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[FK_SurveyQuestion_SurveySection]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyQuestion_SurveySection]
    ON [edfi].[SurveyQuestion]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveySectionTitle] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[UX_SurveyQuestion_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyQuestion_Id]
    ON [edfi].[SurveyQuestion]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[IX_SurveyQuestion_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyQuestion_AggregateId]
    ON [edfi].[SurveyQuestion]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestion].[UX_SurveyQuestion_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyQuestion_ChangeVersion]
    ON [edfi].[SurveyQuestion]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyQuestionResponse]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyQuestionResponse] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [QuestionCode]             NVARCHAR (60)    NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [Comment]                  NVARCHAR (1024)  NULL,
    [NoResponse]               BIT              NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveyQuestionResponse_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveyQuestionResponse_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveyQuestionResponse_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyQuestionResponse_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveyQuestionResponse_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyQuestionResponse_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [QuestionCode] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyQuestionResponse])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyQuestionResponse] ([Namespace], [QuestionCode], [SurveyIdentifier], [SurveyResponseIdentifier], [Comment], [NoResponse], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [QuestionCode],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [Comment],
                 [NoResponse],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyQuestionResponse]
        ORDER BY [Namespace] ASC, [QuestionCode] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyQuestionResponse];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyQuestionResponse]', N'SurveyQuestionResponse';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyQuestionResponse_PK1]', N'SurveyQuestionResponse_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyQuestionResponse].[FK_SurveyQuestionResponse_SurveyQuestion]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyQuestionResponse_SurveyQuestion]
    ON [edfi].[SurveyQuestionResponse]([Namespace] ASC, [QuestionCode] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestionResponse].[FK_SurveyQuestionResponse_SurveyResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyQuestionResponse_SurveyResponse]
    ON [edfi].[SurveyQuestionResponse]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestionResponse].[UX_SurveyQuestionResponse_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyQuestionResponse_Id]
    ON [edfi].[SurveyQuestionResponse]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyQuestionResponse].[IX_SurveyQuestionResponse_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyQuestionResponse_AggregateId]
    ON [edfi].[SurveyQuestionResponse]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyQuestionResponse].[UX_SurveyQuestionResponse_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyQuestionResponse_ChangeVersion]
    ON [edfi].[SurveyQuestionResponse]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyResponse]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyResponse] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [ContactUSI]               INT              NULL,
    [ElectronicMailAddress]    NVARCHAR (128)   NULL,
    [FullName]                 NVARCHAR (80)    NULL,
    [Location]                 NVARCHAR (75)    NULL,
    [ResponseDate]             DATE             NOT NULL,
    [ResponseTime]             INT              NULL,
    [StaffUSI]                 INT              NULL,
    [StudentUSI]               INT              NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveyResponse_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveyResponse_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveyResponse_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyResponse_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveyResponse_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyResponse_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyResponse])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [ContactUSI], [ElectronicMailAddress], [FullName], [Location], [ResponseDate], [ResponseTime], [StaffUSI], [StudentUSI], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [ContactUSI],
                 [ElectronicMailAddress],
                 [FullName],
                 [Location],
                 [ResponseDate],
                 [ResponseTime],
                 [StaffUSI],
                 [StudentUSI],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyResponse]
        ORDER BY [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyResponse];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyResponse]', N'SurveyResponse';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyResponse_PK1]', N'SurveyResponse_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[FK_SurveyResponse_Contact]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponse_Contact]
    ON [edfi].[SurveyResponse]([ContactUSI] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[FK_SurveyResponse_Staff]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponse_Staff]
    ON [edfi].[SurveyResponse]([StaffUSI] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[FK_SurveyResponse_Student]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponse_Student]
    ON [edfi].[SurveyResponse]([StudentUSI] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[FK_SurveyResponse_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponse_Survey]
    ON [edfi].[SurveyResponse]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[UX_SurveyResponse_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyResponse_Id]
    ON [edfi].[SurveyResponse]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[IX_SurveyResponse_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponse_AggregateId]
    ON [edfi].[SurveyResponse]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[IX_SurveyResponse_ContactUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponse_ContactUSI]
    ON [edfi].[SurveyResponse]([ContactUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[IX_SurveyResponse_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponse_StaffUSI]
    ON [edfi].[SurveyResponse]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[IX_SurveyResponse_StudentUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponse_StudentUSI]
    ON [edfi].[SurveyResponse]([StudentUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyResponse].[UX_SurveyResponse_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyResponse_ChangeVersion]
    ON [edfi].[SurveyResponse]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyResponseEducationOrganizationTargetAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyResponseEducationOrganizationTargetAssociation] (
    [EducationOrganizationId]  BIGINT           NOT NULL,
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyResponseEducationOrganizationTargetAssociation_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveyResponseEducationOrganizationTargetAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyResponseEducationOrganizationTargetAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyResponseEducationOrganizationTargetAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyResponseEducationOrganizationTargetAssociation] ([EducationOrganizationId], [Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [Namespace],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyResponseEducationOrganizationTargetAssociation]
        ORDER BY [EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyResponseEducationOrganizationTargetAssociation]', N'SurveyResponseEducationOrganizationTargetAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyResponseEducationOrganizationTargetAssociation_PK1]', N'SurveyResponseEducationOrganizationTargetAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse]
    ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[UX_SurveyResponseEducationOrganizationTargetAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyResponseEducationOrganizationTargetAssociation_Id]
    ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[IX_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganizationId]
    ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[IX_SurveyResponseEducationOrganizationTargetAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponseEducationOrganizationTargetAssociation_AggregateId]
    ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[UX_SurveyResponseEducationOrganizationTargetAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyResponseEducationOrganizationTargetAssociation_ChangeVersion]
    ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveyResponseStaffTargetAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveyResponseStaffTargetAssociation] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [StaffUSI]                 INT              NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveyResponseStaffTargetAssociation_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveyResponseStaffTargetAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveyResponseStaffTargetAssociation_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [StaffUSI] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveyResponseStaffTargetAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveyResponseStaffTargetAssociation] ([Namespace], [StaffUSI], [SurveyIdentifier], [SurveyResponseIdentifier], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [StaffUSI],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveyResponseStaffTargetAssociation]
        ORDER BY [Namespace] ASC, [StaffUSI] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveyResponseStaffTargetAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveyResponseStaffTargetAssociation]', N'SurveyResponseStaffTargetAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveyResponseStaffTargetAssociation_PK1]', N'SurveyResponseStaffTargetAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveyResponseStaffTargetAssociation].[FK_SurveyResponseStaffTargetAssociation_SurveyResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveyResponseStaffTargetAssociation_SurveyResponse]
    ON [edfi].[SurveyResponseStaffTargetAssociation]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponseStaffTargetAssociation].[UX_SurveyResponseStaffTargetAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveyResponseStaffTargetAssociation_Id]
    ON [edfi].[SurveyResponseStaffTargetAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveyResponseStaffTargetAssociation].[IX_SurveyResponseStaffTargetAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponseStaffTargetAssociation_AggregateId]
    ON [edfi].[SurveyResponseStaffTargetAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveyResponseStaffTargetAssociation].[IX_SurveyResponseStaffTargetAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveyResponseStaffTargetAssociation_StaffUSI]
    ON [edfi].[SurveyResponseStaffTargetAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveyResponseStaffTargetAssociation].[UX_SurveyResponseStaffTargetAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveyResponseStaffTargetAssociation_ChangeVersion]
    ON [edfi].[SurveyResponseStaffTargetAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveySection]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveySection] (
    [Namespace]          NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]   NVARCHAR (60)    NOT NULL,
    [SurveySectionTitle] NVARCHAR (255)   NOT NULL,
    [Discriminator]      NVARCHAR (128)   NULL,
    [CreateDate]         DATETIME2 (7)    CONSTRAINT [SurveySection_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]   DATETIME2 (7)    CONSTRAINT [SurveySection_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                 UNIQUEIDENTIFIER CONSTRAINT [SurveySection_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]        INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveySection_AggSeq]) NOT NULL,
    [AggregateData]      VARBINARY (8000) NULL,
    [ChangeVersion]      BIGINT           CONSTRAINT [SurveySection_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveySection_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [SurveyIdentifier] ASC, [SurveySectionTitle] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveySection])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveySection] ([Namespace], [SurveyIdentifier], [SurveySectionTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [SurveyIdentifier],
                 [SurveySectionTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveySection]
        ORDER BY [Namespace] ASC, [SurveyIdentifier] ASC, [SurveySectionTitle] ASC;
    END

DROP TABLE [edfi].[SurveySection];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveySection]', N'SurveySection';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveySection_PK1]', N'SurveySection_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveySection].[FK_SurveySection_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySection_Survey]
    ON [edfi].[SurveySection]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySection].[UX_SurveySection_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveySection_Id]
    ON [edfi].[SurveySection]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveySection].[IX_SurveySection_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySection_AggregateId]
    ON [edfi].[SurveySection]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySection].[UX_SurveySection_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveySection_ChangeVersion]
    ON [edfi].[SurveySection]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveySectionAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveySectionAssociation] (
    [LocalCourseCode]   NVARCHAR (60)    NOT NULL,
    [Namespace]         NVARCHAR (255)   NOT NULL,
    [SchoolId]          BIGINT           NOT NULL,
    [SchoolYear]        SMALLINT         NOT NULL,
    [SectionIdentifier] NVARCHAR (255)   NOT NULL,
    [SessionName]       NVARCHAR (60)    NOT NULL,
    [SurveyIdentifier]  NVARCHAR (60)    NOT NULL,
    [Discriminator]     NVARCHAR (128)   NULL,
    [CreateDate]        DATETIME2 (7)    CONSTRAINT [SurveySectionAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]  DATETIME2 (7)    CONSTRAINT [SurveySectionAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                UNIQUEIDENTIFIER CONSTRAINT [SurveySectionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]       INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveySectionAssociation_AggSeq]) NOT NULL,
    [AggregateData]     VARBINARY (8000) NULL,
    [ChangeVersion]     BIGINT           CONSTRAINT [SurveySectionAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveySectionAssociation_PK1] PRIMARY KEY CLUSTERED ([LocalCourseCode] ASC, [Namespace] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [SurveyIdentifier] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveySectionAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveySectionAssociation] ([LocalCourseCode], [Namespace], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [SurveyIdentifier], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [LocalCourseCode],
                 [Namespace],
                 [SchoolId],
                 [SchoolYear],
                 [SectionIdentifier],
                 [SessionName],
                 [SurveyIdentifier],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveySectionAssociation]
        ORDER BY [LocalCourseCode] ASC, [Namespace] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC, [SurveyIdentifier] ASC;
    END

DROP TABLE [edfi].[SurveySectionAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveySectionAssociation]', N'SurveySectionAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveySectionAssociation_PK1]', N'SurveySectionAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[FK_SurveySectionAssociation_Section]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionAssociation_Section]
    ON [edfi].[SurveySectionAssociation]([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [SectionIdentifier] ASC, [SessionName] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[FK_SurveySectionAssociation_Survey]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionAssociation_Survey]
    ON [edfi].[SurveySectionAssociation]([Namespace] ASC, [SurveyIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[UX_SurveySectionAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveySectionAssociation_Id]
    ON [edfi].[SurveySectionAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[IX_SurveySectionAssociation_SchoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionAssociation_SchoolId]
    ON [edfi].[SurveySectionAssociation]([SchoolId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[IX_SurveySectionAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionAssociation_AggregateId]
    ON [edfi].[SurveySectionAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionAssociation].[UX_SurveySectionAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveySectionAssociation_ChangeVersion]
    ON [edfi].[SurveySectionAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveySectionResponse]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveySectionResponse] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [SurveySectionTitle]       NVARCHAR (255)   NOT NULL,
    [SectionRating]            DECIMAL (9, 3)   NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveySectionResponse_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveySectionResponse_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveySectionResponse_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveySectionResponse_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveySectionResponse_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveySectionResponse_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveySectionResponse])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveySectionResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle], [SectionRating], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [SurveySectionTitle],
                 [SectionRating],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveySectionResponse]
        ORDER BY [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC;
    END

DROP TABLE [edfi].[SurveySectionResponse];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveySectionResponse]', N'SurveySectionResponse';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveySectionResponse_PK1]', N'SurveySectionResponse_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveySectionResponse].[FK_SurveySectionResponse_SurveyResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionResponse_SurveyResponse]
    ON [edfi].[SurveySectionResponse]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponse].[FK_SurveySectionResponse_SurveySection]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionResponse_SurveySection]
    ON [edfi].[SurveySectionResponse]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveySectionTitle] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponse].[UX_SurveySectionResponse_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveySectionResponse_Id]
    ON [edfi].[SurveySectionResponse]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponse].[IX_SurveySectionResponse_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionResponse_AggregateId]
    ON [edfi].[SurveySectionResponse]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponse].[UX_SurveySectionResponse_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveySectionResponse_ChangeVersion]
    ON [edfi].[SurveySectionResponse]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveySectionResponseEducationOrganizationTargetAssociation] (
    [EducationOrganizationId]  BIGINT           NOT NULL,
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [SurveySectionTitle]       NVARCHAR (255)   NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveySectionResponseEducationOrganizationTargetAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveySectionResponseEducationOrganizationTargetAssociation_PK1] PRIMARY KEY CLUSTERED ([EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveySectionResponseEducationOrganizationTargetAssociation] ([EducationOrganizationId], [Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [EducationOrganizationId],
                 [Namespace],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [SurveySectionTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]
        ORDER BY [EducationOrganizationId] ASC, [Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC;
    END

DROP TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveySectionResponseEducationOrganizationTargetAssociation]', N'SurveySectionResponseEducationOrganizationTargetAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveySectionResponseEducationOrganizationTargetAssociation_PK1]', N'SurveySectionResponseEducationOrganizationTargetAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse]
    ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[UX_SurveySectionResponseEducationOrganizationTargetAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveySectionResponseEducationOrganizationTargetAssociation_Id]
    ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[IX_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganizationId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganizationId]
    ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]([EducationOrganizationId] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[IX_SurveySectionResponseEducationOrganizationTargetAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionResponseEducationOrganizationTargetAssociation_AggregateId]
    ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[UX_SurveySectionResponseEducationOrganizationTargetAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveySectionResponseEducationOrganizationTargetAssociation_ChangeVersion]
    ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]([ChangeVersion] ASC);


GO
PRINT N'Starting rebuilding table [edfi].[SurveySectionResponseStaffTargetAssociation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [edfi].[tmp_ms_xx_SurveySectionResponseStaffTargetAssociation] (
    [Namespace]                NVARCHAR (255)   NOT NULL,
    [StaffUSI]                 INT              NOT NULL,
    [SurveyIdentifier]         NVARCHAR (60)    NOT NULL,
    [SurveyResponseIdentifier] NVARCHAR (60)    NOT NULL,
    [SurveySectionTitle]       NVARCHAR (255)   NOT NULL,
    [Discriminator]            NVARCHAR (128)   NULL,
    [CreateDate]               DATETIME2 (7)    CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_CreateDate] DEFAULT (getutcdate()) NOT NULL,
    [LastModifiedDate]         DATETIME2 (7)    CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                       UNIQUEIDENTIFIER CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [AggregateId]              INT              DEFAULT ( NEXT VALUE FOR [edfi].[SurveySectionResponseStaffTargetAssociation_AggSeq]) NOT NULL,
    [AggregateData]            VARBINARY (8000) NULL,
    [ChangeVersion]            BIGINT           CONSTRAINT [SurveySectionResponseStaffTargetAssociation_DF_ChangeVersion] DEFAULT ( NEXT VALUE FOR [changes].[ChangeVersionSequence]) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_SurveySectionResponseStaffTargetAssociation_PK1] PRIMARY KEY CLUSTERED ([Namespace] ASC, [StaffUSI] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [edfi].[SurveySectionResponseStaffTargetAssociation])
    BEGIN
        INSERT INTO [edfi].[tmp_ms_xx_SurveySectionResponseStaffTargetAssociation] ([Namespace], [StaffUSI], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle], [Discriminator], [CreateDate], [LastModifiedDate], [Id], [ChangeVersion])
        SELECT   [Namespace],
                 [StaffUSI],
                 [SurveyIdentifier],
                 [SurveyResponseIdentifier],
                 [SurveySectionTitle],
                 [Discriminator],
                 [CreateDate],
                 [LastModifiedDate],
                 [Id],
                 [ChangeVersion]
        FROM     [edfi].[SurveySectionResponseStaffTargetAssociation]
        ORDER BY [Namespace] ASC, [StaffUSI] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC;
    END

DROP TABLE [edfi].[SurveySectionResponseStaffTargetAssociation];

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_SurveySectionResponseStaffTargetAssociation]', N'SurveySectionResponseStaffTargetAssociation';

EXECUTE sp_rename N'[edfi].[tmp_ms_xx_constraint_SurveySectionResponseStaffTargetAssociation_PK1]', N'SurveySectionResponseStaffTargetAssociation_PK', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseStaffTargetAssociation].[FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse]...';


GO
CREATE NONCLUSTERED INDEX [FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation]([Namespace] ASC, [SurveyIdentifier] ASC, [SurveyResponseIdentifier] ASC, [SurveySectionTitle] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseStaffTargetAssociation].[UX_SurveySectionResponseStaffTargetAssociation_Id]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UX_SurveySectionResponseStaffTargetAssociation_Id]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation]([Id] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseStaffTargetAssociation].[IX_SurveySectionResponseStaffTargetAssociation_AggregateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionResponseStaffTargetAssociation_AggregateId]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation]([AggregateId] ASC);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseStaffTargetAssociation].[IX_SurveySectionResponseStaffTargetAssociation_StaffUSI]...';


GO
CREATE NONCLUSTERED INDEX [IX_SurveySectionResponseStaffTargetAssociation_StaffUSI]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation]([StaffUSI] ASC)
    INCLUDE([AggregateId]);


GO
PRINT N'Creating Index [edfi].[SurveySectionResponseStaffTargetAssociation].[UX_SurveySectionResponseStaffTargetAssociation_ChangeVersion]...';


GO
CREATE NONCLUSTERED INDEX [UX_SurveySectionResponseStaffTargetAssociation_ChangeVersion]
    ON [edfi].[SurveySectionResponseStaffTargetAssociation]([ChangeVersion] ASC);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AcademicWeek_School]...';


GO
ALTER TABLE [edfi].[AcademicWeek] WITH NOCHECK
    ADD CONSTRAINT [FK_AcademicWeek_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SessionAcademicWeek_AcademicWeek]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionAcademicWeek_AcademicWeek] FOREIGN KEY ([SchoolId], [WeekIdentifier]) REFERENCES [edfi].[AcademicWeek] ([SchoolId], [WeekIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AccountabilityRating_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountabilityRating_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AccountabilityRating_SchoolYearType]...';


GO
ALTER TABLE [edfi].[AccountabilityRating] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountabilityRating_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentSection_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentSection] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentSection_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Assessment_AssessmentCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[Assessment] WITH NOCHECK
    ADD CONSTRAINT [FK_Assessment_AssessmentCategoryDescriptor] FOREIGN KEY ([AssessmentCategoryDescriptorId]) REFERENCES [edfi].[AssessmentCategoryDescriptor] ([AssessmentCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Assessment_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Assessment] WITH NOCHECK
    ADD CONSTRAINT [FK_Assessment_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAcademicSubject_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAcademicSubject_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAssessedGradeLevel_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentAssessedGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAssessedGradeLevel_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentContentStandard_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentContentStandard_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentIdentificationCode_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentIdentificationCode_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItem_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItem_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessment_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentLanguage_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentLanguage_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentPerformanceLevel_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentPerformanceLevel_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentPeriod_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentPeriod_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanRequiredAssessment_Assessment]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentPlatformType_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentPlatformType] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentPlatformType_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentProgram_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentProgram_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScore_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentScore] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScore_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentItem_AssessmentItem]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentItem_AssessmentItem] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[AssessmentItem] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItem_AssessmentItemCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItem_AssessmentItemCategoryDescriptor] FOREIGN KEY ([AssessmentItemCategoryDescriptorId]) REFERENCES [edfi].[AssessmentItemCategoryDescriptor] ([AssessmentItemCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItemLearningStandard_AssessmentItem]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItemLearningStandard_AssessmentItem] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[AssessmentItem] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItemPossibleResponse_AssessmentItem]...';


GO
ALTER TABLE [edfi].[AssessmentItemPossibleResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItemPossibleResponse_AssessmentItem] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[AssessmentItem] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentAssessmentItem_AssessmentItem]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem] FOREIGN KEY ([AssessmentIdentifier], [AssessmentItemIdentificationCode], [Namespace]) REFERENCES [edfi].[AssessmentItem] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandardLearningStandard_AssessmentScoreRangeLearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_AssessmentScoreRangeLearningStandard] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [ScoreRangeId]) REFERENCES [edfi].[AssessmentScoreRangeLearningStandard] ([AssessmentIdentifier], [Namespace], [ScoreRangeId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor] FOREIGN KEY ([AssessmentReportingMethodDescriptorId]) REFERENCES [edfi].[AssessmentReportingMethodDescriptor] ([AssessmentReportingMethodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_BalanceSheetDimensionReportingTag_BalanceSheetDimension]...';


GO
ALTER TABLE [edfi].[BalanceSheetDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_BalanceSheetDimensionReportingTag_BalanceSheetDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[BalanceSheetDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_BalanceSheetDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_BalanceSheetDimension] FOREIGN KEY ([BalanceSheetCode], [FiscalYear]) REFERENCES [edfi].[BalanceSheetDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_BellSchedule_School]...';


GO
ALTER TABLE [edfi].[BellSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_BellSchedule_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_BellScheduleClassPeriod_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_BellScheduleClassPeriod_BellSchedule] FOREIGN KEY ([BellScheduleName], [SchoolId]) REFERENCES [edfi].[BellSchedule] ([BellScheduleName], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BellScheduleDate_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleDate] WITH NOCHECK
    ADD CONSTRAINT [FK_BellScheduleDate_BellSchedule] FOREIGN KEY ([BellScheduleName], [SchoolId]) REFERENCES [edfi].[BellSchedule] ([BellScheduleName], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BellScheduleGradeLevel_BellSchedule]...';


GO
ALTER TABLE [edfi].[BellScheduleGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_BellScheduleGradeLevel_BellSchedule] FOREIGN KEY ([BellScheduleName], [SchoolId]) REFERENCES [edfi].[BellSchedule] ([BellScheduleName], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_Calendar]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_Calendar] FOREIGN KEY ([CalendarCode], [SchoolId], [SchoolYear]) REFERENCES [edfi].[Calendar] ([CalendarCode], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Calendar_CalendarTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Calendar] WITH NOCHECK
    ADD CONSTRAINT [FK_Calendar_CalendarTypeDescriptor] FOREIGN KEY ([CalendarTypeDescriptorId]) REFERENCES [edfi].[CalendarTypeDescriptor] ([CalendarTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Calendar_School]...';


GO
ALTER TABLE [edfi].[Calendar] WITH NOCHECK
    ADD CONSTRAINT [FK_Calendar_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Calendar_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Calendar] WITH NOCHECK
    ADD CONSTRAINT [FK_Calendar_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CalendarDate_Calendar]...';


GO
ALTER TABLE [edfi].[CalendarDate] WITH NOCHECK
    ADD CONSTRAINT [FK_CalendarDate_Calendar] FOREIGN KEY ([CalendarCode], [SchoolId], [SchoolYear]) REFERENCES [edfi].[Calendar] ([CalendarCode], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CalendarGradeLevel_Calendar]...';


GO
ALTER TABLE [edfi].[CalendarGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_CalendarGradeLevel_Calendar] FOREIGN KEY ([CalendarCode], [SchoolId], [SchoolYear]) REFERENCES [edfi].[Calendar] ([CalendarCode], [SchoolId], [SchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociation_Calendar]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociation_Calendar] FOREIGN KEY ([CalendarCode], [SchoolId], [SchoolYear]) REFERENCES [edfi].[Calendar] ([CalendarCode], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CalendarDateCalendarEvent_CalendarDate]...';


GO
ALTER TABLE [edfi].[CalendarDateCalendarEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarDate] FOREIGN KEY ([CalendarCode], [Date], [SchoolId], [SchoolYear]) REFERENCES [edfi].[CalendarDate] ([CalendarCode], [Date], [SchoolId], [SchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_CalendarDate]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_CalendarDate] FOREIGN KEY ([CalendarCode], [Date], [SchoolId], [SchoolYear]) REFERENCES [edfi].[CalendarDate] ([CalendarCode], [Date], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalAccount_ChartOfAccount]...';


GO
ALTER TABLE [edfi].[LocalAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalAccount_ChartOfAccount] FOREIGN KEY ([ChartOfAccountIdentifier], [ChartOfAccountEducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[ChartOfAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_AccountTypeDescriptor]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_AccountTypeDescriptor] FOREIGN KEY ([AccountTypeDescriptorId]) REFERENCES [edfi].[AccountTypeDescriptor] ([AccountTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_EducationOrganization]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_FunctionDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_FunctionDimension] FOREIGN KEY ([FunctionCode], [FiscalYear]) REFERENCES [edfi].[FunctionDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_FundDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_FundDimension] FOREIGN KEY ([FundCode], [FiscalYear]) REFERENCES [edfi].[FundDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_ObjectDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_ObjectDimension] FOREIGN KEY ([ObjectCode], [FiscalYear]) REFERENCES [edfi].[ObjectDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_OperationalUnitDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_OperationalUnitDimension] FOREIGN KEY ([OperationalUnitCode], [FiscalYear]) REFERENCES [edfi].[OperationalUnitDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_ProgramDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_ProgramDimension] FOREIGN KEY ([ProgramCode], [FiscalYear]) REFERENCES [edfi].[ProgramDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_ProjectDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_ProjectDimension] FOREIGN KEY ([ProjectCode], [FiscalYear]) REFERENCES [edfi].[ProjectDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccount_SourceDimension]...';


GO
ALTER TABLE [edfi].[ChartOfAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccount_SourceDimension] FOREIGN KEY ([SourceCode], [FiscalYear]) REFERENCES [edfi].[SourceDimension] ([Code], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ChartOfAccountReportingTag_ChartOfAccount]...';


GO
ALTER TABLE [edfi].[ChartOfAccountReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_ChartOfAccountReportingTag_ChartOfAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[ChartOfAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BellScheduleClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[BellScheduleClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_BellScheduleClassPeriod_ClassPeriod] FOREIGN KEY ([ClassPeriodName], [SchoolId]) REFERENCES [edfi].[ClassPeriod] ([ClassPeriodName], [SchoolId]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEventClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_ClassPeriod] FOREIGN KEY ([ClassPeriodName], [SchoolId]) REFERENCES [edfi].[ClassPeriod] ([ClassPeriodName], [SchoolId]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ClassPeriod_School]...';


GO
ALTER TABLE [edfi].[ClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassPeriod_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ClassPeriodMeetingTime_ClassPeriod]...';


GO
ALTER TABLE [edfi].[ClassPeriodMeetingTime] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassPeriodMeetingTime_ClassPeriod] FOREIGN KEY ([ClassPeriodName], [SchoolId]) REFERENCES [edfi].[ClassPeriod] ([ClassPeriodName], [SchoolId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionClassPeriod_ClassPeriod]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionClassPeriod_ClassPeriod] FOREIGN KEY ([ClassPeriodName], [SchoolId]) REFERENCES [edfi].[ClassPeriod] ([ClassPeriodName], [SchoolId]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffCohortAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffCohortAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId]) REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCohortAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCohortAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId]) REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Cohort_AcademicSubjectDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] WITH NOCHECK
    ADD CONSTRAINT [FK_Cohort_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId]) REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Cohort_CohortScopeDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] WITH NOCHECK
    ADD CONSTRAINT [FK_Cohort_CohortScopeDescriptor] FOREIGN KEY ([CohortScopeDescriptorId]) REFERENCES [edfi].[CohortScopeDescriptor] ([CohortScopeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Cohort_CohortTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Cohort] WITH NOCHECK
    ADD CONSTRAINT [FK_Cohort_CohortTypeDescriptor] FOREIGN KEY ([CohortTypeDescriptorId]) REFERENCES [edfi].[CohortTypeDescriptor] ([CohortTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Cohort_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Cohort] WITH NOCHECK
    ADD CONSTRAINT [FK_Cohort_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAssociation_Cohort]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [CohortEducationOrganizationId]) REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CohortProgram_Cohort]...';


GO
ALTER TABLE [edfi].[CohortProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_CohortProgram_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId]) REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CommunityProviderLicense_CommunityProvider]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] WITH NOCHECK
    ADD CONSTRAINT [FK_CommunityProviderLicense_CommunityProvider] FOREIGN KEY ([CommunityProviderId]) REFERENCES [edfi].[CommunityProvider] ([CommunityProviderId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CommunityProviderLicense_LicenseStatusDescriptor]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] WITH NOCHECK
    ADD CONSTRAINT [FK_CommunityProviderLicense_LicenseStatusDescriptor] FOREIGN KEY ([LicenseStatusDescriptorId]) REFERENCES [edfi].[LicenseStatusDescriptor] ([LicenseStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CommunityProviderLicense_LicenseTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CommunityProviderLicense] WITH NOCHECK
    ADD CONSTRAINT [FK_CommunityProviderLicense_LicenseTypeDescriptor] FOREIGN KEY ([LicenseTypeDescriptorId]) REFERENCES [edfi].[LicenseTypeDescriptor] ([LicenseTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjective_CompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyObjective] FOREIGN KEY ([ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId]) REFERENCES [edfi].[CompetencyObjective] ([EducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CompetencyObjective_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_CompetencyObjective_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CompetencyObjective_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[CompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_CompetencyObjective_GradeLevelDescriptor] FOREIGN KEY ([ObjectiveGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactLanguage_Contact]...';


GO
ALTER TABLE [edfi].[ContactLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactLanguage_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactOtherName_Contact]...';


GO
ALTER TABLE [edfi].[ContactOtherName] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactOtherName_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactPersonalIdentificationDocument_Contact]...';


GO
ALTER TABLE [edfi].[ContactPersonalIdentificationDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactPersonalIdentificationDocument_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponse_Contact]...';


GO
ALTER TABLE [edfi].[SurveyResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponse_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactTelephone_Contact]...';


GO
ALTER TABLE [edfi].[ContactTelephone] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactTelephone_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentContactAssociation_Contact]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentContactAssociation_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Contact_LevelOfEducationDescriptor]...';


GO
ALTER TABLE [edfi].[Contact] WITH NOCHECK
    ADD CONSTRAINT [FK_Contact_LevelOfEducationDescriptor] FOREIGN KEY ([HighestCompletedLevelOfEducationDescriptorId]) REFERENCES [edfi].[LevelOfEducationDescriptor] ([LevelOfEducationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Contact_Person]...';


GO
ALTER TABLE [edfi].[Contact] WITH NOCHECK
    ADD CONSTRAINT [FK_Contact_Person] FOREIGN KEY ([PersonId], [SourceSystemDescriptorId]) REFERENCES [edfi].[Person] ([PersonId], [SourceSystemDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Contact_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Contact] WITH NOCHECK
    ADD CONSTRAINT [FK_Contact_SexDescriptor] FOREIGN KEY ([SexDescriptorId]) REFERENCES [edfi].[SexDescriptor] ([SexDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactAddress_Contact]...';


GO
ALTER TABLE [edfi].[ContactAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactAddress_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactElectronicMail_Contact]...';


GO
ALTER TABLE [edfi].[ContactElectronicMail] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactElectronicMail_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactInternationalAddress_Contact]...';


GO
ALTER TABLE [edfi].[ContactInternationalAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactInternationalAddress_Contact] FOREIGN KEY ([ContactUSI]) REFERENCES [edfi].[Contact] ([ContactUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_CareerPathwayDescriptor]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_CareerPathwayDescriptor] FOREIGN KEY ([CareerPathwayDescriptorId]) REFERENCES [edfi].[CareerPathwayDescriptor] ([CareerPathwayDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_CourseDefinedByDescriptor]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_CourseDefinedByDescriptor] FOREIGN KEY ([CourseDefinedByDescriptorId]) REFERENCES [edfi].[CourseDefinedByDescriptor] ([CourseDefinedByDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_CourseGPAApplicabilityDescriptor]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_CourseGPAApplicabilityDescriptor] FOREIGN KEY ([CourseGPAApplicabilityDescriptorId]) REFERENCES [edfi].[CourseGPAApplicabilityDescriptor] ([CourseGPAApplicabilityDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_CreditTypeDescriptor] FOREIGN KEY ([MinimumAvailableCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_CreditTypeDescriptor1] FOREIGN KEY ([MaximumAvailableCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Course_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Course] WITH NOCHECK
    ADD CONSTRAINT [FK_Course_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseAcademicSubject_Course]...';


GO
ALTER TABLE [edfi].[CourseAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseAcademicSubject_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseCompetencyLevel_Course]...';


GO
ALTER TABLE [edfi].[CourseCompetencyLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseCompetencyLevel_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseIdentificationCode_Course]...';


GO
ALTER TABLE [edfi].[CourseIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseIdentificationCode_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseLearningStandard_Course]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseLearningStandard_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseLevelCharacteristic_Course]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseLevelCharacteristic_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOfferedGradeLevel_Course]...';


GO
ALTER TABLE [edfi].[CourseOfferedGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOfferedGradeLevel_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOffering_Course]...';


GO
ALTER TABLE [edfi].[CourseOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOffering_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_Course]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_Course] FOREIGN KEY ([CourseCode], [CourseEducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanCreditsByCourseCourse_Course]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_Course] FOREIGN KEY ([CourseCode], [CourseEducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyCourseAssociation_Course]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyCourseAssociation_Course] FOREIGN KEY ([CourseCode], [EducationOrganizationId]) REFERENCES [edfi].[Course] ([CourseCode], [EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOffering_Session]...';


GO
ALTER TABLE [edfi].[CourseOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOffering_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOffering_School]...';


GO
ALTER TABLE [edfi].[CourseOffering] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOffering_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOfferingCourseLevelCharacteristic_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingCourseLevelCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOfferingCourseLevelCharacteristic_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOfferingCurriculumUsed_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseOfferingOfferedGradeLevel_CourseOffering]...';


GO
ALTER TABLE [edfi].[CourseOfferingOfferedGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseOfferingOfferedGradeLevel_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_CourseOffering]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_CourseAttemptResultDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_CourseAttemptResultDescriptor] FOREIGN KEY ([CourseAttemptResultDescriptorId]) REFERENCES [edfi].[CourseAttemptResultDescriptor] ([CourseAttemptResultDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_CourseRepeatCodeDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_CourseRepeatCodeDescriptor] FOREIGN KEY ([CourseRepeatCodeDescriptorId]) REFERENCES [edfi].[CourseRepeatCodeDescriptor] ([CourseRepeatCodeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor] FOREIGN KEY ([AttemptedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor1] FOREIGN KEY ([EarnedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_EducationOrganization] FOREIGN KEY ([ExternalEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_GradeLevelDescriptor] FOREIGN KEY ([WhenTakenGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_MethodCreditEarnedDescriptor]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_MethodCreditEarnedDescriptor] FOREIGN KEY ([MethodCreditEarnedDescriptorId]) REFERENCES [edfi].[MethodCreditEarnedDescriptor] ([MethodCreditEarnedDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_Staff]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_Staff] FOREIGN KEY ([ResponsibleTeacherStaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscript_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[CourseTranscript] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscript_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptAcademicSubject_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptAcademicSubject_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptAlternativeCourseIdentificationCode_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptAlternativeCourseIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptAlternativeCourseIdentificationCode_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptCourseProgram_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptCourseProgram_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptCreditCategory_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCreditCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptCreditCategory_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptPartialCourseTranscriptAwards_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptPartialCourseTranscriptAwards] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptPartialCourseTranscriptAwards_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptSection_CourseTranscript]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptSection_CourseTranscript] FOREIGN KEY ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultDescriptorId], [CourseCode], [CourseEducationOrganizationId], [EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffCredential_Credential]...';


GO
ALTER TABLE [edfi].[StaffCredential] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffCredential_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_Credential]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_Credential]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Credential_CredentialFieldDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] WITH NOCHECK
    ADD CONSTRAINT [FK_Credential_CredentialFieldDescriptor] FOREIGN KEY ([CredentialFieldDescriptorId]) REFERENCES [edfi].[CredentialFieldDescriptor] ([CredentialFieldDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Credential_CredentialTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] WITH NOCHECK
    ADD CONSTRAINT [FK_Credential_CredentialTypeDescriptor] FOREIGN KEY ([CredentialTypeDescriptorId]) REFERENCES [edfi].[CredentialTypeDescriptor] ([CredentialTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Credential_StateAbbreviationDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] WITH NOCHECK
    ADD CONSTRAINT [FK_Credential_StateAbbreviationDescriptor] FOREIGN KEY ([StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[StateAbbreviationDescriptor] ([StateAbbreviationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Credential_TeachingCredentialBasisDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] WITH NOCHECK
    ADD CONSTRAINT [FK_Credential_TeachingCredentialBasisDescriptor] FOREIGN KEY ([TeachingCredentialBasisDescriptorId]) REFERENCES [edfi].[TeachingCredentialBasisDescriptor] ([TeachingCredentialBasisDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Credential_TeachingCredentialDescriptor]...';


GO
ALTER TABLE [edfi].[Credential] WITH NOCHECK
    ADD CONSTRAINT [FK_Credential_TeachingCredentialDescriptor] FOREIGN KEY ([TeachingCredentialDescriptorId]) REFERENCES [edfi].[TeachingCredentialDescriptor] ([TeachingCredentialDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CredentialAcademicSubject_Credential]...';


GO
ALTER TABLE [edfi].[CredentialAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_CredentialAcademicSubject_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CredentialEndorsement_Credential]...';


GO
ALTER TABLE [edfi].[CredentialEndorsement] WITH NOCHECK
    ADD CONSTRAINT [FK_CredentialEndorsement_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CredentialGradeLevel_Credential]...';


GO
ALTER TABLE [edfi].[CredentialGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_CredentialGradeLevel_Credential] FOREIGN KEY ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) REFERENCES [edfi].[Credential] ([CredentialIdentifier], [StateOfIssueStateAbbreviationDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisplacedStudent_CrisisEvent]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_CrisisEvent] FOREIGN KEY ([CrisisEventName]) REFERENCES [edfi].[CrisisEvent] ([CrisisEventName]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CrisisEvent_CrisisTypeDescriptor]...';


GO
ALTER TABLE [edfi].[CrisisEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_CrisisEvent_CrisisTypeDescriptor] FOREIGN KEY ([CrisisTypeDescriptorId]) REFERENCES [edfi].[CrisisTypeDescriptor] ([CrisisTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_IDEAPartDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IDEAPartDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IDEAPartDescriptor_Descriptor] FOREIGN KEY ([IDEAPartDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OperationalStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[OperationalStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_OperationalStatusDescriptor_Descriptor] FOREIGN KEY ([OperationalStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_QuestionFormDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[QuestionFormDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_QuestionFormDescriptor_Descriptor] FOREIGN KEY ([QuestionFormDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_IdentificationDocumentUseDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IdentificationDocumentUseDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IdentificationDocumentUseDescriptor_Descriptor] FOREIGN KEY ([IdentificationDocumentUseDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SourceSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SourceSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SourceSystemDescriptor_Descriptor] FOREIGN KEY ([SourceSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RaceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RaceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RaceDescriptor_Descriptor] FOREIGN KEY ([RaceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ImmunizationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ImmunizationTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ImmunizationTypeDescriptor_Descriptor] FOREIGN KEY ([ImmunizationTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SpecialEducationExitReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationExitReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SpecialEducationExitReasonDescriptor_Descriptor] FOREIGN KEY ([SpecialEducationExitReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RatingLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RatingLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RatingLevelDescriptor_Descriptor] FOREIGN KEY ([RatingLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_IncidentLocationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IncidentLocationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IncidentLocationDescriptor_Descriptor] FOREIGN KEY ([IncidentLocationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StateAbbreviationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StateAbbreviationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StateAbbreviationDescriptor_Descriptor] FOREIGN KEY ([StateAbbreviationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SpecialEducationProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SpecialEducationProgramServiceDescriptor_Descriptor] FOREIGN KEY ([SpecialEducationProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReasonExitedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReasonExitedDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ReasonExitedDescriptor_Descriptor] FOREIGN KEY ([ReasonExitedDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssignmentLateStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssignmentLateStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssignmentLateStatusDescriptor_Descriptor] FOREIGN KEY ([AssignmentLateStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_IndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorDescriptor_Descriptor] FOREIGN KEY ([IndicatorDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SpecialEducationSettingDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SpecialEducationSettingDescriptor_Descriptor] FOREIGN KEY ([SpecialEducationSettingDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationPlanDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationPlanDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationPlanDescriptor_Descriptor] FOREIGN KEY ([EducationPlanDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReasonNotTestedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReasonNotTestedDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ReasonNotTestedDescriptor_Descriptor] FOREIGN KEY ([ReasonNotTestedDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AttemptStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AttemptStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AttemptStatusDescriptor_Descriptor] FOREIGN KEY ([AttemptStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_IndicatorGroupDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorGroupDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorGroupDescriptor_Descriptor] FOREIGN KEY ([IndicatorGroupDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardEquivalenceStrengthDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceStrengthDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardEquivalenceStrengthDescriptor_Descriptor] FOREIGN KEY ([LearningStandardEquivalenceStrengthDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RecognitionTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RecognitionTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RecognitionTypeDescriptor_Descriptor] FOREIGN KEY ([RecognitionTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AttendanceEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptor_Descriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_IndicatorLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[IndicatorLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorLevelDescriptor_Descriptor] FOREIGN KEY ([IndicatorLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OtherNameTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[OtherNameTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_OtherNameTypeDescriptor_Descriptor] FOREIGN KEY ([OtherNameTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ElectronicMailTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ElectronicMailTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ElectronicMailTypeDescriptor_Descriptor] FOREIGN KEY ([ElectronicMailTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RelationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RelationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RelationDescriptor_Descriptor] FOREIGN KEY ([RelationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InstitutionTelephoneNumberTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor] FOREIGN KEY ([InstitutionTelephoneNumberTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ParticipationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ParticipationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ParticipationDescriptor_Descriptor] FOREIGN KEY ([ParticipationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EligibilityDelayReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EligibilityDelayReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EligibilityDelayReasonDescriptor_Descriptor] FOREIGN KEY ([EligibilityDelayReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RepeatIdentifierDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RepeatIdentifierDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RepeatIdentifierDescriptor_Descriptor] FOREIGN KEY ([RepeatIdentifierDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DiagnosisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiagnosisDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisDescriptor_Descriptor] FOREIGN KEY ([DiagnosisDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContactTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContactTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ContactTypeDescriptor_Descriptor] FOREIGN KEY ([ContactTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InteractivityStyleDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InteractivityStyleDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InteractivityStyleDescriptor_Descriptor] FOREIGN KEY ([InteractivityStyleDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ParticipationStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ParticipationStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ParticipationStatusDescriptor_Descriptor] FOREIGN KEY ([ParticipationStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EligibilityEvaluationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EligibilityEvaluationTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EligibilityEvaluationTypeDescriptor_Descriptor] FOREIGN KEY ([EligibilityEvaluationTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DiplomaLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiplomaLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DiplomaLevelDescriptor_Descriptor] FOREIGN KEY ([DiplomaLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContentClassDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContentClassDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ContentClassDescriptor_Descriptor] FOREIGN KEY ([ContentClassDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InternetAccessDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetAccessDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InternetAccessDescriptor_Descriptor] FOREIGN KEY ([InternetAccessDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PerformanceBaseConversionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PerformanceBaseConversionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PerformanceBaseConversionDescriptor_Descriptor] FOREIGN KEY ([PerformanceBaseConversionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardScopeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardScopeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardScopeDescriptor_Descriptor] FOREIGN KEY ([LearningStandardScopeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EmploymentStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EmploymentStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EmploymentStatusDescriptor_Descriptor] FOREIGN KEY ([EmploymentStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DiplomaTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DiplomaTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DiplomaTypeDescriptor_Descriptor] FOREIGN KEY ([DiplomaTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ContinuationOfServicesReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_Descriptor] FOREIGN KEY ([ContinuationOfServicesReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InternetAccessTypeInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetAccessTypeInResidenceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InternetAccessTypeInResidenceDescriptor_Descriptor] FOREIGN KEY ([InternetAccessTypeInResidenceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PerformanceLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PerformanceLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PerformanceLevelDescriptor_Descriptor] FOREIGN KEY ([PerformanceLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LevelOfEducationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LevelOfEducationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LevelOfEducationDescriptor_Descriptor] FOREIGN KEY ([LevelOfEducationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EnrollmentTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EnrollmentTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EnrollmentTypeDescriptor_Descriptor] FOREIGN KEY ([EnrollmentTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisabilityDescriptor_Descriptor] FOREIGN KEY ([DisabilityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CostRateDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CostRateDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CostRateDescriptor_Descriptor] FOREIGN KEY ([CostRateDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BarrierToInternetAccessInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BarrierToInternetAccessInResidenceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_BarrierToInternetAccessInResidenceDescriptor_Descriptor] FOREIGN KEY ([BarrierToInternetAccessInResidenceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InternetPerformanceInResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InternetPerformanceInResidenceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InternetPerformanceInResidenceDescriptor_Descriptor] FOREIGN KEY ([InternetPerformanceInResidenceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LicenseStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LicenseStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LicenseStatusDescriptor_Descriptor] FOREIGN KEY ([LicenseStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EntryGradeLevelReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EntryGradeLevelReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EntryGradeLevelReasonDescriptor_Descriptor] FOREIGN KEY ([EntryGradeLevelReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisabilityDesignationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDesignationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisabilityDesignationDescriptor_Descriptor] FOREIGN KEY ([DisabilityDesignationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CountryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CountryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CountryDescriptor_Descriptor] FOREIGN KEY ([CountryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BehaviorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BehaviorDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_BehaviorDescriptor_Descriptor] FOREIGN KEY ([BehaviorDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LicenseTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LicenseTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LicenseTypeDescriptor_Descriptor] FOREIGN KEY ([LicenseTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EntryTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EntryTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EntryTypeDescriptor_Descriptor] FOREIGN KEY ([EntryTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisabilityDeterminationSourceTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor] FOREIGN KEY ([DisabilityDeterminationSourceTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LimitedEnglishProficiencyDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_Descriptor] FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EvaluationDelayReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EvaluationDelayReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EvaluationDelayReasonDescriptor_Descriptor] FOREIGN KEY ([EvaluationDelayReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PersonalInformationVerificationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PersonalInformationVerificationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PersonalInformationVerificationDescriptor_Descriptor] FOREIGN KEY ([PersonalInformationVerificationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PlatformTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PlatformTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PlatformTypeDescriptor_Descriptor] FOREIGN KEY ([PlatformTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffClassificationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffClassificationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffClassificationDescriptor_Descriptor] FOREIGN KEY ([StaffClassificationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReporterDescriptionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReporterDescriptionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ReporterDescriptionDescriptor_Descriptor] FOREIGN KEY ([ReporterDescriptionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PopulationServedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PopulationServedDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PopulationServedDescriptor_Descriptor] FOREIGN KEY ([PopulationServedDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportingTagDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ReportingTagDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportingTagDescriptor_Descriptor] FOREIGN KEY ([ReportingTagDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostingResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostingResultDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PostingResultDescriptor_Descriptor] FOREIGN KEY ([PostingResultDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseAttemptResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseAttemptResultDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseAttemptResultDescriptor_Descriptor] FOREIGN KEY ([CourseAttemptResultDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EventCircumstanceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EventCircumstanceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EventCircumstanceDescriptor_Descriptor] FOREIGN KEY ([EventCircumstanceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionClassDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InterventionClassDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionClassDescriptor_Descriptor] FOREIGN KEY ([InterventionClassDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ResidencyStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResidencyStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ResidencyStatusDescriptor_Descriptor] FOREIGN KEY ([ResidencyStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor] FOREIGN KEY ([DisciplineActionLengthDifferenceReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ExitWithdrawTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptor_Descriptor] FOREIGN KEY ([ExitWithdrawTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ResponseIndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResponseIndicatorDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ResponseIndicatorDescriptor_Descriptor] FOREIGN KEY ([ResponseIndicatorDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AbsenceEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AbsenceEventCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AbsenceEventCategoryDescriptor_Descriptor] FOREIGN KEY ([AbsenceEventCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseDefinedByDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseDefinedByDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseDefinedByDescriptor_Descriptor] FOREIGN KEY ([CourseDefinedByDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ResponsibilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResponsibilityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ResponsibilityDescriptor_Descriptor] FOREIGN KEY ([ResponsibilityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_BusRouteDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[BusRouteDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_BusRouteDescriptor_Descriptor] FOREIGN KEY ([BusRouteDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AcademicHonorCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AcademicHonorCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AcademicHonorCategoryDescriptor_Descriptor] FOREIGN KEY ([AcademicHonorCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryEventCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryEventCategoryDescriptor_Descriptor] FOREIGN KEY ([PostSecondaryEventCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseGPAApplicabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseGPAApplicabilityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseGPAApplicabilityDescriptor_Descriptor] FOREIGN KEY ([CourseGPAApplicabilityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AcademicSubjectDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AcademicSubjectDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AcademicSubjectDescriptor_Descriptor] FOREIGN KEY ([AcademicSubjectDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionEffectivenessRatingDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[InterventionEffectivenessRatingDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionEffectivenessRatingDescriptor_Descriptor] FOREIGN KEY ([InterventionEffectivenessRatingDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_FinancialCollectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[FinancialCollectionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_FinancialCollectionDescriptor_Descriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineDescriptor_Descriptor] FOREIGN KEY ([DisciplineDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryInstitutionLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitutionLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryInstitutionLevelDescriptor_Descriptor] FOREIGN KEY ([PostSecondaryInstitutionLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([CourseIdentificationSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AccommodationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AccommodationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccommodationDescriptor_Descriptor] FOREIGN KEY ([AccommodationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PrimaryLearningDeviceAccessDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceAccessDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PrimaryLearningDeviceAccessDescriptor_Descriptor] FOREIGN KEY ([PrimaryLearningDeviceAccessDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PrimaryLearningDeviceAwayFromSchoolDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceAwayFromSchoolDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PrimaryLearningDeviceAwayFromSchoolDescriptor_Descriptor] FOREIGN KEY ([PrimaryLearningDeviceAwayFromSchoolDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocaleDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LocaleDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LocaleDescriptor_Descriptor] FOREIGN KEY ([LocaleDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEventReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RestraintEventReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEventReasonDescriptor_Descriptor] FOREIGN KEY ([RestraintEventReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PrimaryLearningDeviceProviderDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PrimaryLearningDeviceProviderDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PrimaryLearningDeviceProviderDescriptor_Descriptor] FOREIGN KEY ([PrimaryLearningDeviceProviderDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseLevelCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseLevelCharacteristicDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseLevelCharacteristicDescriptor_Descriptor] FOREIGN KEY ([CourseLevelCharacteristicDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TeachingCredentialBasisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TeachingCredentialBasisDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TeachingCredentialBasisDescriptor_Descriptor] FOREIGN KEY ([TeachingCredentialBasisDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ResultDatatypeTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ResultDatatypeTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ResultDatatypeTypeDescriptor_Descriptor] FOREIGN KEY ([ResultDatatypeTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CalendarEventDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CalendarEventDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CalendarEventDescriptor_Descriptor] FOREIGN KEY ([CalendarEventDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProficiencyDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProficiencyDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProficiencyDescriptor_Descriptor] FOREIGN KEY ([ProficiencyDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AccountTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AccountTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountTypeDescriptor_Descriptor] FOREIGN KEY ([AccountTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TeachingCredentialDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TeachingCredentialDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TeachingCredentialDescriptor_Descriptor] FOREIGN KEY ([TeachingCredentialDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RetestIndicatorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[RetestIndicatorDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_RetestIndicatorDescriptor_Descriptor] FOREIGN KEY ([RetestIndicatorDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncidentParticipationCodeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentParticipationCodeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncidentParticipationCodeDescriptor_Descriptor] FOREIGN KEY ([DisciplineIncidentParticipationCodeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AchievementCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AchievementCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AchievementCategoryDescriptor_Descriptor] FOREIGN KEY ([AchievementCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TechnicalSkillsAssessmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TechnicalSkillsAssessmentDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TechnicalSkillsAssessmentDescriptor_Descriptor] FOREIGN KEY ([TechnicalSkillsAssessmentDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalEducationAgencyCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalEducationAgencyCategoryDescriptor_Descriptor] FOREIGN KEY ([LocalEducationAgencyCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CalendarTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CalendarTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CalendarTypeDescriptor_Descriptor] FOREIGN KEY ([CalendarTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AdditionalCreditTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdditionalCreditTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AdditionalCreditTypeDescriptor_Descriptor] FOREIGN KEY ([AdditionalCreditTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TelephoneNumberTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TelephoneNumberTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TelephoneNumberTypeDescriptor_Descriptor] FOREIGN KEY ([TelephoneNumberTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisplacedStudentStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DisplacedStudentStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DisplacedStudentStatusDescriptor_Descriptor] FOREIGN KEY ([DisplacedStudentStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CareerPathwayDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CareerPathwayDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CareerPathwayDescriptor_Descriptor] FOREIGN KEY ([CareerPathwayDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AddressTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AddressTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AddressTypeDescriptor_Descriptor] FOREIGN KEY ([AddressTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TermDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TermDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TermDescriptor_Descriptor] FOREIGN KEY ([TermDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramAssignmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramAssignmentDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramAssignmentDescriptor_Descriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SchoolCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SchoolCategoryDescriptor_Descriptor] FOREIGN KEY ([SchoolCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationalEnvironmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationalEnvironmentDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationalEnvironmentDescriptor_Descriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CharterApprovalAgencyTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CharterApprovalAgencyTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CharterApprovalAgencyTypeDescriptor_Descriptor] FOREIGN KEY ([CharterApprovalAgencyTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AdministrationEnvironmentDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdministrationEnvironmentDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AdministrationEnvironmentDescriptor_Descriptor] FOREIGN KEY ([AdministrationEnvironmentDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TitleIPartAParticipantDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartAParticipantDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TitleIPartAParticipantDescriptor_Descriptor] FOREIGN KEY ([TitleIPartAParticipantDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SchoolChoiceBasisDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolChoiceBasisDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SchoolChoiceBasisDescriptor_Descriptor] FOREIGN KEY ([SchoolChoiceBasisDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CharterStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CharterStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CharterStatusDescriptor_Descriptor] FOREIGN KEY ([CharterStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AdministrativeFundingControlDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptor_Descriptor] FOREIGN KEY ([AdministrativeFundingControlDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TitleIPartAProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartAProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TitleIPartAProgramServiceDescriptor_Descriptor] FOREIGN KEY ([TitleIPartAProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SchoolChoiceImplementStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolChoiceImplementStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SchoolChoiceImplementStatusDescriptor_Descriptor] FOREIGN KEY ([SchoolChoiceImplementStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramCharacteristicDescriptor_Descriptor] FOREIGN KEY ([ProgramCharacteristicDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AncestryEthnicOriginDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AncestryEthnicOriginDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AncestryEthnicOriginDescriptor_Descriptor] FOREIGN KEY ([AncestryEthnicOriginDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TitleIPartASchoolDesignationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TitleIPartASchoolDesignationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TitleIPartASchoolDesignationDescriptor_Descriptor] FOREIGN KEY ([TitleIPartASchoolDesignationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolFoodServiceProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor] FOREIGN KEY ([SchoolFoodServiceProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TransportationPublicExpenseEligibilityTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TransportationPublicExpenseEligibilityTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TransportationPublicExpenseEligibilityTypeDescriptor_Descriptor] FOREIGN KEY ([TransportationPublicExpenseEligibilityTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TransportationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TransportationTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TransportationTypeDescriptor_Descriptor] FOREIGN KEY ([TransportationTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseRepeatCodeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CourseRepeatCodeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseRepeatCodeDescriptor_Descriptor] FOREIGN KEY ([CourseRepeatCodeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TravelDayofWeekDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TravelDayofWeekDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TravelDayofWeekDescriptor_Descriptor] FOREIGN KEY ([TravelDayofWeekDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SchoolTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SchoolTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SchoolTypeDescriptor_Descriptor] FOREIGN KEY ([SchoolTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CitizenshipStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CitizenshipStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CitizenshipStatusDescriptor_Descriptor] FOREIGN KEY ([CitizenshipStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TravelDirectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TravelDirectionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TravelDirectionDescriptor_Descriptor] FOREIGN KEY ([TravelDirectionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_TribalAffiliationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[TribalAffiliationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_TribalAffiliationDescriptor_Descriptor] FOREIGN KEY ([TribalAffiliationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor] FOREIGN KEY ([MagnetSpecialProgramEmphasisSchoolDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StudentCharacteristicDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCharacteristicDescriptor_Descriptor] FOREIGN KEY ([StudentCharacteristicDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_VisaDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[VisaDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_VisaDescriptor_Descriptor] FOREIGN KEY ([VisaDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_MediumOfInstructionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MediumOfInstructionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_MediumOfInstructionDescriptor_Descriptor] FOREIGN KEY ([MediumOfInstructionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentCategoryDescriptor_Descriptor] FOREIGN KEY ([AssessmentCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([StaffIdentificationSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntryTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradebookEntryTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntryTypeDescriptor_Descriptor] FOREIGN KEY ([GradebookEntryTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_WeaponDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[WeaponDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_WeaponDescriptor_Descriptor] FOREIGN KEY ([WeaponDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_MethodCreditEarnedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MethodCreditEarnedDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_MethodCreditEarnedDescriptor_Descriptor] FOREIGN KEY ([MethodCreditEarnedDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_MigrantEducationProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MigrantEducationProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_MigrantEducationProgramServiceDescriptor_Descriptor] FOREIGN KEY ([MigrantEducationProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [interop].[FK_OperationalContextDescriptorUsage_Descriptor]...';


GO
ALTER TABLE [interop].[OperationalContextDescriptorUsage] WITH NOCHECK
    ADD CONSTRAINT [FK_OperationalContextDescriptorUsage_Descriptor] FOREIGN KEY ([DescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ClassroomPositionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ClassroomPositionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassroomPositionDescriptor_Descriptor] FOREIGN KEY ([ClassroomPositionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ModelEntityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ModelEntityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ModelEntityDescriptor_Descriptor] FOREIGN KEY ([ModelEntityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradeLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradeLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GradeLevelDescriptor_Descriptor] FOREIGN KEY ([GradeLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([StudentIdentificationSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_MonitoredDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[MonitoredDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_MonitoredDescriptor_Descriptor] FOREIGN KEY ([MonitoredDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradePointAverageTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradePointAverageTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GradePointAverageTypeDescriptor_Descriptor] FOREIGN KEY ([GradePointAverageTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [interop].[FK_DescriptorEquivalenceGroupAssignment_Descriptor]...';


GO
ALTER TABLE [interop].[DescriptorEquivalenceGroupAssignment] WITH NOCHECK
    ADD CONSTRAINT [FK_DescriptorEquivalenceGroupAssignment_Descriptor] FOREIGN KEY ([DescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_NeglectedOrDelinquentProgramDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NeglectedOrDelinquentProgramDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_NeglectedOrDelinquentProgramDescriptor_Descriptor] FOREIGN KEY ([NeglectedOrDelinquentProgramDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradeTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradeTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GradeTypeDescriptor_Descriptor] FOREIGN KEY ([GradeTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NeglectedOrDelinquentProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor] FOREIGN KEY ([NeglectedOrDelinquentProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionCharacteristicDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SectionCharacteristicDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionCharacteristicDescriptor_Descriptor] FOREIGN KEY ([SectionCharacteristicDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_NetworkPurposeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NetworkPurposeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_NetworkPurposeDescriptor_Descriptor] FOREIGN KEY ([NetworkPurposeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CohortScopeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortScopeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CohortScopeDescriptor_Descriptor] FOREIGN KEY ([CohortScopeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_NonMedicalImmunizationExemptionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[NonMedicalImmunizationExemptionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_NonMedicalImmunizationExemptionDescriptor_Descriptor] FOREIGN KEY ([NonMedicalImmunizationExemptionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffLeaveEventCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[StaffLeaveEventCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffLeaveEventCategoryDescriptor_Descriptor] FOREIGN KEY ([StaffLeaveEventCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CohortTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CohortTypeDescriptor_Descriptor] FOREIGN KEY ([CohortTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradingPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GradingPeriodDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GradingPeriodDescriptor_Descriptor] FOREIGN KEY ([GradingPeriodDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItemCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItemCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItemCategoryDescriptor_Descriptor] FOREIGN KEY ([AssessmentItemCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CohortYearTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CohortYearTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CohortYearTypeDescriptor_Descriptor] FOREIGN KEY ([CohortYearTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SubmissionStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SubmissionStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SubmissionStatusDescriptor_Descriptor] FOREIGN KEY ([SubmissionStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationPeriodDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationPeriodDescriptor_Descriptor] FOREIGN KEY ([ProgramEvaluationPeriodDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationAssociationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAssociationTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationAssociationTypeDescriptor_Descriptor] FOREIGN KEY ([EducationOrganizationAssociationTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SupporterMilitaryConnectionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SupporterMilitaryConnectionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SupporterMilitaryConnectionDescriptor_Descriptor] FOREIGN KEY ([SupporterMilitaryConnectionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationTypeDescriptor_Descriptor] FOREIGN KEY ([ProgramEvaluationTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItemResultDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentItemResultDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItemResultDescriptor_Descriptor] FOREIGN KEY ([AssessmentItemResultDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationCategoryDescriptor_Descriptor] FOREIGN KEY ([EducationOrganizationCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SectionTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionTypeDescriptor_Descriptor] FOREIGN KEY ([SectionTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SurveyCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyCategoryDescriptor_Descriptor] FOREIGN KEY ([SurveyCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SeparationDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SeparationDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SeparationDescriptor_Descriptor] FOREIGN KEY ([SeparationDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CompetencyLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CompetencyLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CompetencyLevelDescriptor_Descriptor] FOREIGN KEY ([CompetencyLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramSponsorDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramSponsorDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramSponsorDescriptor_Descriptor] FOREIGN KEY ([ProgramSponsorDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CredentialFieldDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CredentialFieldDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CredentialFieldDescriptor_Descriptor] FOREIGN KEY ([CredentialFieldDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SeparationReasonDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SeparationReasonDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SeparationReasonDescriptor_Descriptor] FOREIGN KEY ([SeparationReasonDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgramTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramTypeDescriptor_Descriptor] FOREIGN KEY ([ProgramTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ServiceDescriptor_Descriptor] FOREIGN KEY ([ServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgressDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgressDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgressDescriptor_Descriptor] FOREIGN KEY ([ProgressDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SurveyLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyLevelDescriptor_Descriptor] FOREIGN KEY ([SurveyLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CredentialTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CredentialTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CredentialTypeDescriptor_Descriptor] FOREIGN KEY ([CredentialTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgressLevelDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProgressLevelDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgressLevelDescriptor_Descriptor] FOREIGN KEY ([ProgressLevelDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LanguageDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LanguageDescriptor_Descriptor] FOREIGN KEY ([LanguageDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentPeriodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentPeriodDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentPeriodDescriptor_Descriptor] FOREIGN KEY ([AssessmentPeriodDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CreditCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CreditCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CreditCategoryDescriptor_Descriptor] FOREIGN KEY ([CreditCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LanguageInstructionProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageInstructionProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LanguageInstructionProgramServiceDescriptor_Descriptor] FOREIGN KEY ([LanguageInstructionProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CreditTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CreditTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CreditTypeDescriptor_Descriptor] FOREIGN KEY ([CreditTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LanguageUseDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LanguageUseDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LanguageUseDescriptor_Descriptor] FOREIGN KEY ([LanguageUseDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentReportingMethodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[AssessmentReportingMethodDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentReportingMethodDescriptor_Descriptor] FOREIGN KEY ([AssessmentReportingMethodDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanTypeDescriptor_Descriptor] FOREIGN KEY ([GraduationPlanTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SexDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[SexDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_SexDescriptor_Descriptor] FOREIGN KEY ([SexDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProviderCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProviderCategoryDescriptor_Descriptor] FOREIGN KEY ([ProviderCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CrisisTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CrisisTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CrisisTypeDescriptor_Descriptor] FOREIGN KEY ([CrisisTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor] FOREIGN KEY ([GunFreeSchoolsActReportingStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProviderProfitabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderProfitabilityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProviderProfitabilityDescriptor_Descriptor] FOREIGN KEY ([ProviderProfitabilityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CTEProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CTEProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CTEProgramServiceDescriptor_Descriptor] FOREIGN KEY ([CTEProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[HomelessPrimaryNighttimeResidenceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor] FOREIGN KEY ([HomelessPrimaryNighttimeResidenceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProviderStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[ProviderStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProviderStatusDescriptor_Descriptor] FOREIGN KEY ([ProviderStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CurriculumUsedDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[CurriculumUsedDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_CurriculumUsedDescriptor_Descriptor] FOREIGN KEY ([CurriculumUsedDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardCategoryDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardCategoryDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardCategoryDescriptor_Descriptor] FOREIGN KEY ([LearningStandardCategoryDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_HomelessProgramServiceDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[HomelessProgramServiceDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_HomelessProgramServiceDescriptor_Descriptor] FOREIGN KEY ([HomelessProgramServiceDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_PublicationStatusDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[PublicationStatusDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_PublicationStatusDescriptor_Descriptor] FOREIGN KEY ([PublicationStatusDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DeliveryMethodDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DeliveryMethodDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DeliveryMethodDescriptor_Descriptor] FOREIGN KEY ([DeliveryMethodDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DescriptorMappingModelEntity_DescriptorMapping]...';


GO
ALTER TABLE [edfi].[DescriptorMappingModelEntity] WITH NOCHECK
    ADD CONSTRAINT [FK_DescriptorMappingModelEntity_DescriptorMapping] FOREIGN KEY ([MappedNamespace], [MappedValue], [Namespace], [Value]) REFERENCES [edfi].[DescriptorMapping] ([MappedNamespace], [MappedValue], [Namespace], [Value]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineAction] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor] FOREIGN KEY ([DisciplineActionLengthDifferenceReasonDescriptorId]) REFERENCES [edfi].[DisciplineActionLengthDifferenceReasonDescriptor] ([DisciplineActionLengthDifferenceReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineAction_School]...';


GO
ALTER TABLE [edfi].[DisciplineAction] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineAction_School] FOREIGN KEY ([AssignmentSchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineAction_School1]...';


GO
ALTER TABLE [edfi].[DisciplineAction] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineAction_School1] FOREIGN KEY ([ResponsibilitySchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineAction_Student]...';


GO
ALTER TABLE [edfi].[DisciplineAction] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineAction_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionDiscipline_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionDiscipline] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionStaff_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionStaff_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DisciplineAction]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [DisciplineDate], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffDisciplineIncidentAssociation_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncident_IncidentLocationDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncident_IncidentLocationDescriptor] FOREIGN KEY ([IncidentLocationDescriptorId]) REFERENCES [edfi].[IncidentLocationDescriptor] ([IncidentLocationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncident_ReporterDescriptionDescriptor]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncident_ReporterDescriptionDescriptor] FOREIGN KEY ([ReporterDescriptionDescriptorId]) REFERENCES [edfi].[ReporterDescriptionDescriptor] ([ReporterDescriptionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncident_School]...';


GO
ALTER TABLE [edfi].[DisciplineIncident] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncident_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncidentBehavior_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentBehavior] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncidentBehavior_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncidentExternalParticipant_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentExternalParticipant] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncidentExternalParticipant_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineIncidentWeapon_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[DisciplineIncidentWeapon] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineIncidentWeapon_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContent_ContentClassDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContent_ContentClassDescriptor] FOREIGN KEY ([ContentClassDescriptorId]) REFERENCES [edfi].[ContentClassDescriptor] ([ContentClassDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContent_CostRateDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContent_CostRateDescriptor] FOREIGN KEY ([CostRateDescriptorId]) REFERENCES [edfi].[CostRateDescriptor] ([CostRateDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContent_InteractivityStyleDescriptor]...';


GO
ALTER TABLE [edfi].[EducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContent_InteractivityStyleDescriptor] FOREIGN KEY ([InteractivityStyleDescriptorId]) REFERENCES [edfi].[InteractivityStyleDescriptor] ([InteractivityStyleDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContent_LearningStandard]...';


GO
ALTER TABLE [edfi].[EducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContent_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentAppropriateGradeLevel_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentAppropriateSex_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAppropriateSex] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentAppropriateSex_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentAuthor_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentAuthor] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentAuthor_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentDerivativeSourceEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentDerivativeSourceEducationContent_EducationContent1]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent1] FOREIGN KEY ([DerivativeSourceContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentDerivativeSourceURI_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentDerivativeSourceURI_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationContentLanguage_EducationContent]...';


GO
ALTER TABLE [edfi].[EducationContentLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationContentLanguage_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyEducationContent_EducationContent]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier]) REFERENCES [edfi].[EducationContent] ([ContentIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardContentStandard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationPeerAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationPeerAssociation_EducationOrganization1]...';


GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization1] FOREIGN KEY ([PeerEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StateEducationAgency_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StateEducationAgency] WITH NOCHECK
    ADD CONSTRAINT [FK_StateEducationAgency_EducationOrganization] FOREIGN KEY ([StateEducationAgencyId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OrganizationDepartment_EducationOrganization]...';


GO
ALTER TABLE [edfi].[OrganizationDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationDepartment_EducationOrganization] FOREIGN KEY ([OrganizationDepartmentId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OrganizationDepartment_EducationOrganization1]...';


GO
ALTER TABLE [edfi].[OrganizationDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationDepartment_EducationOrganization1] FOREIGN KEY ([ParentEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationServiceCenter_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationServiceCenter] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationServiceCenter_EducationOrganization] FOREIGN KEY ([EducationServiceCenterId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[ReportCard] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCard_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Intervention_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Intervention] WITH NOCHECK
    ADD CONSTRAINT [FK_Intervention_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalAccount_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LocalAccount] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalAccount_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryInstitution_EducationOrganization]...';


GO
ALTER TABLE [edfi].[PostSecondaryInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryInstitution_EducationOrganization] FOREIGN KEY ([PostSecondaryInstitutionId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalEducationAgency_EducationOrganization]...';


GO
ALTER TABLE [edfi].[LocalEducationAgency] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalEducationAgency_EducationOrganization] FOREIGN KEY ([LocalEducationAgencyId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescription_EducationOrganization]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescription_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Program_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Program] WITH NOCHECK
    ADD CONSTRAINT [FK_Program_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_School_EducationOrganization]...';


GO
ALTER TABLE [edfi].[School] WITH NOCHECK
    ADD CONSTRAINT [FK_School_EducationOrganization] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_GeneralStudentProgramAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHealth_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentHealth] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHealth_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentContentStandard_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AssessmentContentStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTransportation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentTransportation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTransportation_EducationOrganization] FOREIGN KEY ([TransportationEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudy_EducationOrganization]...';


GO
ALTER TABLE [edfi].[InterventionStudy] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudy_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganization_OperationalStatusDescriptor]...';


GO
ALTER TABLE [edfi].[EducationOrganization] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganization_OperationalStatusDescriptor] FOREIGN KEY ([OperationalStatusDescriptorId]) REFERENCES [edfi].[OperationalStatusDescriptor] ([OperationalStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationAddress_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationAddress_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlan_EducationOrganization]...';


GO
ALTER TABLE [edfi].[GraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlan_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CommunityOrganization_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CommunityOrganization] WITH NOCHECK
    ADD CONSTRAINT [FK_CommunityOrganization_EducationOrganization] FOREIGN KEY ([CommunityOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CommunityProvider_EducationOrganization]...';


GO
ALTER TABLE [edfi].[CommunityProvider] WITH NOCHECK
    ADD CONSTRAINT [FK_CommunityProvider_EducationOrganization] FOREIGN KEY ([CommunityProviderId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationCategory_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Survey_EducationOrganization]...';


GO
ALTER TABLE [edfi].[Survey] WITH NOCHECK
    ADD CONSTRAINT [FK_Survey_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationIdentificationCode_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationIndicator_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationIndicator] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationIndicator_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationInstitutionTelephone_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationInternationalAddress_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPosition_EducationOrganization]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPosition_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationNetwork_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetwork] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationNetwork_EducationOrganization] FOREIGN KEY ([EducationOrganizationNetworkId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationNetworkAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganization] FOREIGN KEY ([MemberEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork]...';


GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork] FOREIGN KEY ([EducationOrganizationNetworkId]) REFERENCES [edfi].[EducationOrganizationNetwork] ([EducationOrganizationNetworkId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EvaluationRubricDimension_RatingLevelDescriptor]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] WITH NOCHECK
    ADD CONSTRAINT [FK_EvaluationRubricDimension_RatingLevelDescriptor] FOREIGN KEY ([EvaluationRubricRatingLevelDescriptorId]) REFERENCES [edfi].[RatingLevelDescriptor] ([RatingLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_EvaluationRubricDimension_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[EvaluationRubricDimension] WITH NOCHECK
    ADD CONSTRAINT [FK_EvaluationRubricDimension_ProgramEvaluationElement] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationElement] ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_FeederSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_FeederSchoolAssociation_School] FOREIGN KEY ([FeederSchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_FeederSchoolAssociation_School1]...';


GO
ALTER TABLE [edfi].[FeederSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_FeederSchoolAssociation_School1] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_FunctionDimensionReportingTag_FunctionDimension]...';


GO
ALTER TABLE [edfi].[FunctionDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_FunctionDimensionReportingTag_FunctionDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[FunctionDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_FundDimensionReportingTag_FundDimension]...';


GO
ALTER TABLE [edfi].[FundDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_FundDimensionReportingTag_FundDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[FundDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolFoodServiceProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_GeneralStudentProgramAssociation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor] FOREIGN KEY ([ReasonExitedDescriptorId]) REFERENCES [edfi].[ReasonExitedDescriptor] ([ReasonExitedDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GeneralStudentProgramAssociation_Student]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_GeneralStudentProgramAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GeneralStudentProgramAssociationProgramParticipationStatus_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_GeneralStudentProgramAssociationProgramParticipationStatus_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentHomelessProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentCTEProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentNeglectedOrDelinquentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCardGrade_Grade]...';


GO
ALTER TABLE [edfi].[ReportCardGrade] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCardGrade_Grade] FOREIGN KEY ([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolYear], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[Grade] ([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolYear], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Grade_GradeTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Grade] WITH NOCHECK
    ADD CONSTRAINT [FK_Grade_GradeTypeDescriptor] FOREIGN KEY ([GradeTypeDescriptorId]) REFERENCES [edfi].[GradeTypeDescriptor] ([GradeTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Grade_GradingPeriod]...';


GO
ALTER TABLE [edfi].[Grade] WITH NOCHECK
    ADD CONSTRAINT [FK_Grade_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [GradingPeriodSchoolYear]) REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Grade_PerformanceBaseConversionDescriptor]...';


GO
ALTER TABLE [edfi].[Grade] WITH NOCHECK
    ADD CONSTRAINT [FK_Grade_PerformanceBaseConversionDescriptor] FOREIGN KEY ([PerformanceBaseConversionDescriptorId]) REFERENCES [edfi].[PerformanceBaseConversionDescriptor] ([PerformanceBaseConversionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Grade_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[Grade] WITH NOCHECK
    ADD CONSTRAINT [FK_Grade_StudentSectionAssociation] FOREIGN KEY ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[StudentSectionAssociation] ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradeLearningStandardGrade_Grade]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade] WITH NOCHECK
    ADD CONSTRAINT [FK_GradeLearningStandardGrade_Grade] FOREIGN KEY ([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolYear], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[Grade] ([BeginDate], [GradeTypeDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolYear], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentGradebookEntry_GradebookEntry]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentGradebookEntry_GradebookEntry] FOREIGN KEY ([GradebookEntryIdentifier], [Namespace]) REFERENCES [edfi].[GradebookEntry] ([GradebookEntryIdentifier], [Namespace]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntry_GradebookEntryTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntry_GradebookEntryTypeDescriptor] FOREIGN KEY ([GradebookEntryTypeDescriptorId]) REFERENCES [edfi].[GradebookEntryTypeDescriptor] ([GradebookEntryTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntry_GradingPeriod]...';


GO
ALTER TABLE [edfi].[GradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntry_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]) REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntry_Section]...';


GO
ALTER TABLE [edfi].[GradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntry_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntryLearningStandard_GradebookEntry]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntryLearningStandard_GradebookEntry] FOREIGN KEY ([GradebookEntryIdentifier], [Namespace]) REFERENCES [edfi].[GradebookEntry] ([GradebookEntryIdentifier], [Namespace]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCard_GradingPeriod]...';


GO
ALTER TABLE [edfi].[ReportCard] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCard_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear]) REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjective_GradingPeriod]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjective_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear]) REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradingPeriod_GradingPeriodDescriptor]...';


GO
ALTER TABLE [edfi].[GradingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_GradingPeriod_GradingPeriodDescriptor] FOREIGN KEY ([GradingPeriodDescriptorId]) REFERENCES [edfi].[GradingPeriodDescriptor] ([GradingPeriodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradingPeriod_School]...';


GO
ALTER TABLE [edfi].[GradingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_GradingPeriod_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradingPeriod_SchoolYearType]...';


GO
ALTER TABLE [edfi].[GradingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_GradingPeriod_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SessionGradingPeriod_GradingPeriod]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionGradingPeriod_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]) REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [GradingPeriodName], [SchoolId], [SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_GraduationPlan]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_GraduationPlan] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociationAlternativeGraduationPlan_GraduationPlan]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_GraduationPlan] FOREIGN KEY ([AlternativeEducationOrganizationId], [AlternativeGraduationPlanTypeDescriptorId], [AlternativeGraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlan_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlan_CreditTypeDescriptor] FOREIGN KEY ([TotalRequiredCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlan_GraduationPlanTypeDescriptor]...';


GO
ALTER TABLE [edfi].[GraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlan_GraduationPlanTypeDescriptor] FOREIGN KEY ([GraduationPlanTypeDescriptorId]) REFERENCES [edfi].[GraduationPlanTypeDescriptor] ([GraduationPlanTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlan_SchoolYearType]...';


GO
ALTER TABLE [edfi].[GraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlan_SchoolYearType] FOREIGN KEY ([GraduationSchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanCreditsByCourse_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_GraduationPlan] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanCreditsByCreditCategory_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCreditCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanCreditsByCreditCategory_GraduationPlan] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanCreditsBySubject_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_GraduationPlan] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_GraduationPlanRequiredAssessment_GraduationPlan]...';


GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_GraduationPlan] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) REFERENCES [edfi].[GraduationPlan] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Intervention_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[Intervention] WITH NOCHECK
    ADD CONSTRAINT [FK_Intervention_DeliveryMethodDescriptor] FOREIGN KEY ([DeliveryMethodDescriptorId]) REFERENCES [edfi].[DeliveryMethodDescriptor] ([DeliveryMethodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Intervention_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[Intervention] WITH NOCHECK
    ADD CONSTRAINT [FK_Intervention_InterventionClassDescriptor] FOREIGN KEY ([InterventionClassDescriptorId]) REFERENCES [edfi].[InterventionClassDescriptor] ([InterventionClassDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionAppropriateGradeLevel_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionAppropriateSex_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionAppropriateSex] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionAppropriateSex_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionDiagnosis_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionDiagnosis_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionEducationContent_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionEducationContent_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionInterventionPrescription_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionInterventionPrescription_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionLearningResourceMetadataURI_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionLearningResourceMetadataURI_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionMeetingTime_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionMeetingTime] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionMeetingTime_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPopulationServed_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionPopulationServed] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPopulationServed_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStaff_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStaff_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAssociation_Intervention]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAssociation_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_Intervention]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionURI_Intervention]...';


GO
ALTER TABLE [edfi].[InterventionURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionURI_Intervention] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode]) REFERENCES [edfi].[Intervention] ([EducationOrganizationId], [InterventionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionInterventionPrescription_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionInterventionPrescription_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescription_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescription_DeliveryMethodDescriptor] FOREIGN KEY ([DeliveryMethodDescriptorId]) REFERENCES [edfi].[DeliveryMethodDescriptor] ([DeliveryMethodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescription_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionPrescription] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescription_InterventionClassDescriptor] FOREIGN KEY ([InterventionClassDescriptorId]) REFERENCES [edfi].[InterventionClassDescriptor] ([InterventionClassDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionAppropriateSex_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionDiagnosis_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionEducationContent_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionPopulationServed_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionPrescriptionURI_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionPrescriptionURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionPrescriptionURI_InterventionPrescription] FOREIGN KEY ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudy_InterventionPrescription]...';


GO
ALTER TABLE [edfi].[InterventionStudy] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudy_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode]) REFERENCES [edfi].[InterventionPrescription] ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudy_DeliveryMethodDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionStudy] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudy_DeliveryMethodDescriptor] FOREIGN KEY ([DeliveryMethodDescriptorId]) REFERENCES [edfi].[DeliveryMethodDescriptor] ([DeliveryMethodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudy_InterventionClassDescriptor]...';


GO
ALTER TABLE [edfi].[InterventionStudy] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudy_InterventionClassDescriptor] FOREIGN KEY ([InterventionClassDescriptorId]) REFERENCES [edfi].[InterventionClassDescriptor] ([InterventionClassDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyAppropriateGradeLevel_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyAppropriateSex_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyAppropriateSex] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyEducationContent_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyEducationContent_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyInterventionEffectiveness_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyPopulationServed_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyPopulationServed] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyPopulationServed_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyStateAbbreviation_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStudyURI_InterventionStudy]...';


GO
ALTER TABLE [edfi].[InterventionStudyURI] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStudyURI_InterventionStudy] FOREIGN KEY ([EducationOrganizationId], [InterventionStudyIdentificationCode]) REFERENCES [edfi].[InterventionStudy] ([EducationOrganizationId], [InterventionStudyIdentificationCode]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardContentStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardContentStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardContentStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentScoreRangeLearningStandardLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard] FOREIGN KEY ([SourceLearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandard1]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard1] FOREIGN KEY ([TargetLearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardGradeLevel_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardGradeLevel_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardIdentificationCode_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardIdentificationCode_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[CourseLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradebookEntryLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_GradebookEntryLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_GradeLearningStandardGrade_LearningStandard]...';


GO
ALTER TABLE [edfi].[GradeLearningStandardGrade] WITH NOCHECK
    ADD CONSTRAINT [FK_GradeLearningStandardGrade_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentItemLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentItemLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentLearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandard_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandard_LearningStandard] FOREIGN KEY ([ParentLearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandard_LearningStandardCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandard_LearningStandardCategoryDescriptor] FOREIGN KEY ([LearningStandardCategoryDescriptorId]) REFERENCES [edfi].[LearningStandardCategoryDescriptor] ([LearningStandardCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandard_LearningStandardScopeDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandard_LearningStandardScopeDescriptor] FOREIGN KEY ([LearningStandardScopeDescriptorId]) REFERENCES [edfi].[LearningStandardScopeDescriptor] ([LearningStandardScopeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardAcademicSubject_LearningStandard]...';


GO
ALTER TABLE [edfi].[LearningStandardAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardAcademicSubject_LearningStandard] FOREIGN KEY ([LearningStandardId]) REFERENCES [edfi].[LearningStandard] ([LearningStandardId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor]...';


GO
ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor] FOREIGN KEY ([LearningStandardEquivalenceStrengthDescriptorId]) REFERENCES [edfi].[LearningStandardEquivalenceStrengthDescriptor] ([LearningStandardEquivalenceStrengthDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalAccountReportingTag_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalAccountReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalAccountReportingTag_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalActual_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalActual] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalActual_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalBudget_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalBudget] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalBudget_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalContractedStaff_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalContractedStaff_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalEncumbrance_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalEncumbrance_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalPayroll_LocalAccount]...';


GO
ALTER TABLE [edfi].[LocalPayroll] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalPayroll_LocalAccount] FOREIGN KEY ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]) REFERENCES [edfi].[LocalAccount] ([AccountIdentifier], [EducationOrganizationId], [FiscalYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalActual_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalActual] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalActual_FinancialCollectionDescriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[FinancialCollectionDescriptor] ([FinancialCollectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalBudget_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalBudget] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalBudget_FinancialCollectionDescriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[FinancialCollectionDescriptor] ([FinancialCollectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalContractedStaff_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalContractedStaff_FinancialCollectionDescriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[FinancialCollectionDescriptor] ([FinancialCollectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalContractedStaff_Staff]...';


GO
ALTER TABLE [edfi].[LocalContractedStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalContractedStaff_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalEncumbrance_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalEncumbrance] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalEncumbrance_FinancialCollectionDescriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[FinancialCollectionDescriptor] ([FinancialCollectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalPayroll_FinancialCollectionDescriptor]...';


GO
ALTER TABLE [edfi].[LocalPayroll] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalPayroll_FinancialCollectionDescriptor] FOREIGN KEY ([FinancialCollectionDescriptorId]) REFERENCES [edfi].[FinancialCollectionDescriptor] ([FinancialCollectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalPayroll_Staff]...';


GO
ALTER TABLE [edfi].[LocalPayroll] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalPayroll_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Location_School]...';


GO
ALTER TABLE [edfi].[Location] WITH NOCHECK
    ADD CONSTRAINT [FK_Location_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_Location]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_Location] FOREIGN KEY ([LocationClassroomIdentificationCode], [LocationSchoolId]) REFERENCES [edfi].[Location] ([ClassroomIdentificationCode], [SchoolId]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectDimensionReportingTag_ObjectDimension]...';


GO
ALTER TABLE [edfi].[ObjectDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectDimensionReportingTag_ObjectDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[ObjectDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessment_AcademicSubjectDescriptor]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessment_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId]) REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessment_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessment_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [ParentIdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ObjectiveAssessmentScore_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[ObjectiveAssessmentScore] WITH NOCHECK
    ADD CONSTRAINT [FK_ObjectiveAssessmentScore_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPosition_EmploymentStatusDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPosition_EmploymentStatusDescriptor] FOREIGN KEY ([EmploymentStatusDescriptorId]) REFERENCES [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPosition_PostingResultDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPosition_PostingResultDescriptor] FOREIGN KEY ([PostingResultDescriptorId]) REFERENCES [edfi].[PostingResultDescriptor] ([PostingResultDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPosition_ProgramAssignmentDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPosition_ProgramAssignmentDescriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId]) REFERENCES [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPosition_StaffClassificationDescriptor]...';


GO
ALTER TABLE [edfi].[OpenStaffPosition] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPosition_StaffClassificationDescriptor] FOREIGN KEY ([StaffClassificationDescriptorId]) REFERENCES [edfi].[StaffClassificationDescriptor] ([StaffClassificationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPositionAcademicSubject_OpenStaffPosition]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubject_OpenStaffPosition] FOREIGN KEY ([EducationOrganizationId], [RequisitionNumber]) REFERENCES [edfi].[OpenStaffPosition] ([EducationOrganizationId], [RequisitionNumber]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition]...';


GO
ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition] FOREIGN KEY ([EducationOrganizationId], [RequisitionNumber]) REFERENCES [edfi].[OpenStaffPosition] ([EducationOrganizationId], [RequisitionNumber]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_OperationalUnitDimensionReportingTag_OperationalUnitDimension]...';


GO
ALTER TABLE [edfi].[OperationalUnitDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_OperationalUnitDimensionReportingTag_OperationalUnitDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[OperationalUnitDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Staff_Person]...';


GO
ALTER TABLE [edfi].[Staff] WITH NOCHECK
    ADD CONSTRAINT [FK_Staff_Person] FOREIGN KEY ([PersonId], [SourceSystemDescriptorId]) REFERENCES [edfi].[Person] ([PersonId], [SourceSystemDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Student_Person]...';


GO
ALTER TABLE [edfi].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_Person] FOREIGN KEY ([PersonId], [SourceSystemDescriptorId]) REFERENCES [edfi].[Person] ([PersonId], [SourceSystemDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Person_SourceSystemDescriptor]...';


GO
ALTER TABLE [edfi].[Person] WITH NOCHECK
    ADD CONSTRAINT [FK_Person_SourceSystemDescriptor] FOREIGN KEY ([SourceSystemDescriptorId]) REFERENCES [edfi].[SourceSystemDescriptor] ([SourceSystemDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor] FOREIGN KEY ([PostSecondaryEventCategoryDescriptorId]) REFERENCES [edfi].[PostSecondaryEventCategoryDescriptor] ([PostSecondaryEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryEvent_PostSecondaryInstitution]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryInstitution] FOREIGN KEY ([PostSecondaryInstitutionId]) REFERENCES [edfi].[PostSecondaryInstitution] ([PostSecondaryInstitutionId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_PostSecondaryEvent_Student]...';


GO
ALTER TABLE [edfi].[PostSecondaryEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_PostSecondaryEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_Program]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociationProgram_Program]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociationProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEventProgram_Program]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEventProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Program_ProgramTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Program] WITH NOCHECK
    ADD CONSTRAINT [FK_Program_ProgramTypeDescriptor] FOREIGN KEY ([ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramTypeDescriptor] ([ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramCharacteristic_Program]...';


GO
ALTER TABLE [edfi].[ProgramCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramCharacteristic_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_Program]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluation_Program]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptCourseProgram_Program]...';


GO
ALTER TABLE [edfi].[CourseTranscriptCourseProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptCourseProgram_Program] FOREIGN KEY ([CourseEducationOrganizationId], [CourseProgramName], [CourseProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_CohortProgram_Program]...';


GO
ALTER TABLE [edfi].[CohortProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_CohortProgram_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffProgramAssociation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionProgram_Program]...';


GO
ALTER TABLE [edfi].[SectionProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramLearningStandard_Program]...';


GO
ALTER TABLE [edfi].[ProgramLearningStandard] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramLearningStandard_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramSponsor_Program]...';


GO
ALTER TABLE [edfi].[ProgramSponsor] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramSponsor_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyProgramAssociation_Program]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyProgramAssociation_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentProgram_Program]...';


GO
ALTER TABLE [edfi].[AssessmentProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramDimensionReportingTag_ProgramDimension]...';


GO
ALTER TABLE [edfi].[ProgramDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramDimensionReportingTag_ProgramDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[ProgramDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluation_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluation_ProgramEvaluation] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluation] ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor] FOREIGN KEY ([ProgramEvaluationPeriodDescriptorId]) REFERENCES [edfi].[ProgramEvaluationPeriodDescriptor] ([ProgramEvaluationPeriodDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[ProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor] FOREIGN KEY ([ProgramEvaluationTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationTypeDescriptor] ([ProgramEvaluationTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationElement_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluation] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluation] ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationLevel_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationLevel_ProgramEvaluation] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluation] ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationObjective_ProgramEvaluation]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationObjective_ProgramEvaluation] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluation] ([ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationElement_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_ProgramEvaluationElement] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationElement] ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationElement_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluationObjective] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationObjective] ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationElementProgramEvaluationLevel_ProgramEvaluationElement]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationElementProgramEvaluationLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationElementProgramEvaluationLevel_ProgramEvaluationElement] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationElement] ([ProgramEducationOrganizationId], [ProgramEvaluationElementTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationObjective_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_ProgramEvaluationObjective] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationObjective] ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProgramEvaluationObjectiveProgramEvaluationLevel_ProgramEvaluationObjective]...';


GO
ALTER TABLE [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_ProgramEvaluationObjectiveProgramEvaluationLevel_ProgramEvaluationObjective] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) REFERENCES [edfi].[ProgramEvaluationObjective] ([ProgramEducationOrganizationId], [ProgramEvaluationObjectiveTitle], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ProjectDimensionReportingTag_ProjectDimension]...';


GO
ALTER TABLE [edfi].[ProjectDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_ProjectDimensionReportingTag_ProjectDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[ProjectDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCard_Student]...';


GO
ALTER TABLE [edfi].[ReportCard] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCard_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCardGrade_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardGrade] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCardGrade_ReportCard] FOREIGN KEY ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) REFERENCES [edfi].[ReportCard] ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCardGradePointAverage_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardGradePointAverage] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCardGradePointAverage_ReportCard] FOREIGN KEY ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) REFERENCES [edfi].[ReportCard] ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCardStudentCompetencyObjective_ReportCard]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ReportCard] FOREIGN KEY ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) REFERENCES [edfi].[ReportCard] ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordReportCard_ReportCard]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_ReportCard] FOREIGN KEY ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]) REFERENCES [edfi].[ReportCard] ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[RestraintEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEvent_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEvent_School]...';


GO
ALTER TABLE [edfi].[RestraintEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEvent_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEvent_Student]...';


GO
ALTER TABLE [edfi].[RestraintEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEventProgram_RestraintEvent]...';


GO
ALTER TABLE [edfi].[RestraintEventProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEventProgram_RestraintEvent] FOREIGN KEY ([RestraintEventIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[RestraintEvent] ([RestraintEventIdentifier], [SchoolId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEventReason_RestraintEvent]...';


GO
ALTER TABLE [edfi].[RestraintEventReason] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEventReason_RestraintEvent] FOREIGN KEY ([RestraintEventIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[RestraintEvent] ([RestraintEventIdentifier], [SchoolId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_RestraintEvent_DisciplineIncident]...';


GO
ALTER TABLE [edfi].[RestraintEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_RestraintEvent_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId]) REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StateEducationAgencyAccountability_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StateEducationAgencyAccountability] WITH NOCHECK
    ADD CONSTRAINT [FK_StateEducationAgencyAccountability_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolYearType1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType1] FOREIGN KEY ([ClassOfSchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_LocalEducationAgencyAccountability_SchoolYearType]...';


GO
ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH NOCHECK
    ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_School_SchoolYearType]...';


GO
ALTER TABLE [edfi].[School] WITH NOCHECK
    ADD CONSTRAINT [FK_School_SchoolYearType] FOREIGN KEY ([CharterApprovalSchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Survey_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Survey] WITH NOCHECK
    ADD CONSTRAINT [FK_Survey_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociation_SchoolYearType]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociation_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Session_SchoolYearType]...';


GO
ALTER TABLE [edfi].[Session] WITH NOCHECK
    ADD CONSTRAINT [FK_Session_SchoolYearType] FOREIGN KEY ([SchoolYear]) REFERENCES [edfi].[SchoolYearType] ([SchoolYear]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentSection_Section]...';


GO
ALTER TABLE [edfi].[AssessmentSection] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentSection_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionAssociation_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_Section]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_CreditTypeDescriptor] FOREIGN KEY ([AvailableCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_LanguageDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_LanguageDescriptor] FOREIGN KEY ([InstructionLanguageDescriptorId]) REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_MediumOfInstructionDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_MediumOfInstructionDescriptor] FOREIGN KEY ([MediumOfInstructionDescriptorId]) REFERENCES [edfi].[MediumOfInstructionDescriptor] ([MediumOfInstructionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_PopulationServedDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_PopulationServedDescriptor] FOREIGN KEY ([PopulationServedDescriptorId]) REFERENCES [edfi].[PopulationServedDescriptor] ([PopulationServedDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_School]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_School] FOREIGN KEY ([LocationSchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section_SectionTypeDescriptor]...';


GO
ALTER TABLE [edfi].[Section] WITH NOCHECK
    ADD CONSTRAINT [FK_Section_SectionTypeDescriptor] FOREIGN KEY ([SectionTypeDescriptorId]) REFERENCES [edfi].[SectionTypeDescriptor] ([SectionTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCohortAssociationSection_Section]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCohortAssociationSection_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_Section]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionCharacteristic_Section]...';


GO
ALTER TABLE [edfi].[SectionCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionCharacteristic_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionClassPeriod_Section]...';


GO
ALTER TABLE [edfi].[SectionClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionClassPeriod_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_CourseTranscriptSection_Section]...';


GO
ALTER TABLE [edfi].[CourseTranscriptSection] WITH NOCHECK
    ADD CONSTRAINT [FK_CourseTranscriptSection_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionCourseLevelCharacteristic_Section]...';


GO
ALTER TABLE [edfi].[SectionCourseLevelCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionCourseLevelCharacteristic_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionOfferedGradeLevel_Section]...';


GO
ALTER TABLE [edfi].[SectionOfferedGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionOfferedGradeLevel_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionProgram_Section]...';


GO
ALTER TABLE [edfi].[SectionProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionProgram_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSectionAssociation_Section]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSectionAssociation_Section] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) REFERENCES [edfi].[Section] ([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SectionAttendanceTakenEvent_Staff]...';


GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_Session]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Survey_Session]...';


GO
ALTER TABLE [edfi].[Survey] WITH NOCHECK
    ADD CONSTRAINT [FK_Survey_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [SessionName]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Session_School]...';


GO
ALTER TABLE [edfi].[Session] WITH NOCHECK
    ADD CONSTRAINT [FK_Session_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Session_TermDescriptor]...';


GO
ALTER TABLE [edfi].[Session] WITH NOCHECK
    ADD CONSTRAINT [FK_Session_TermDescriptor] FOREIGN KEY ([TermDescriptorId]) REFERENCES [edfi].[TermDescriptor] ([TermDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SessionAcademicWeek_Session]...';


GO
ALTER TABLE [edfi].[SessionAcademicWeek] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionAcademicWeek_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SessionGradingPeriod_Session]...';


GO
ALTER TABLE [edfi].[SessionGradingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionGradingPeriod_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [SessionName]) REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [SessionName]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SourceDimensionReportingTag_SourceDimension]...';


GO
ALTER TABLE [edfi].[SourceDimensionReportingTag] WITH NOCHECK
    ADD CONSTRAINT [FK_SourceDimensionReportingTag_SourceDimension] FOREIGN KEY ([Code], [FiscalYear]) REFERENCES [edfi].[SourceDimension] ([Code], [FiscalYear]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffTribalAffiliation_Staff]...';


GO
ALTER TABLE [edfi].[StaffTribalAffiliation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffTribalAffiliation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffVisa_Staff]...';


GO
ALTER TABLE [edfi].[StaffVisa] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffVisa_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluation_Staff]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluation_Staff] FOREIGN KEY ([StaffEvaluatorStaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Staff_CitizenshipStatusDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] WITH NOCHECK
    ADD CONSTRAINT [FK_Staff_CitizenshipStatusDescriptor] FOREIGN KEY ([CitizenshipStatusDescriptorId]) REFERENCES [edfi].[CitizenshipStatusDescriptor] ([CitizenshipStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Staff_LevelOfEducationDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] WITH NOCHECK
    ADD CONSTRAINT [FK_Staff_LevelOfEducationDescriptor] FOREIGN KEY ([HighestCompletedLevelOfEducationDescriptorId]) REFERENCES [edfi].[LevelOfEducationDescriptor] ([LevelOfEducationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Staff_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Staff] WITH NOCHECK
    ADD CONSTRAINT [FK_Staff_SexDescriptor] FOREIGN KEY ([SexDescriptorId]) REFERENCES [edfi].[SexDescriptor] ([SexDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponse_Staff]...';


GO
ALTER TABLE [edfi].[SurveyResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponse_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffAbsenceEvent_Staff]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffAbsenceEvent_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffAddress_Staff]...';


GO
ALTER TABLE [edfi].[StaffAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffAddress_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponseStaffTargetAssociation_Staff]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffAncestryEthnicOrigin_Staff]...';


GO
ALTER TABLE [edfi].[StaffAncestryEthnicOrigin] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffAncestryEthnicOrigin_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffCohortAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffCohortAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffCohortAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffCredential_Staff]...';


GO
ALTER TABLE [edfi].[StaffCredential] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffCredential_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionStaff_Staff]...';


GO
ALTER TABLE [edfi].[DisciplineActionStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionStaff_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffDisciplineIncidentAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponseStaffTargetAssociation_Staff]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_Staff]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffElectronicMail_Staff]...';


GO
ALTER TABLE [edfi].[StaffElectronicMail] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffElectronicMail_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffIdentificationCode_Staff]...';


GO
ALTER TABLE [edfi].[StaffIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffIdentificationCode_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffIdentificationDocument_Staff]...';


GO
ALTER TABLE [edfi].[StaffIdentificationDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffIdentificationDocument_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_InterventionStaff_Staff]...';


GO
ALTER TABLE [edfi].[InterventionStaff] WITH NOCHECK
    ADD CONSTRAINT [FK_InterventionStaff_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffInternationalAddress_Staff]...';


GO
ALTER TABLE [edfi].[StaffInternationalAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffInternationalAddress_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffLanguage_Staff]...';


GO
ALTER TABLE [edfi].[StaffLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffLanguage_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffLeave_Staff]...';


GO
ALTER TABLE [edfi].[StaffLeave] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffLeave_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffOtherName_Staff]...';


GO
ALTER TABLE [edfi].[StaffOtherName] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffOtherName_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffPersonalIdentificationDocument_Staff]...';


GO
ALTER TABLE [edfi].[StaffPersonalIdentificationDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffPersonalIdentificationDocument_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffProgramAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffProgramAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffRace_Staff]...';


GO
ALTER TABLE [edfi].[StaffRace] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffRace_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffRecognition_Staff]...';


GO
ALTER TABLE [edfi].[StaffRecognition] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffRecognition_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSectionAssociation_Staff]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSectionAssociation_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffTelephone_Staff]...';


GO
ALTER TABLE [edfi].[StaffTelephone] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffTelephone_Staff] FOREIGN KEY ([StaffUSI]) REFERENCES [edfi].[Staff] ([StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StaffAbsenceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor] FOREIGN KEY ([AbsenceEventCategoryDescriptorId]) REFERENCES [edfi].[AbsenceEventCategoryDescriptor] ([AbsenceEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_StaffDisciplineIncidentAssociation]...';


GO
ALTER TABLE [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_StaffDisciplineIncidentAssociation] FOREIGN KEY ([IncidentIdentifier], [SchoolId], [StaffUSI]) REFERENCES [edfi].[StaffDisciplineIncidentAssociation] ([IncidentIdentifier], [SchoolId], [StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor] FOREIGN KEY ([StaffClassificationDescriptorId]) REFERENCES [edfi].[StaffClassificationDescriptor] ([StaffClassificationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation] FOREIGN KEY ([EmploymentEducationOrganizationId], [EmploymentStatusDescriptorId], [EmploymentHireDate], [StaffUSI]) REFERENCES [edfi].[StaffEducationOrganizationEmploymentAssociation] ([EducationOrganizationId], [EmploymentStatusDescriptorId], [HireDate], [StaffUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor] FOREIGN KEY ([ContactTypeDescriptorId]) REFERENCES [edfi].[ContactTypeDescriptor] ([ContactTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation] FOREIGN KEY ([ContactTitle], [EducationOrganizationId], [StaffUSI]) REFERENCES [edfi].[StaffEducationOrganizationContactAssociation] ([ContactTitle], [EducationOrganizationId], [StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationTelephone] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation] FOREIGN KEY ([ContactTitle], [EducationOrganizationId], [StaffUSI]) REFERENCES [edfi].[StaffEducationOrganizationContactAssociation] ([ContactTitle], [EducationOrganizationId], [StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor] FOREIGN KEY ([EmploymentStatusDescriptorId]) REFERENCES [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor] FOREIGN KEY ([SeparationDescriptorId]) REFERENCES [edfi].[SeparationDescriptor] ([SeparationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor] FOREIGN KEY ([SeparationReasonDescriptorId]) REFERENCES [edfi].[SeparationReasonDescriptor] ([SeparationReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffLeave_StaffLeaveEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StaffLeave] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffLeave_StaffLeaveEventCategoryDescriptor] FOREIGN KEY ([StaffLeaveEventCategoryDescriptorId]) REFERENCES [edfi].[StaffLeaveEventCategoryDescriptor] ([StaffLeaveEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociation_ProgramAssignmentDescriptor]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId]) REFERENCES [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociation_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation] FOREIGN KEY ([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) REFERENCES [edfi].[StaffSchoolAssociation] ([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation] FOREIGN KEY ([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) REFERENCES [edfi].[StaffSchoolAssociation] ([ProgramAssignmentDescriptorId], [SchoolId], [StaffUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StaffSectionAssociation_ClassroomPositionDescriptor]...';


GO
ALTER TABLE [edfi].[StaffSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StaffSectionAssociation_ClassroomPositionDescriptor] FOREIGN KEY ([ClassroomPositionDescriptorId]) REFERENCES [edfi].[ClassroomPositionDescriptor] ([ClassroomPositionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluation_Student]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponse_Student]...';


GO
ALTER TABLE [edfi].[SurveyResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponse_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Student_CitizenshipStatusDescriptor]...';


GO
ALTER TABLE [edfi].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_CitizenshipStatusDescriptor] FOREIGN KEY ([CitizenshipStatusDescriptorId]) REFERENCES [edfi].[CitizenshipStatusDescriptor] ([CitizenshipStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Student_CountryDescriptor]...';


GO
ALTER TABLE [edfi].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_CountryDescriptor] FOREIGN KEY ([BirthCountryDescriptorId]) REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Student_SexDescriptor]...';


GO
ALTER TABLE [edfi].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_SexDescriptor] FOREIGN KEY ([BirthSexDescriptorId]) REFERENCES [edfi].[SexDescriptor] ([SexDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Student_StateAbbreviationDescriptor]...';


GO
ALTER TABLE [edfi].[Student] WITH NOCHECK
    ADD CONSTRAINT [FK_Student_StateAbbreviationDescriptor] FOREIGN KEY ([BirthStateAbbreviationDescriptorId]) REFERENCES [edfi].[StateAbbreviationDescriptor] ([StateAbbreviationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_Student]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_Student]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentGradebookEntry_Student]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentGradebookEntry_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHealth_Student]...';


GO
ALTER TABLE [edfi].[StudentHealth] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHealth_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCohortAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCohortAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTransportation_Student]...';


GO
ALTER TABLE [edfi].[StudentTransportation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTransportation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentIdentificationDocument_Student]...';


GO
ALTER TABLE [edfi].[StudentIdentificationDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentIdentificationDocument_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjective_Student]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjective_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentVisa_Student]...';


GO
ALTER TABLE [edfi].[StudentVisa] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentVisa_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_Student]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentContactAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentContactAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentOtherName_Student]...';


GO
ALTER TABLE [edfi].[StudentOtherName] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentOtherName_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_Student]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentPersonalIdentificationDocument_Student]...';


GO
ALTER TABLE [edfi].[StudentPersonalIdentificationDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentPersonalIdentificationDocument_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor] FOREIGN KEY ([CumulativeEarnedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor1]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor1] FOREIGN KEY ([CumulativeAttemptedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor2]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor2] FOREIGN KEY ([SessionEarnedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_CreditTypeDescriptor3]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor3] FOREIGN KEY ([SessionAttemptedCreditTypeDescriptorId]) REFERENCES [edfi].[CreditTypeDescriptor] ([CreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecord_TermDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecord_TermDescriptor] FOREIGN KEY ([TermDescriptorId]) REFERENCES [edfi].[TermDescriptor] ([TermDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordClassRanking_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordDiploma_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordGradePointAverage_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordGradePointAverage] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordGradePointAverage_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordRecognition_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordRecognition] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAcademicRecordReportCard_StudentAcademicRecord]...';


GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_StudentAcademicRecord] FOREIGN KEY ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) REFERENCES [edfi].[StudentAcademicRecord] ([EducationOrganizationId], [SchoolYear], [StudentUSI], [TermDescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_AdministrationEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_AdministrationEnvironmentDescriptor] FOREIGN KEY ([AdministrationEnvironmentDescriptorId]) REFERENCES [edfi].[AdministrationEnvironmentDescriptor] ([AdministrationEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_EventCircumstanceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_EventCircumstanceDescriptor] FOREIGN KEY ([EventCircumstanceDescriptorId]) REFERENCES [edfi].[EventCircumstanceDescriptor] ([EventCircumstanceDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_GradeLevelDescriptor] FOREIGN KEY ([WhenAssessedGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_LanguageDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_LanguageDescriptor] FOREIGN KEY ([AdministrationLanguageDescriptorId]) REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_PlatformTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_PlatformTypeDescriptor] FOREIGN KEY ([PlatformTypeDescriptorId]) REFERENCES [edfi].[PlatformTypeDescriptor] ([PlatformTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_ReasonNotTestedDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_ReasonNotTestedDescriptor] FOREIGN KEY ([ReasonNotTestedDescriptorId]) REFERENCES [edfi].[ReasonNotTestedDescriptor] ([ReasonNotTestedDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_RetestIndicatorDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_RetestIndicatorDescriptor] FOREIGN KEY ([RetestIndicatorDescriptorId]) REFERENCES [edfi].[RetestIndicatorDescriptor] ([RetestIndicatorDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessment_School]...';


GO
ALTER TABLE [edfi].[StudentAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessment_School] FOREIGN KEY ([ReportedSchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentAccommodation_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentAccommodation_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentItem_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentItem] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentItem_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentPerformanceLevel_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentPeriod_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentPeriod_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentScoreResult_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentScoreResult] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentScoreResult_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment]...';


GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) REFERENCES [edfi].[StudentAssessment] ([AssessmentIdentifier], [Namespace], [StudentAssessmentIdentifier], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor] FOREIGN KEY ([EducationOrganizationAssociationTypeDescriptorId]) REFERENCES [edfi].[EducationOrganizationAssociationTypeDescriptor] ([EducationOrganizationAssociationTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCohortAssociationSection_StudentCohortAssociation]...';


GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCohortAssociationSection_StudentCohortAssociation] FOREIGN KEY ([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentCohortAssociation] ([BeginDate], [CohortIdentifier], [EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentCompetencyObjective] ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjective_CompetencyLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId]) REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentCompetencyObjective] ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentCompetencyObjective] ([GradingPeriodDescriptorId], [GradingPeriodName], [GradingPeriodSchoolId], [GradingPeriodSchoolYear], [ObjectiveEducationOrganizationId], [Objective], [ObjectiveGradeLevelDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentContactAssociation_RelationDescriptor]...';


GO
ALTER TABLE [edfi].[StudentContactAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentContactAssociation_RelationDescriptor] FOREIGN KEY ([RelationDescriptorId]) REFERENCES [edfi].[RelationDescriptor] ([RelationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_StudentDisciplineIncidentBehaviorAssociation]...';


GO
ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_StudentDisciplineIncidentBehaviorAssociation] FOREIGN KEY ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentDisciplineIncidentBehaviorAssociation] ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor] FOREIGN KEY ([BehaviorDescriptorId]) REFERENCES [edfi].[BehaviorDescriptor] ([BehaviorDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentBehaviorAssociation]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentBehaviorAssociation] FOREIGN KEY ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentDisciplineIncidentBehaviorAssociation] ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentNonOffenderAssoci]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentNonOffenderAssoci] FOREIGN KEY ([IncidentIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentDisciplineIncidentNonOffenderAssociation] ([IncidentIdentifier], [SchoolId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationAncestryEthnicOrigin_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationAncestryEthnicOrigin_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisability] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationDisplacedStudent_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationElectronicMail] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationInternationalAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguage] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationRace] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicator] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTelephone] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTribalAffiliation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor] FOREIGN KEY ([BarrierToInternetAccessInResidenceDescriptorId]) REFERENCES [edfi].[BarrierToInternetAccessInResidenceDescriptor] ([BarrierToInternetAccessInResidenceDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor] FOREIGN KEY ([InternetAccessTypeInResidenceDescriptorId]) REFERENCES [edfi].[InternetAccessTypeInResidenceDescriptor] ([InternetAccessTypeInResidenceDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor] FOREIGN KEY ([InternetPerformanceInResidenceDescriptorId]) REFERENCES [edfi].[InternetPerformanceInResidenceDescriptor] ([InternetPerformanceInResidenceDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor] FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId]) REFERENCES [edfi].[LimitedEnglishProficiencyDescriptor] ([LimitedEnglishProficiencyDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor] FOREIGN KEY ([PrimaryLearningDeviceAccessDescriptorId]) REFERENCES [edfi].[PrimaryLearningDeviceAccessDescriptor] ([PrimaryLearningDeviceAccessDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor] FOREIGN KEY ([PrimaryLearningDeviceAwayFromSchoolDescriptorId]) REFERENCES [edfi].[PrimaryLearningDeviceAwayFromSchoolDescriptor] ([PrimaryLearningDeviceAwayFromSchoolDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor] FOREIGN KEY ([PrimaryLearningDeviceProviderDescriptorId]) REFERENCES [edfi].[PrimaryLearningDeviceProviderDescriptor] ([PrimaryLearningDeviceProviderDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_SexDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_SexDescriptor] FOREIGN KEY ([SexDescriptorId]) REFERENCES [edfi].[SexDescriptor] ([SexDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor] FOREIGN KEY ([SupporterMilitaryConnectionDescriptorId]) REFERENCES [edfi].[SupporterMilitaryConnectionDescriptor] ([SupporterMilitaryConnectionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor] FOREIGN KEY ([ResponsibilityDescriptorId]) REFERENCES [edfi].[ResponsibilityDescriptor] ([ResponsibilityDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentGradebookEntry_AssignmentLateStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentGradebookEntry_AssignmentLateStatusDescriptor] FOREIGN KEY ([AssignmentLateStatusDescriptorId]) REFERENCES [edfi].[AssignmentLateStatusDescriptor] ([AssignmentLateStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentGradebookEntry_CompetencyLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentGradebookEntry_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId]) REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentGradebookEntry_SubmissionStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentGradebookEntry] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentGradebookEntry_SubmissionStatusDescriptor] FOREIGN KEY ([SubmissionStatusDescriptorId]) REFERENCES [edfi].[SubmissionStatusDescriptor] ([SubmissionStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor]...';


GO
ALTER TABLE [edfi].[StudentHealth] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor] FOREIGN KEY ([NonMedicalImmunizationExemptionDescriptorId]) REFERENCES [edfi].[NonMedicalImmunizationExemptionDescriptor] ([NonMedicalImmunizationExemptionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHealthAdditionalImmunization_StudentHealth]...';


GO
ALTER TABLE [edfi].[StudentHealthAdditionalImmunization] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHealthAdditionalImmunization_StudentHealth] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentHealth] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentHealthRequiredImmunization_StudentHealth]...';


GO
ALTER TABLE [edfi].[StudentHealthRequiredImmunization] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentHealthRequiredImmunization_StudentHealth] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentHealth] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation]...';


GO
ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation] FOREIGN KEY ([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI]) REFERENCES [edfi].[StudentInterventionAssociation] ([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId]) REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId]) REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluation_RatingLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluation_RatingLevelDescriptor] FOREIGN KEY ([SummaryEvaluationRatingLevelDescriptorId]) REFERENCES [edfi].[RatingLevelDescriptor] ([RatingLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluationExternalEvaluator_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationExternalEvaluator] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluationExternalEvaluator_StudentProgramEvaluation] FOREIGN KEY ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentProgramEvaluation] ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationElement_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_StudentProgramEvaluation] FOREIGN KEY ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentProgramEvaluation] ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentProgramEvaluationStudentEvaluationObjective_StudentProgramEvaluation]...';


GO
ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_StudentProgramEvaluation] FOREIGN KEY ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentProgramEvaluation] ([EvaluationDate], [ProgramEducationOrganizationId], [ProgramEvaluationPeriodDescriptorId], [ProgramEvaluationTitle], [ProgramEvaluationTypeDescriptorId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_EnrollmentTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_EnrollmentTypeDescriptor] FOREIGN KEY ([EnrollmentTypeDescriptorId]) REFERENCES [edfi].[EnrollmentTypeDescriptor] ([EnrollmentTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor] FOREIGN KEY ([EntryGradeLevelReasonDescriptorId]) REFERENCES [edfi].[EntryGradeLevelReasonDescriptor] ([EntryGradeLevelReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_EntryTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryTypeDescriptor] FOREIGN KEY ([EntryTypeDescriptorId]) REFERENCES [edfi].[EntryTypeDescriptor] ([EntryTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor] FOREIGN KEY ([ExitWithdrawTypeDescriptorId]) REFERENCES [edfi].[ExitWithdrawTypeDescriptor] ([ExitWithdrawTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor] FOREIGN KEY ([EntryGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_GradeLevelDescriptor1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor1] FOREIGN KEY ([NextYearGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_ResidencyStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_ResidencyStatusDescriptor] FOREIGN KEY ([ResidencyStatusDescriptorId]) REFERENCES [edfi].[ResidencyStatusDescriptor] ([ResidencyStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_School]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_School1]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_School1] FOREIGN KEY ([NextYearSchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor] FOREIGN KEY ([SchoolChoiceBasisDescriptorId]) REFERENCES [edfi].[SchoolChoiceBasisDescriptor] ([SchoolChoiceBasisDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociationAlternativeGraduationPlan_StudentSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_StudentSchoolAssociation] FOREIGN KEY ([EntryDate], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentSchoolAssociation] ([EntryDate], [SchoolId], [StudentUSI]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation] FOREIGN KEY ([EntryDate], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentSchoolAssociation] ([EntryDate], [SchoolId], [StudentUSI]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId]) REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSchoolAttendanceEvent_School]...';


GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_School] FOREIGN KEY ([SchoolId]) REFERENCES [edfi].[School] ([SchoolId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_AttemptStatusDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_AttemptStatusDescriptor] FOREIGN KEY ([AttemptStatusDescriptorId]) REFERENCES [edfi].[AttemptStatusDescriptor] ([AttemptStatusDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_RepeatIdentifierDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_RepeatIdentifierDescriptor] FOREIGN KEY ([RepeatIdentifierDescriptorId]) REFERENCES [edfi].[RepeatIdentifierDescriptor] ([RepeatIdentifierDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociationProgram_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociationProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociationProgram_StudentSectionAssociation] FOREIGN KEY ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[StudentSectionAssociation] ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation]...';


GO
ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation] FOREIGN KEY ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[StudentSectionAssociation] ([BeginDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_DualCreditInstitutionDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_DualCreditInstitutionDescriptor] FOREIGN KEY ([DualCreditInstitutionDescriptorId]) REFERENCES [edfi].[DualCreditInstitutionDescriptor] ([DualCreditInstitutionDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_DualCreditTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_DualCreditTypeDescriptor] FOREIGN KEY ([DualCreditTypeDescriptorId]) REFERENCES [edfi].[DualCreditTypeDescriptor] ([DualCreditTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAssociation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentSectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAssociation_EducationOrganization] FOREIGN KEY ([DualCreditEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId]) REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor] FOREIGN KEY ([EducationalEnvironmentDescriptorId]) REFERENCES [edfi].[EducationalEnvironmentDescriptor] ([EducationalEnvironmentDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSectionAttendanceEventClassPeriod_StudentSectionAttendanceEvent]...';


GO
ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_StudentSectionAttendanceEvent] FOREIGN KEY ([AttendanceEventCategoryDescriptorId], [EventDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) REFERENCES [edfi].[StudentSectionAttendanceEvent] ([AttendanceEventCategoryDescriptorId], [EventDate], [LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName], [StudentUSI]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor] FOREIGN KEY ([SpecialEducationExitReasonDescriptorId]) REFERENCES [edfi].[SpecialEducationExitReasonDescriptor] ([SpecialEducationExitReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor] FOREIGN KEY ([SpecialEducationSettingDescriptorId]) REFERENCES [edfi].[SpecialEducationSettingDescriptor] ([SpecialEducationSettingDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisability] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentSpecialEducationProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentSpecialEducationProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[StudentSpecialEducationProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor] FOREIGN KEY ([EligibilityDelayReasonDescriptorId]) REFERENCES [edfi].[EligibilityDelayReasonDescriptor] ([EligibilityDelayReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor] FOREIGN KEY ([EligibilityEvaluationTypeDescriptorId]) REFERENCES [edfi].[EligibilityEvaluationTypeDescriptor] ([EligibilityEvaluationTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor] FOREIGN KEY ([EvaluationDelayReasonDescriptorId]) REFERENCES [edfi].[EvaluationDelayReasonDescriptor] ([EvaluationDelayReasonDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor] FOREIGN KEY ([IDEAPartDescriptorId]) REFERENCES [edfi].[IDEAPartDescriptor] ([IDEAPartDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentTransportation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor] FOREIGN KEY ([TransportationPublicExpenseEligibilityTypeDescriptorId]) REFERENCES [edfi].[TransportationPublicExpenseEligibilityTypeDescriptor] ([TransportationPublicExpenseEligibilityTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTransportation_TransportationTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentTransportation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTransportation_TransportationTypeDescriptor] FOREIGN KEY ([TransportationTypeDescriptorId]) REFERENCES [edfi].[TransportationTypeDescriptor] ([TransportationTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentTransportationStudentBusDetails_StudentTransportation]...';


GO
ALTER TABLE [edfi].[StudentTransportationStudentBusDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentTransportationStudentBusDetails_StudentTransportation] FOREIGN KEY ([StudentUSI], [TransportationEducationOrganizationId]) REFERENCES [edfi].[StudentTransportation] ([StudentUSI], [TransportationEducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponse_Survey]...';


GO
ALTER TABLE [edfi].[SurveyResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponse_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySection_Survey]...';


GO
ALTER TABLE [edfi].[SurveySection] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySection_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveySectionAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionAssociation_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_Survey_SurveyCategoryDescriptor]...';


GO
ALTER TABLE [edfi].[Survey] WITH NOCHECK
    ADD CONSTRAINT [FK_Survey_SurveyCategoryDescriptor] FOREIGN KEY ([SurveyCategoryDescriptorId]) REFERENCES [edfi].[SurveyCategoryDescriptor] ([SurveyCategoryDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyCourseAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveyCourseAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyCourseAssociation_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyProgramAssociation_Survey]...';


GO
ALTER TABLE [edfi].[SurveyProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyProgramAssociation_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestion_Survey]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestion_Survey] FOREIGN KEY ([Namespace], [SurveyIdentifier]) REFERENCES [edfi].[Survey] ([Namespace], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionResponseChoice_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseChoice] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionResponseChoice_SurveyQuestion] FOREIGN KEY ([Namespace], [QuestionCode], [SurveyIdentifier]) REFERENCES [edfi].[SurveyQuestion] ([Namespace], [QuestionCode], [SurveyIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestion_QuestionFormDescriptor]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestion_QuestionFormDescriptor] FOREIGN KEY ([QuestionFormDescriptorId]) REFERENCES [edfi].[QuestionFormDescriptor] ([QuestionFormDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestion_SurveySection]...';


GO
ALTER TABLE [edfi].[SurveyQuestion] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestion_SurveySection] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveySectionTitle]) REFERENCES [edfi].[SurveySection] ([Namespace], [SurveyIdentifier], [SurveySectionTitle]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionMatrix_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionMatrix] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionMatrix_SurveyQuestion] FOREIGN KEY ([Namespace], [QuestionCode], [SurveyIdentifier]) REFERENCES [edfi].[SurveyQuestion] ([Namespace], [QuestionCode], [SurveyIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionResponse_SurveyQuestion]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionResponse_SurveyQuestion] FOREIGN KEY ([Namespace], [QuestionCode], [SurveyIdentifier]) REFERENCES [edfi].[SurveyQuestion] ([Namespace], [QuestionCode], [SurveyIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_SurveyQuestionResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_SurveyQuestionResponse] FOREIGN KEY ([Namespace], [QuestionCode], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyQuestionResponse] ([Namespace], [QuestionCode], [SurveyIdentifier], [SurveyResponseIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionResponseValue_SurveyQuestionResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponseValue] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionResponseValue_SurveyQuestionResponse] FOREIGN KEY ([Namespace], [QuestionCode], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyQuestionResponse] ([Namespace], [QuestionCode], [SurveyIdentifier], [SurveyResponseIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyQuestionResponse_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyQuestionResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyQuestionResponse_SurveyResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponseStaffTargetAssociation_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_SurveyResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveyResponseSurveyLevel_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveyResponseSurveyLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveyResponseSurveyLevel_SurveyResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponse_SurveyResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponse_SurveyResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]) REFERENCES [edfi].[SurveyResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponse_SurveySection]...';


GO
ALTER TABLE [edfi].[SurveySectionResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponse_SurveySection] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveySectionTitle]) REFERENCES [edfi].[SurveySection] ([Namespace], [SurveyIdentifier], [SurveySectionTitle]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle]) REFERENCES [edfi].[SurveySectionResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse]...';


GO
ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse] FOREIGN KEY ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle]) REFERENCES [edfi].[SurveySectionResponse] ([Namespace], [SurveyIdentifier], [SurveyResponseIdentifier], [SurveySectionTitle]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministration_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministration_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministration_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AssessmentAdministration] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministration_EducationOrganization] FOREIGN KEY ([AssigningEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentAdministration]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentAdministration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) REFERENCES [edfi].[AssessmentAdministration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentBatteryPart]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentBatteryPart] FOREIGN KEY ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[AssessmentBatteryPart] ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationParticipation_AssessmentAdministration]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationParticipation_AssessmentAdministration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) REFERENCES [edfi].[AssessmentAdministration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationParticipation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationParticipation_EducationOrganization] FOREIGN KEY ([ParticipatingEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationParticipationAdministrationPointOfContact_AssessmentAdministrationParticipation]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationParticipationAdministrationPointOfContact_AssessmentAdministrationParticipation] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace], [ParticipatingEducationOrganizationId]) REFERENCES [edfi].[AssessmentAdministrationParticipation] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace], [ParticipatingEducationOrganizationId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationParticipationAdministrationPointOfContact_EducationOrganization]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationParticipationAdministrationPointOfContact_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentAdministrationPeriod_AssessmentAdministration]...';


GO
ALTER TABLE [edfi].[AssessmentAdministrationPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentAdministrationPeriod_AssessmentAdministration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) REFERENCES [edfi].[AssessmentAdministration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentBatteryPart_Assessment]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPart] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentBatteryPart_Assessment] FOREIGN KEY ([AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[Assessment] ([AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentBatteryPartObjectiveAssessment_AssessmentBatteryPart]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentBatteryPartObjectiveAssessment_AssessmentBatteryPart] FOREIGN KEY ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[AssessmentBatteryPart] ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_AssessmentBatteryPartObjectiveAssessment_ObjectiveAssessment]...';


GO
ALTER TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment] WITH NOCHECK
    ADD CONSTRAINT [FK_AssessmentBatteryPartObjectiveAssessment_ObjectiveAssessment] FOREIGN KEY ([AssessmentIdentifier], [IdentificationCode], [Namespace]) REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentIdentifier], [IdentificationCode], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_DualCreditInstitutionDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DualCreditInstitutionDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DualCreditInstitutionDescriptor_Descriptor] FOREIGN KEY ([DualCreditInstitutionDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_DualCreditTypeDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[DualCreditTypeDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_DualCreditTypeDescriptor_Descriptor] FOREIGN KEY ([DualCreditTypeDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_Section504DisabilityDescriptor_Descriptor]...';


GO
ALTER TABLE [edfi].[Section504DisabilityDescriptor] WITH NOCHECK
    ADD CONSTRAINT [FK_Section504DisabilityDescriptor_Descriptor] FOREIGN KEY ([Section504DisabilityDescriptorId]) REFERENCES [edfi].[Descriptor] ([DescriptorId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_AssessmentAdministration]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_AssessmentAdministration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]) REFERENCES [edfi].[AssessmentAdministration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_EducationOrganization] FOREIGN KEY ([ReportingEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_EducationOrganization1]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_EducationOrganization1] FOREIGN KEY ([TestingEducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_GradeLevelDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_GradeLevelDescriptor] FOREIGN KEY ([AssessmentGradeLevelDescriptorId]) REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_PlatformTypeDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_PlatformTypeDescriptor] FOREIGN KEY ([PlatformTypeDescriptorId]) REFERENCES [edfi].[PlatformTypeDescriptor] ([PlatformTypeDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_StudentEducationOrganizationAssessmentAccommodation]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssessmentAccommodation] FOREIGN KEY ([ScheduledEducationOrganizationId], [ScheduledStudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssessmentAccommodation] ([EducationOrganizationId], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_StudentEducationOrganizationAssociation]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssociation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistration_StudentSchoolAssociation]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistration_StudentSchoolAssociation] FOREIGN KEY ([EntryDate], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentSchoolAssociation] ([EntryDate], [SchoolId], [StudentUSI]) ON UPDATE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationAssessmentAccommodation_AccommodationDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentAccommodation_AccommodationDescriptor] FOREIGN KEY ([AccommodationDescriptorId]) REFERENCES [edfi].[AccommodationDescriptor] ([AccommodationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationAssessmentAccommodation_StudentAssessmentRegistration]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentAccommodation_StudentAssessmentRegistration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) REFERENCES [edfi].[StudentAssessmentRegistration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationAssessmentCustomization_StudentAssessmentRegistration]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentCustomization] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentCustomization_StudentAssessmentRegistration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) REFERENCES [edfi].[StudentAssessmentRegistration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationBatteryPartAssociation_AssessmentBatteryPart]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociation_AssessmentBatteryPart] FOREIGN KEY ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]) REFERENCES [edfi].[AssessmentBatteryPart] ([AssessmentBatteryPartName], [AssessmentIdentifier], [Namespace]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationBatteryPartAssociation_StudentAssessmentRegistration]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociation_StudentAssessmentRegistration] FOREIGN KEY ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) REFERENCES [edfi].[StudentAssessmentRegistration] ([AdministrationIdentifier], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_AccommodationDescriptor]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_AccommodationDescriptor] FOREIGN KEY ([AccommodationDescriptorId]) REFERENCES [edfi].[AccommodationDescriptor] ([AccommodationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_StudentAssessmentRegistrationBatteryPartAssociation]...';


GO
ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_StudentAssessmentRegistrationBatteryPartAssociation] FOREIGN KEY ([AdministrationIdentifier], [AssessmentBatteryPartName], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) REFERENCES [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] ([AdministrationIdentifier], [AssessmentBatteryPartName], [AssessmentIdentifier], [AssigningEducationOrganizationId], [EducationOrganizationId], [Namespace], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociationWeapon_StudentDisciplineIncidentBehaviorAssociation]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationWeapon_StudentDisciplineIncidentBehaviorAssociation] FOREIGN KEY ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]) REFERENCES [edfi].[StudentDisciplineIncidentBehaviorAssociation] ([BehaviorDescriptorId], [IncidentIdentifier], [SchoolId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentDisciplineIncidentBehaviorAssociationWeapon_WeaponDescriptor]...';


GO
ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationWeapon_WeaponDescriptor] FOREIGN KEY ([WeaponDescriptorId]) REFERENCES [edfi].[WeaponDescriptor] ([WeaponDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssessmentAccommodation_Student]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodation_Student] FOREIGN KEY ([StudentUSI]) REFERENCES [edfi].[Student] ([StudentUSI]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssessmentAccommodation_EducationOrganization]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId]) REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_AccommodationDescriptor]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_AccommodationDescriptor] FOREIGN KEY ([AccommodationDescriptorId]) REFERENCES [edfi].[AccommodationDescriptor] ([AccommodationDescriptorId]);


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_StudentEducationOrganizationAssessmentAccommodation]...';


GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_StudentEducationOrganizationAssessmentAccommodation] FOREIGN KEY ([EducationOrganizationId], [StudentUSI]) REFERENCES [edfi].[StudentEducationOrganizationAssessmentAccommodation] ([EducationOrganizationId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSection504ProgramAssociation_GeneralStudentProgramAssociation]...';


GO
ALTER TABLE [edfi].[StudentSection504ProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSection504ProgramAssociation_GeneralStudentProgramAssociation] FOREIGN KEY ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) REFERENCES [edfi].[GeneralStudentProgramAssociation] ([BeginDate], [EducationOrganizationId], [ProgramEducationOrganizationId], [ProgramName], [ProgramTypeDescriptorId], [StudentUSI]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [edfi].[FK_StudentSection504ProgramAssociation_Section504DisabilityDescriptor]...';


GO
ALTER TABLE [edfi].[StudentSection504ProgramAssociation] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentSection504ProgramAssociation_Section504DisabilityDescriptor] FOREIGN KEY ([Section504DisabilityDescriptorId]) REFERENCES [edfi].[Section504DisabilityDescriptor] ([Section504DisabilityDescriptorId]);


GO
PRINT N'Creating Trigger [edfi].[edfi_AcademicWeek_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AcademicWeek_TR_UpdateChangeVersion] ON [edfi].[AcademicWeek] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AcademicWeek]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AcademicWeek] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AcademicWeek_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AcademicWeek_TR_DeleteTracking] ON [edfi].[AcademicWeek] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AcademicWeek](OldSchoolId, OldWeekIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.SchoolId, d.WeekIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AccountabilityRating_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AccountabilityRating_TR_DeleteTracking] ON [edfi].[AccountabilityRating] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AccountabilityRating](OldEducationOrganizationId, OldRatingTitle, OldSchoolYear, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.RatingTitle, d.SchoolYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AccountabilityRating_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AccountabilityRating_TR_UpdateChangeVersion] ON [edfi].[AccountabilityRating] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AccountabilityRating]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AccountabilityRating] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Assessment_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Assessment_TR_UpdateChangeVersion] ON [edfi].[Assessment] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Assessment]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Assessment] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Assessment_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Assessment_TR_DeleteTracking] ON [edfi].[Assessment] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Assessment](OldAssessmentIdentifier, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentItem_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentItem_TR_UpdateChangeVersion] ON [edfi].[AssessmentItem] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AssessmentItem]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AssessmentItem] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentItem_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentItem_TR_DeleteTracking] ON [edfi].[AssessmentItem] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AssessmentItem](OldAssessmentIdentifier, OldIdentificationCode, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.IdentificationCode, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentScoreRangeLearningStandard_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentScoreRangeLearningStandard_TR_UpdateChangeVersion] ON [edfi].[AssessmentScoreRangeLearningStandard] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AssessmentScoreRangeLearningStandard]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AssessmentScoreRangeLearningStandard] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentScoreRangeLearningStandard_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentScoreRangeLearningStandard_TR_DeleteTracking] ON [edfi].[AssessmentScoreRangeLearningStandard] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AssessmentScoreRangeLearningStandard](OldAssessmentIdentifier, OldNamespace, OldScoreRangeId, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.Namespace, d.ScoreRangeId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_BalanceSheetDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_BalanceSheetDimension_TR_DeleteTracking] ON [edfi].[BalanceSheetDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[BalanceSheetDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_BalanceSheetDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_BalanceSheetDimension_TR_UpdateChangeVersion] ON [edfi].[BalanceSheetDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[BalanceSheetDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[BalanceSheetDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_BellSchedule_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_BellSchedule_TR_UpdateChangeVersion] ON [edfi].[BellSchedule] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[BellSchedule]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[BellSchedule] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_BellSchedule_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_BellSchedule_TR_DeleteTracking] ON [edfi].[BellSchedule] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[BellSchedule](OldBellScheduleName, OldSchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.BellScheduleName, d.SchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Calendar_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Calendar_TR_DeleteTracking] ON [edfi].[Calendar] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Calendar](OldCalendarCode, OldSchoolId, OldSchoolYear, Id, Discriminator, ChangeVersion)
    SELECT d.CalendarCode, d.SchoolId, d.SchoolYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Calendar_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Calendar_TR_UpdateChangeVersion] ON [edfi].[Calendar] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Calendar]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Calendar] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CalendarDate_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CalendarDate_TR_UpdateChangeVersion] ON [edfi].[CalendarDate] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CalendarDate]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CalendarDate] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CalendarDate_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CalendarDate_TR_DeleteTracking] ON [edfi].[CalendarDate] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CalendarDate](OldCalendarCode, OldDate, OldSchoolId, OldSchoolYear, Id, Discriminator, ChangeVersion)
    SELECT d.CalendarCode, d.Date, d.SchoolId, d.SchoolYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ChartOfAccount_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ChartOfAccount_TR_DeleteTracking] ON [edfi].[ChartOfAccount] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ChartOfAccount](OldAccountIdentifier, OldEducationOrganizationId, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.EducationOrganizationId, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ChartOfAccount_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ChartOfAccount_TR_UpdateChangeVersion] ON [edfi].[ChartOfAccount] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ChartOfAccount]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ChartOfAccount] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ClassPeriod_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ClassPeriod_TR_UpdateChangeVersion] ON [edfi].[ClassPeriod] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ClassPeriod]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ClassPeriod] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.ClassPeriod(
        OldClassPeriodName, OldSchoolId, 
        NewClassPeriodName, NewSchoolId, 
        Id, ChangeVersion)
    SELECT
        d.ClassPeriodName, d.SchoolId, 
        i.ClassPeriodName, i.SchoolId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.ClassPeriodName <> i.ClassPeriodName OR d.SchoolId <> i.SchoolId;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ClassPeriod_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ClassPeriod_TR_DeleteTracking] ON [edfi].[ClassPeriod] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ClassPeriod](OldClassPeriodName, OldSchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.ClassPeriodName, d.SchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Cohort_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Cohort_TR_UpdateChangeVersion] ON [edfi].[Cohort] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Cohort]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Cohort] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Cohort_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Cohort_TR_DeleteTracking] ON [edfi].[Cohort] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Cohort](OldCohortIdentifier, OldEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.CohortIdentifier, d.EducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CommunityProviderLicense_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CommunityProviderLicense_TR_DeleteTracking] ON [edfi].[CommunityProviderLicense] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CommunityProviderLicense](OldCommunityProviderId, OldLicenseIdentifier, OldLicensingOrganization, Id, Discriminator, ChangeVersion)
    SELECT d.CommunityProviderId, d.LicenseIdentifier, d.LicensingOrganization, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CommunityProviderLicense_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CommunityProviderLicense_TR_UpdateChangeVersion] ON [edfi].[CommunityProviderLicense] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CommunityProviderLicense]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CommunityProviderLicense] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CompetencyObjective_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CompetencyObjective_TR_DeleteTracking] ON [edfi].[CompetencyObjective] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CompetencyObjective](OldEducationOrganizationId, OldObjective, OldObjectiveGradeLevelDescriptorId, OldObjectiveGradeLevelDescriptorNamespace, OldObjectiveGradeLevelDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.Objective, d.ObjectiveGradeLevelDescriptorId, j0.Namespace, j0.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ObjectiveGradeLevelDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CompetencyObjective_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CompetencyObjective_TR_UpdateChangeVersion] ON [edfi].[CompetencyObjective] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CompetencyObjective]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CompetencyObjective] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Contact_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Contact_TR_UpdateChangeVersion] ON [edfi].[Contact] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Contact]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Contact] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    ---- Add key change entry when UniqueId is modified
    INSERT INTO [tracked_changes_edfi].[Contact] (
        OldContactUSI, OldContactUniqueId, 
        NewContactUSI, NewContactUniqueId,
        Id, ChangeVersion)
    SELECT
        old.ContactUSI, old.ContactUniqueId, 
        new.ContactUSI, new.ContactUniqueId,
        old.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted old INNER JOIN inserted new ON old.ContactUSI = new.ContactUSI
    WHERE new.ContactUniqueId <> old.ContactUniqueId;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Contact_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Contact_TR_DeleteTracking] ON [edfi].[Contact] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Contact](OldContactUSI, OldContactUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.ContactUSI, d.ContactUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Course_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Course_TR_UpdateChangeVersion] ON [edfi].[Course] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Course]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Course] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Course_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Course_TR_DeleteTracking] ON [edfi].[Course] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Course](OldCourseCode, OldEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.CourseCode, d.EducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CourseOffering_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CourseOffering_TR_DeleteTracking] ON [edfi].[CourseOffering] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CourseOffering](OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSessionName, Id, Discriminator, ChangeVersion)
    SELECT d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SessionName, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CourseOffering_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CourseOffering_TR_UpdateChangeVersion] ON [edfi].[CourseOffering] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CourseOffering]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CourseOffering] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.CourseOffering(
        OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSessionName, 
        NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSessionName, 
        Id, ChangeVersion)
    SELECT
        d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SessionName, 
        i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SessionName, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SessionName <> i.SessionName;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CourseTranscript_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CourseTranscript_TR_UpdateChangeVersion] ON [edfi].[CourseTranscript] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CourseTranscript]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CourseTranscript] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CourseTranscript_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CourseTranscript_TR_DeleteTracking] ON [edfi].[CourseTranscript] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CourseTranscript](OldCourseAttemptResultDescriptorId, OldCourseAttemptResultDescriptorNamespace, OldCourseAttemptResultDescriptorCodeValue, OldCourseCode, OldCourseEducationOrganizationId, OldEducationOrganizationId, OldSchoolYear, OldStudentUSI, OldStudentUniqueId, OldTermDescriptorId, OldTermDescriptorNamespace, OldTermDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.CourseAttemptResultDescriptorId, j0.Namespace, j0.CodeValue, d.CourseCode, d.CourseEducationOrganizationId, d.EducationOrganizationId, d.SchoolYear, d.StudentUSI, j1.StudentUniqueId, d.TermDescriptorId, j2.Namespace, j2.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.CourseAttemptResultDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
        INNER JOIN edfi.Descriptor j2
            ON d.TermDescriptorId = j2.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Credential_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Credential_TR_DeleteTracking] ON [edfi].[Credential] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Credential](OldCredentialIdentifier, OldStateOfIssueStateAbbreviationDescriptorId, OldStateOfIssueStateAbbreviationDescriptorNamespace, OldStateOfIssueStateAbbreviationDescriptorCodeValue, Id, OldNamespace, Discriminator, ChangeVersion)
    SELECT d.CredentialIdentifier, d.StateOfIssueStateAbbreviationDescriptorId, j0.Namespace, j0.CodeValue, d.Id, d.Namespace, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.StateOfIssueStateAbbreviationDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Credential_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Credential_TR_UpdateChangeVersion] ON [edfi].[Credential] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Credential]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Credential] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CrisisEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_CrisisEvent_TR_DeleteTracking] ON [edfi].[CrisisEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[CrisisEvent](OldCrisisEventName, Id, Discriminator, ChangeVersion)
    SELECT d.CrisisEventName, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_CrisisEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_CrisisEvent_TR_UpdateChangeVersion] ON [edfi].[CrisisEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[CrisisEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[CrisisEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Descriptor_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Descriptor_TR_UpdateChangeVersion] ON [edfi].[Descriptor] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Descriptor]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Descriptor] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DescriptorMapping_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_DescriptorMapping_TR_DeleteTracking] ON [edfi].[DescriptorMapping] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[DescriptorMapping](OldMappedNamespace, OldMappedValue, OldNamespace, OldValue, Id, Discriminator, ChangeVersion)
    SELECT d.MappedNamespace, d.MappedValue, d.Namespace, d.Value, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DescriptorMapping_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_DescriptorMapping_TR_UpdateChangeVersion] ON [edfi].[DescriptorMapping] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[DescriptorMapping]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[DescriptorMapping] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DisciplineAction_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_DisciplineAction_TR_DeleteTracking] ON [edfi].[DisciplineAction] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[DisciplineAction](OldDisciplineActionIdentifier, OldDisciplineDate, OldStudentUSI, OldStudentUniqueId, OldResponsibilitySchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.DisciplineActionIdentifier, d.DisciplineDate, d.StudentUSI, j0.StudentUniqueId, d.ResponsibilitySchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DisciplineAction_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_DisciplineAction_TR_UpdateChangeVersion] ON [edfi].[DisciplineAction] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[DisciplineAction]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[DisciplineAction] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DisciplineIncident_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_DisciplineIncident_TR_UpdateChangeVersion] ON [edfi].[DisciplineIncident] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[DisciplineIncident]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[DisciplineIncident] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DisciplineIncident_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_DisciplineIncident_TR_DeleteTracking] ON [edfi].[DisciplineIncident] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[DisciplineIncident](OldIncidentIdentifier, OldSchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.IncidentIdentifier, d.SchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationContent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationContent_TR_DeleteTracking] ON [edfi].[EducationContent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EducationContent](OldContentIdentifier, Id, OldNamespace, Discriminator, ChangeVersion)
    SELECT d.ContentIdentifier, d.Id, d.Namespace, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationContent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationContent_TR_UpdateChangeVersion] ON [edfi].[EducationContent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EducationContent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EducationContent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganization_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganization_TR_UpdateChangeVersion] ON [edfi].[EducationOrganization] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EducationOrganization]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EducationOrganization] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganization_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganization_TR_DeleteTracking] ON [edfi].[EducationOrganization] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EducationOrganization](OldEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationInterventionPrescriptionAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationInterventionPrescriptionAssociation_TR_UpdateChangeVersion] ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EducationOrganizationInterventionPrescriptionAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EducationOrganizationInterventionPrescriptionAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationInterventionPrescriptionAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationInterventionPrescriptionAssociation_TR_DeleteTracking] ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EducationOrganizationInterventionPrescriptionAssociation](OldEducationOrganizationId, OldInterventionPrescriptionEducationOrganizationId, OldInterventionPrescriptionIdentificationCode, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.InterventionPrescriptionEducationOrganizationId, d.InterventionPrescriptionIdentificationCode, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationNetworkAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationNetworkAssociation_TR_DeleteTracking] ON [edfi].[EducationOrganizationNetworkAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EducationOrganizationNetworkAssociation](OldEducationOrganizationNetworkId, OldMemberEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationNetworkId, d.MemberEducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationNetworkAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationNetworkAssociation_TR_UpdateChangeVersion] ON [edfi].[EducationOrganizationNetworkAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EducationOrganizationNetworkAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EducationOrganizationNetworkAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationPeerAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationPeerAssociation_TR_UpdateChangeVersion] ON [edfi].[EducationOrganizationPeerAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EducationOrganizationPeerAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EducationOrganizationPeerAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EducationOrganizationPeerAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EducationOrganizationPeerAssociation_TR_DeleteTracking] ON [edfi].[EducationOrganizationPeerAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EducationOrganizationPeerAssociation](OldEducationOrganizationId, OldPeerEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.PeerEducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EvaluationRubricDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_EvaluationRubricDimension_TR_DeleteTracking] ON [edfi].[EvaluationRubricDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[EvaluationRubricDimension](OldEvaluationRubricRating, OldProgramEducationOrganizationId, OldProgramEvaluationElementTitle, OldProgramEvaluationPeriodDescriptorId, OldProgramEvaluationPeriodDescriptorNamespace, OldProgramEvaluationPeriodDescriptorCodeValue, OldProgramEvaluationTitle, OldProgramEvaluationTypeDescriptorId, OldProgramEvaluationTypeDescriptorNamespace, OldProgramEvaluationTypeDescriptorCodeValue, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.EvaluationRubricRating, d.ProgramEducationOrganizationId, d.ProgramEvaluationElementTitle, d.ProgramEvaluationPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.ProgramEvaluationTitle, d.ProgramEvaluationTypeDescriptorId, j1.Namespace, j1.CodeValue, d.ProgramName, d.ProgramTypeDescriptorId, j2.Namespace, j2.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramEvaluationPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramEvaluationTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Descriptor j2
            ON d.ProgramTypeDescriptorId = j2.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_EvaluationRubricDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_EvaluationRubricDimension_TR_UpdateChangeVersion] ON [edfi].[EvaluationRubricDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[EvaluationRubricDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[EvaluationRubricDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FeederSchoolAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_FeederSchoolAssociation_TR_DeleteTracking] ON [edfi].[FeederSchoolAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[FeederSchoolAssociation](OldBeginDate, OldFeederSchoolId, OldSchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.FeederSchoolId, d.SchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FeederSchoolAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_FeederSchoolAssociation_TR_UpdateChangeVersion] ON [edfi].[FeederSchoolAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[FeederSchoolAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[FeederSchoolAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FunctionDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_FunctionDimension_TR_DeleteTracking] ON [edfi].[FunctionDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[FunctionDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FunctionDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_FunctionDimension_TR_UpdateChangeVersion] ON [edfi].[FunctionDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[FunctionDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[FunctionDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FundDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_FundDimension_TR_UpdateChangeVersion] ON [edfi].[FundDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[FundDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[FundDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_FundDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_FundDimension_TR_DeleteTracking] ON [edfi].[FundDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[FundDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GeneralStudentProgramAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_GeneralStudentProgramAssociation_TR_UpdateChangeVersion] ON [edfi].[GeneralStudentProgramAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[GeneralStudentProgramAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[GeneralStudentProgramAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GeneralStudentProgramAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_GeneralStudentProgramAssociation_TR_DeleteTracking] ON [edfi].[GeneralStudentProgramAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[GeneralStudentProgramAssociation](OldBeginDate, OldEducationOrganizationId, OldProgramEducationOrganizationId, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.EducationOrganizationId, d.ProgramEducationOrganizationId, d.ProgramName, d.ProgramTypeDescriptorId, j0.Namespace, j0.CodeValue, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramTypeDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Grade_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Grade_TR_DeleteTracking] ON [edfi].[Grade] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Grade](OldBeginDate, OldGradeTypeDescriptorId, OldGradeTypeDescriptorNamespace, OldGradeTypeDescriptorCodeValue, OldGradingPeriodDescriptorId, OldGradingPeriodDescriptorNamespace, OldGradingPeriodDescriptorCodeValue, OldGradingPeriodName, OldGradingPeriodSchoolYear, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.GradeTypeDescriptorId, j0.Namespace, j0.CodeValue, d.GradingPeriodDescriptorId, j1.Namespace, j1.CodeValue, d.GradingPeriodName, d.GradingPeriodSchoolYear, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, j2.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.GradeTypeDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.GradingPeriodDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Student j2
            ON d.StudentUSI = j2.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Grade_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Grade_TR_UpdateChangeVersion] ON [edfi].[Grade] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Grade]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Grade] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.Grade(
        OldBeginDate, OldGradeTypeDescriptorId, OldGradeTypeDescriptorNamespace, OldGradeTypeDescriptorCodeValue, OldGradingPeriodDescriptorId, OldGradingPeriodDescriptorNamespace, OldGradingPeriodDescriptorCodeValue, OldGradingPeriodName, OldGradingPeriodSchoolYear, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, 
        NewBeginDate, NewGradeTypeDescriptorId, NewGradeTypeDescriptorNamespace, NewGradeTypeDescriptorCodeValue, NewGradingPeriodDescriptorId, NewGradingPeriodDescriptorNamespace, NewGradingPeriodDescriptorCodeValue, NewGradingPeriodName, NewGradingPeriodSchoolYear, NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.BeginDate, d.GradeTypeDescriptorId, dj0.Namespace, dj0.CodeValue, d.GradingPeriodDescriptorId, dj1.Namespace, dj1.CodeValue, d.GradingPeriodName, d.GradingPeriodSchoolYear, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, dj2.StudentUniqueId, 
        i.BeginDate, i.GradeTypeDescriptorId, ij0.Namespace, ij0.CodeValue, i.GradingPeriodDescriptorId, ij1.Namespace, ij1.CodeValue, i.GradingPeriodName, i.GradingPeriodSchoolYear, i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, i.StudentUSI, ij2.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Descriptor dj0
            ON d.GradeTypeDescriptorId = dj0.DescriptorId
        INNER JOIN edfi.Descriptor dj1
            ON d.GradingPeriodDescriptorId = dj1.DescriptorId
        INNER JOIN edfi.Student dj2
            ON d.StudentUSI = dj2.StudentUSI
        INNER JOIN edfi.Descriptor ij0
            ON i.GradeTypeDescriptorId = ij0.DescriptorId
        INNER JOIN edfi.Descriptor ij1
            ON i.GradingPeriodDescriptorId = ij1.DescriptorId
        INNER JOIN edfi.Student ij2
            ON i.StudentUSI = ij2.StudentUSI

    WHERE
        d.BeginDate <> i.BeginDate OR d.GradeTypeDescriptorId <> i.GradeTypeDescriptorId OR d.GradingPeriodDescriptorId <> i.GradingPeriodDescriptorId OR d.GradingPeriodName <> i.GradingPeriodName OR d.GradingPeriodSchoolYear <> i.GradingPeriodSchoolYear OR d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GradebookEntry_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_GradebookEntry_TR_UpdateChangeVersion] ON [edfi].[GradebookEntry] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[GradebookEntry]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[GradebookEntry] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.GradebookEntry(
        OldGradebookEntryIdentifier, OldNamespace, 
        NewGradebookEntryIdentifier, NewNamespace, 
        Id, ChangeVersion)
    SELECT
        d.GradebookEntryIdentifier, d.Namespace, 
        i.GradebookEntryIdentifier, i.Namespace, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.GradebookEntryIdentifier <> i.GradebookEntryIdentifier OR d.Namespace <> i.Namespace;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GradebookEntry_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_GradebookEntry_TR_DeleteTracking] ON [edfi].[GradebookEntry] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[GradebookEntry](OldGradebookEntryIdentifier, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.GradebookEntryIdentifier, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GradingPeriod_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_GradingPeriod_TR_DeleteTracking] ON [edfi].[GradingPeriod] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[GradingPeriod](OldGradingPeriodDescriptorId, OldGradingPeriodDescriptorNamespace, OldGradingPeriodDescriptorCodeValue, OldGradingPeriodName, OldSchoolId, OldSchoolYear, Id, Discriminator, ChangeVersion)
    SELECT d.GradingPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.GradingPeriodName, d.SchoolId, d.SchoolYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.GradingPeriodDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GradingPeriod_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_GradingPeriod_TR_UpdateChangeVersion] ON [edfi].[GradingPeriod] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[GradingPeriod]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[GradingPeriod] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GraduationPlan_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_GraduationPlan_TR_DeleteTracking] ON [edfi].[GraduationPlan] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[GraduationPlan](OldEducationOrganizationId, OldGraduationPlanTypeDescriptorId, OldGraduationPlanTypeDescriptorNamespace, OldGraduationPlanTypeDescriptorCodeValue, OldGraduationSchoolYear, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.GraduationPlanTypeDescriptorId, j0.Namespace, j0.CodeValue, d.GraduationSchoolYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.GraduationPlanTypeDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_GraduationPlan_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_GraduationPlan_TR_UpdateChangeVersion] ON [edfi].[GraduationPlan] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[GraduationPlan]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[GraduationPlan] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Intervention_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Intervention_TR_UpdateChangeVersion] ON [edfi].[Intervention] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Intervention]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Intervention] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Intervention_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Intervention_TR_DeleteTracking] ON [edfi].[Intervention] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Intervention](OldEducationOrganizationId, OldInterventionIdentificationCode, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.InterventionIdentificationCode, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_InterventionPrescription_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_InterventionPrescription_TR_UpdateChangeVersion] ON [edfi].[InterventionPrescription] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[InterventionPrescription]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[InterventionPrescription] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_InterventionPrescription_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_InterventionPrescription_TR_DeleteTracking] ON [edfi].[InterventionPrescription] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[InterventionPrescription](OldEducationOrganizationId, OldInterventionPrescriptionIdentificationCode, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.InterventionPrescriptionIdentificationCode, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_InterventionStudy_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_InterventionStudy_TR_DeleteTracking] ON [edfi].[InterventionStudy] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[InterventionStudy](OldEducationOrganizationId, OldInterventionStudyIdentificationCode, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.InterventionStudyIdentificationCode, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_InterventionStudy_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_InterventionStudy_TR_UpdateChangeVersion] ON [edfi].[InterventionStudy] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[InterventionStudy]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[InterventionStudy] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LearningStandard_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LearningStandard_TR_DeleteTracking] ON [edfi].[LearningStandard] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LearningStandard](OldLearningStandardId, Id, OldNamespace, Discriminator, ChangeVersion)
    SELECT d.LearningStandardId, d.Id, d.Namespace, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LearningStandard_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LearningStandard_TR_UpdateChangeVersion] ON [edfi].[LearningStandard] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LearningStandard]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LearningStandard] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LearningStandardEquivalenceAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LearningStandardEquivalenceAssociation_TR_UpdateChangeVersion] ON [edfi].[LearningStandardEquivalenceAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LearningStandardEquivalenceAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LearningStandardEquivalenceAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LearningStandardEquivalenceAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LearningStandardEquivalenceAssociation_TR_DeleteTracking] ON [edfi].[LearningStandardEquivalenceAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LearningStandardEquivalenceAssociation](OldNamespace, OldSourceLearningStandardId, OldTargetLearningStandardId, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.SourceLearningStandardId, d.TargetLearningStandardId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalAccount_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalAccount_TR_DeleteTracking] ON [edfi].[LocalAccount] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalAccount](OldAccountIdentifier, OldEducationOrganizationId, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.EducationOrganizationId, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalAccount_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalAccount_TR_UpdateChangeVersion] ON [edfi].[LocalAccount] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalAccount]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalAccount] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalActual_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalActual_TR_DeleteTracking] ON [edfi].[LocalActual] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalActual](OldAccountIdentifier, OldAsOfDate, OldEducationOrganizationId, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.AsOfDate, d.EducationOrganizationId, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalActual_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalActual_TR_UpdateChangeVersion] ON [edfi].[LocalActual] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalActual]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalActual] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalBudget_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalBudget_TR_UpdateChangeVersion] ON [edfi].[LocalBudget] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalBudget]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalBudget] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalBudget_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalBudget_TR_DeleteTracking] ON [edfi].[LocalBudget] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalBudget](OldAccountIdentifier, OldAsOfDate, OldEducationOrganizationId, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.AsOfDate, d.EducationOrganizationId, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalContractedStaff_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalContractedStaff_TR_UpdateChangeVersion] ON [edfi].[LocalContractedStaff] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalContractedStaff]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalContractedStaff] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalContractedStaff_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalContractedStaff_TR_DeleteTracking] ON [edfi].[LocalContractedStaff] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalContractedStaff](OldAccountIdentifier, OldAsOfDate, OldEducationOrganizationId, OldFiscalYear, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.AsOfDate, d.EducationOrganizationId, d.FiscalYear, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalEncumbrance_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalEncumbrance_TR_DeleteTracking] ON [edfi].[LocalEncumbrance] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalEncumbrance](OldAccountIdentifier, OldAsOfDate, OldEducationOrganizationId, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.AsOfDate, d.EducationOrganizationId, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalEncumbrance_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalEncumbrance_TR_UpdateChangeVersion] ON [edfi].[LocalEncumbrance] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalEncumbrance]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalEncumbrance] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalPayroll_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalPayroll_TR_UpdateChangeVersion] ON [edfi].[LocalPayroll] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[LocalPayroll]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[LocalPayroll] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_LocalPayroll_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_LocalPayroll_TR_DeleteTracking] ON [edfi].[LocalPayroll] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[LocalPayroll](OldAccountIdentifier, OldAsOfDate, OldEducationOrganizationId, OldFiscalYear, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AccountIdentifier, d.AsOfDate, d.EducationOrganizationId, d.FiscalYear, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Location_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Location_TR_DeleteTracking] ON [edfi].[Location] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Location](OldClassroomIdentificationCode, OldSchoolId, Id, Discriminator, ChangeVersion)
    SELECT d.ClassroomIdentificationCode, d.SchoolId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Location_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Location_TR_UpdateChangeVersion] ON [edfi].[Location] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Location]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Location] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.Location(
        OldClassroomIdentificationCode, OldSchoolId, 
        NewClassroomIdentificationCode, NewSchoolId, 
        Id, ChangeVersion)
    SELECT
        d.ClassroomIdentificationCode, d.SchoolId, 
        i.ClassroomIdentificationCode, i.SchoolId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.ClassroomIdentificationCode <> i.ClassroomIdentificationCode OR d.SchoolId <> i.SchoolId;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ObjectDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ObjectDimension_TR_DeleteTracking] ON [edfi].[ObjectDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ObjectDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ObjectDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ObjectDimension_TR_UpdateChangeVersion] ON [edfi].[ObjectDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ObjectDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ObjectDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ObjectiveAssessment_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ObjectiveAssessment_TR_UpdateChangeVersion] ON [edfi].[ObjectiveAssessment] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ObjectiveAssessment]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ObjectiveAssessment] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ObjectiveAssessment_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ObjectiveAssessment_TR_DeleteTracking] ON [edfi].[ObjectiveAssessment] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ObjectiveAssessment](OldAssessmentIdentifier, OldIdentificationCode, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.IdentificationCode, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_OpenStaffPosition_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_OpenStaffPosition_TR_UpdateChangeVersion] ON [edfi].[OpenStaffPosition] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[OpenStaffPosition]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[OpenStaffPosition] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_OpenStaffPosition_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_OpenStaffPosition_TR_DeleteTracking] ON [edfi].[OpenStaffPosition] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[OpenStaffPosition](OldEducationOrganizationId, OldRequisitionNumber, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.RequisitionNumber, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_OperationalUnitDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_OperationalUnitDimension_TR_DeleteTracking] ON [edfi].[OperationalUnitDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[OperationalUnitDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_OperationalUnitDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_OperationalUnitDimension_TR_UpdateChangeVersion] ON [edfi].[OperationalUnitDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[OperationalUnitDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[OperationalUnitDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Person_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Person_TR_DeleteTracking] ON [edfi].[Person] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Person](OldPersonId, OldSourceSystemDescriptorId, OldSourceSystemDescriptorNamespace, OldSourceSystemDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.PersonId, d.SourceSystemDescriptorId, j0.Namespace, j0.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.SourceSystemDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Person_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Person_TR_UpdateChangeVersion] ON [edfi].[Person] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Person]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Person] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_PostSecondaryEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_PostSecondaryEvent_TR_UpdateChangeVersion] ON [edfi].[PostSecondaryEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[PostSecondaryEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[PostSecondaryEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_PostSecondaryEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_PostSecondaryEvent_TR_DeleteTracking] ON [edfi].[PostSecondaryEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[PostSecondaryEvent](OldEventDate, OldPostSecondaryEventCategoryDescriptorId, OldPostSecondaryEventCategoryDescriptorNamespace, OldPostSecondaryEventCategoryDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EventDate, d.PostSecondaryEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.PostSecondaryEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Program_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Program_TR_UpdateChangeVersion] ON [edfi].[Program] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Program]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Program] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Program_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Program_TR_DeleteTracking] ON [edfi].[Program] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Program](OldEducationOrganizationId, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.ProgramName, d.ProgramTypeDescriptorId, j0.Namespace, j0.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramTypeDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramDimension_TR_UpdateChangeVersion] ON [edfi].[ProgramDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ProgramDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ProgramDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramDimension_TR_DeleteTracking] ON [edfi].[ProgramDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ProgramDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluation_TR_DeleteTracking] ON [edfi].[ProgramEvaluation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ProgramEvaluation](OldProgramEducationOrganizationId, OldProgramEvaluationPeriodDescriptorId, OldProgramEvaluationPeriodDescriptorNamespace, OldProgramEvaluationPeriodDescriptorCodeValue, OldProgramEvaluationTitle, OldProgramEvaluationTypeDescriptorId, OldProgramEvaluationTypeDescriptorNamespace, OldProgramEvaluationTypeDescriptorCodeValue, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.ProgramEducationOrganizationId, d.ProgramEvaluationPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.ProgramEvaluationTitle, d.ProgramEvaluationTypeDescriptorId, j1.Namespace, j1.CodeValue, d.ProgramName, d.ProgramTypeDescriptorId, j2.Namespace, j2.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramEvaluationPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramEvaluationTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Descriptor j2
            ON d.ProgramTypeDescriptorId = j2.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluation_TR_UpdateChangeVersion] ON [edfi].[ProgramEvaluation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ProgramEvaluation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ProgramEvaluation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluationElement_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluationElement_TR_DeleteTracking] ON [edfi].[ProgramEvaluationElement] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ProgramEvaluationElement](OldProgramEducationOrganizationId, OldProgramEvaluationElementTitle, OldProgramEvaluationPeriodDescriptorId, OldProgramEvaluationPeriodDescriptorNamespace, OldProgramEvaluationPeriodDescriptorCodeValue, OldProgramEvaluationTitle, OldProgramEvaluationTypeDescriptorId, OldProgramEvaluationTypeDescriptorNamespace, OldProgramEvaluationTypeDescriptorCodeValue, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.ProgramEducationOrganizationId, d.ProgramEvaluationElementTitle, d.ProgramEvaluationPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.ProgramEvaluationTitle, d.ProgramEvaluationTypeDescriptorId, j1.Namespace, j1.CodeValue, d.ProgramName, d.ProgramTypeDescriptorId, j2.Namespace, j2.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramEvaluationPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramEvaluationTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Descriptor j2
            ON d.ProgramTypeDescriptorId = j2.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluationElement_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluationElement_TR_UpdateChangeVersion] ON [edfi].[ProgramEvaluationElement] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ProgramEvaluationElement]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ProgramEvaluationElement] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluationObjective_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluationObjective_TR_UpdateChangeVersion] ON [edfi].[ProgramEvaluationObjective] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ProgramEvaluationObjective]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ProgramEvaluationObjective] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProgramEvaluationObjective_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ProgramEvaluationObjective_TR_DeleteTracking] ON [edfi].[ProgramEvaluationObjective] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ProgramEvaluationObjective](OldProgramEducationOrganizationId, OldProgramEvaluationObjectiveTitle, OldProgramEvaluationPeriodDescriptorId, OldProgramEvaluationPeriodDescriptorNamespace, OldProgramEvaluationPeriodDescriptorCodeValue, OldProgramEvaluationTitle, OldProgramEvaluationTypeDescriptorId, OldProgramEvaluationTypeDescriptorNamespace, OldProgramEvaluationTypeDescriptorCodeValue, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.ProgramEducationOrganizationId, d.ProgramEvaluationObjectiveTitle, d.ProgramEvaluationPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.ProgramEvaluationTitle, d.ProgramEvaluationTypeDescriptorId, j1.Namespace, j1.CodeValue, d.ProgramName, d.ProgramTypeDescriptorId, j2.Namespace, j2.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramEvaluationPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramEvaluationTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Descriptor j2
            ON d.ProgramTypeDescriptorId = j2.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProjectDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ProjectDimension_TR_DeleteTracking] ON [edfi].[ProjectDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ProjectDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ProjectDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ProjectDimension_TR_UpdateChangeVersion] ON [edfi].[ProjectDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ProjectDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ProjectDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ReportCard_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_ReportCard_TR_DeleteTracking] ON [edfi].[ReportCard] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[ReportCard](OldEducationOrganizationId, OldGradingPeriodDescriptorId, OldGradingPeriodDescriptorNamespace, OldGradingPeriodDescriptorCodeValue, OldGradingPeriodName, OldGradingPeriodSchoolId, OldGradingPeriodSchoolYear, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.GradingPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.GradingPeriodName, d.GradingPeriodSchoolId, d.GradingPeriodSchoolYear, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.GradingPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_ReportCard_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_ReportCard_TR_UpdateChangeVersion] ON [edfi].[ReportCard] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[ReportCard]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[ReportCard] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_RestraintEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_RestraintEvent_TR_DeleteTracking] ON [edfi].[RestraintEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[RestraintEvent](OldRestraintEventIdentifier, OldSchoolId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.RestraintEventIdentifier, d.SchoolId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_RestraintEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_RestraintEvent_TR_UpdateChangeVersion] ON [edfi].[RestraintEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[RestraintEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[RestraintEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SchoolYearType_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SchoolYearType_TR_DeleteTracking] ON [edfi].[SchoolYearType] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SchoolYearType](OldSchoolYear, Id, ChangeVersion)
    SELECT d.SchoolYear, d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SchoolYearType_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SchoolYearType_TR_UpdateChangeVersion] ON [edfi].[SchoolYearType] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SchoolYearType]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SchoolYearType] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Section_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Section_TR_UpdateChangeVersion] ON [edfi].[Section] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Section]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Section] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.Section(
        OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, 
        NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, 
        Id, ChangeVersion)
    SELECT
        d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, 
        i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Section_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Section_TR_DeleteTracking] ON [edfi].[Section] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Section](OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, Id, Discriminator, ChangeVersion)
    SELECT d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SectionAttendanceTakenEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SectionAttendanceTakenEvent_TR_DeleteTracking] ON [edfi].[SectionAttendanceTakenEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SectionAttendanceTakenEvent](OldCalendarCode, OldDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, Id, Discriminator, ChangeVersion)
    SELECT d.CalendarCode, d.Date, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SectionAttendanceTakenEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SectionAttendanceTakenEvent_TR_UpdateChangeVersion] ON [edfi].[SectionAttendanceTakenEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SectionAttendanceTakenEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SectionAttendanceTakenEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.SectionAttendanceTakenEvent(
        OldCalendarCode, OldDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, 
        NewCalendarCode, NewDate, NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, 
        Id, ChangeVersion)
    SELECT
        d.CalendarCode, d.Date, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, 
        i.CalendarCode, i.Date, i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.CalendarCode <> i.CalendarCode OR d.Date <> i.Date OR d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Session_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Session_TR_UpdateChangeVersion] ON [edfi].[Session] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Session]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Session] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.Session(
        OldSchoolId, OldSchoolYear, OldSessionName, 
        NewSchoolId, NewSchoolYear, NewSessionName, 
        Id, ChangeVersion)
    SELECT
        d.SchoolId, d.SchoolYear, d.SessionName, 
        i.SchoolId, i.SchoolYear, i.SessionName, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SessionName <> i.SessionName;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Session_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Session_TR_DeleteTracking] ON [edfi].[Session] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Session](OldSchoolId, OldSchoolYear, OldSessionName, Id, Discriminator, ChangeVersion)
    SELECT d.SchoolId, d.SchoolYear, d.SessionName, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SourceDimension_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SourceDimension_TR_DeleteTracking] ON [edfi].[SourceDimension] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SourceDimension](OldCode, OldFiscalYear, Id, Discriminator, ChangeVersion)
    SELECT d.Code, d.FiscalYear, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SourceDimension_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SourceDimension_TR_UpdateChangeVersion] ON [edfi].[SourceDimension] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SourceDimension]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SourceDimension] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Staff_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Staff_TR_DeleteTracking] ON [edfi].[Staff] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Staff](OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.StaffUSI, d.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Staff_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Staff_TR_UpdateChangeVersion] ON [edfi].[Staff] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Staff]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Staff] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    ---- Add key change entry when UniqueId is modified
    INSERT INTO [tracked_changes_edfi].[Staff] (
        OldStaffUSI, OldStaffUniqueId, 
        NewStaffUSI, NewStaffUniqueId,
        Id, ChangeVersion)
    SELECT
        old.StaffUSI, old.StaffUniqueId, 
        new.StaffUSI, new.StaffUniqueId,
        old.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted old INNER JOIN inserted new ON old.StaffUSI = new.StaffUSI
    WHERE new.StaffUniqueId <> old.StaffUniqueId;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffAbsenceEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffAbsenceEvent_TR_UpdateChangeVersion] ON [edfi].[StaffAbsenceEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffAbsenceEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffAbsenceEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffAbsenceEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffAbsenceEvent_TR_DeleteTracking] ON [edfi].[StaffAbsenceEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffAbsenceEvent](OldAbsenceEventCategoryDescriptorId, OldAbsenceEventCategoryDescriptorNamespace, OldAbsenceEventCategoryDescriptorCodeValue, OldEventDate, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AbsenceEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.EventDate, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.AbsenceEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffCohortAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffCohortAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffCohortAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffCohortAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffCohortAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffCohortAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffCohortAssociation_TR_DeleteTracking] ON [edfi].[StaffCohortAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffCohortAssociation](OldBeginDate, OldCohortIdentifier, OldEducationOrganizationId, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.CohortIdentifier, d.EducationOrganizationId, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffDisciplineIncidentAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffDisciplineIncidentAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffDisciplineIncidentAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffDisciplineIncidentAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffDisciplineIncidentAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffDisciplineIncidentAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffDisciplineIncidentAssociation_TR_DeleteTracking] ON [edfi].[StaffDisciplineIncidentAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffDisciplineIncidentAssociation](OldIncidentIdentifier, OldSchoolId, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.IncidentIdentifier, d.SchoolId, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationAssignmentAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationAssignmentAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffEducationOrganizationAssignmentAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffEducationOrganizationAssignmentAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffEducationOrganizationAssignmentAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationAssignmentAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationAssignmentAssociation_TR_DeleteTracking] ON [edfi].[StaffEducationOrganizationAssignmentAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffEducationOrganizationAssignmentAssociation](OldBeginDate, OldEducationOrganizationId, OldStaffClassificationDescriptorId, OldStaffClassificationDescriptorNamespace, OldStaffClassificationDescriptorCodeValue, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.EducationOrganizationId, d.StaffClassificationDescriptorId, j0.Namespace, j0.CodeValue, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.StaffClassificationDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationContactAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationContactAssociation_TR_DeleteTracking] ON [edfi].[StaffEducationOrganizationContactAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffEducationOrganizationContactAssociation](OldContactTitle, OldEducationOrganizationId, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.ContactTitle, d.EducationOrganizationId, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationContactAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationContactAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffEducationOrganizationContactAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffEducationOrganizationContactAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffEducationOrganizationContactAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationEmploymentAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationEmploymentAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffEducationOrganizationEmploymentAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffEducationOrganizationEmploymentAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffEducationOrganizationEmploymentAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffEducationOrganizationEmploymentAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffEducationOrganizationEmploymentAssociation_TR_DeleteTracking] ON [edfi].[StaffEducationOrganizationEmploymentAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffEducationOrganizationEmploymentAssociation](OldEducationOrganizationId, OldEmploymentStatusDescriptorId, OldEmploymentStatusDescriptorNamespace, OldEmploymentStatusDescriptorCodeValue, OldHireDate, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.EmploymentStatusDescriptorId, j0.Namespace, j0.CodeValue, d.HireDate, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.EmploymentStatusDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffLeave_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffLeave_TR_DeleteTracking] ON [edfi].[StaffLeave] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffLeave](OldBeginDate, OldStaffLeaveEventCategoryDescriptorId, OldStaffLeaveEventCategoryDescriptorNamespace, OldStaffLeaveEventCategoryDescriptorCodeValue, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.StaffLeaveEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.StaffLeaveEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffLeave_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffLeave_TR_UpdateChangeVersion] ON [edfi].[StaffLeave] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffLeave]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffLeave] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffProgramAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffProgramAssociation_TR_DeleteTracking] ON [edfi].[StaffProgramAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffProgramAssociation](OldBeginDate, OldProgramEducationOrganizationId, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.ProgramEducationOrganizationId, d.ProgramName, d.ProgramTypeDescriptorId, j0.Namespace, j0.CodeValue, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramTypeDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffProgramAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffProgramAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffProgramAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffProgramAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffProgramAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffSchoolAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffSchoolAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffSchoolAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffSchoolAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffSchoolAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffSchoolAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffSchoolAssociation_TR_DeleteTracking] ON [edfi].[StaffSchoolAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffSchoolAssociation](OldProgramAssignmentDescriptorId, OldProgramAssignmentDescriptorNamespace, OldProgramAssignmentDescriptorCodeValue, OldSchoolId, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.ProgramAssignmentDescriptorId, j0.Namespace, j0.CodeValue, d.SchoolId, d.StaffUSI, j1.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramAssignmentDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Staff j1
            ON d.StaffUSI = j1.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffSectionAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffSectionAssociation_TR_DeleteTracking] ON [edfi].[StaffSectionAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StaffSectionAssociation](OldBeginDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStaffUSI, OldStaffUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StaffUSI, j0.StaffUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StaffSectionAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StaffSectionAssociation_TR_UpdateChangeVersion] ON [edfi].[StaffSectionAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StaffSectionAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StaffSectionAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StaffSectionAssociation(
        OldBeginDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStaffUSI, OldStaffUniqueId, 
        NewBeginDate, NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, NewStaffUSI, NewStaffUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.BeginDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StaffUSI, dj0.StaffUniqueId, 
        i.BeginDate, i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, i.StaffUSI, ij0.StaffUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Staff dj0
            ON d.StaffUSI = dj0.StaffUSI
        INNER JOIN edfi.Staff ij0
            ON i.StaffUSI = ij0.StaffUSI

    WHERE
        d.BeginDate <> i.BeginDate OR d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName OR d.StaffUSI <> i.StaffUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Student_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Student_TR_UpdateChangeVersion] ON [edfi].[Student] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Student]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Student] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    ---- Add key change entry when UniqueId is modified
    INSERT INTO [tracked_changes_edfi].[Student] (
        OldStudentUSI, OldStudentUniqueId, 
        NewStudentUSI, NewStudentUniqueId,
        Id, ChangeVersion)
    SELECT
        old.StudentUSI, old.StudentUniqueId, 
        new.StudentUSI, new.StudentUniqueId,
        old.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted old INNER JOIN inserted new ON old.StudentUSI = new.StudentUSI
    WHERE new.StudentUniqueId <> old.StudentUniqueId;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Student_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Student_TR_DeleteTracking] ON [edfi].[Student] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Student](OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.StudentUSI, d.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAcademicRecord_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAcademicRecord_TR_DeleteTracking] ON [edfi].[StudentAcademicRecord] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentAcademicRecord](OldEducationOrganizationId, OldSchoolYear, OldStudentUSI, OldStudentUniqueId, OldTermDescriptorId, OldTermDescriptorNamespace, OldTermDescriptorCodeValue, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.SchoolYear, d.StudentUSI, j0.StudentUniqueId, d.TermDescriptorId, j1.Namespace, j1.CodeValue, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
        INNER JOIN edfi.Descriptor j1
            ON d.TermDescriptorId = j1.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAcademicRecord_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAcademicRecord_TR_UpdateChangeVersion] ON [edfi].[StudentAcademicRecord] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentAcademicRecord]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentAcademicRecord] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessment_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessment_TR_DeleteTracking] ON [edfi].[StudentAssessment] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentAssessment](OldAssessmentIdentifier, OldNamespace, OldStudentAssessmentIdentifier, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.Namespace, d.StudentAssessmentIdentifier, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessment_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessment_TR_UpdateChangeVersion] ON [edfi].[StudentAssessment] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentAssessment]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentAssessment] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentEducationOrganizationAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentEducationOrganizationAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentAssessmentEducationOrganizationAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentAssessmentEducationOrganizationAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentAssessmentEducationOrganizationAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentEducationOrganizationAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentEducationOrganizationAssociation_TR_DeleteTracking] ON [edfi].[StudentAssessmentEducationOrganizationAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentAssessmentEducationOrganizationAssociation](OldAssessmentIdentifier, OldEducationOrganizationAssociationTypeDescriptorId, OldEducationOrganizationAssociationTypeDescriptorNamespace, OldEducationOrganizationAssociationTypeDescriptorCodeValue, OldEducationOrganizationId, OldNamespace, OldStudentAssessmentIdentifier, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentIdentifier, d.EducationOrganizationAssociationTypeDescriptorId, j0.Namespace, j0.CodeValue, d.EducationOrganizationId, d.Namespace, d.StudentAssessmentIdentifier, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.EducationOrganizationAssociationTypeDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCohortAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCohortAssociation_TR_DeleteTracking] ON [edfi].[StudentCohortAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentCohortAssociation](OldBeginDate, OldCohortIdentifier, OldEducationOrganizationId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.CohortIdentifier, d.EducationOrganizationId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCohortAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCohortAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentCohortAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentCohortAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentCohortAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCompetencyObjective_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCompetencyObjective_TR_UpdateChangeVersion] ON [edfi].[StudentCompetencyObjective] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentCompetencyObjective]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentCompetencyObjective] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCompetencyObjective_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCompetencyObjective_TR_DeleteTracking] ON [edfi].[StudentCompetencyObjective] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentCompetencyObjective](OldGradingPeriodDescriptorId, OldGradingPeriodDescriptorNamespace, OldGradingPeriodDescriptorCodeValue, OldGradingPeriodName, OldGradingPeriodSchoolId, OldGradingPeriodSchoolYear, OldObjectiveEducationOrganizationId, OldObjective, OldObjectiveGradeLevelDescriptorId, OldObjectiveGradeLevelDescriptorNamespace, OldObjectiveGradeLevelDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.GradingPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.GradingPeriodName, d.GradingPeriodSchoolId, d.GradingPeriodSchoolYear, d.ObjectiveEducationOrganizationId, d.Objective, d.ObjectiveGradeLevelDescriptorId, j1.Namespace, j1.CodeValue, d.StudentUSI, j2.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.GradingPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ObjectiveGradeLevelDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Student j2
            ON d.StudentUSI = j2.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentContactAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentContactAssociation_TR_DeleteTracking] ON [edfi].[StudentContactAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentContactAssociation](OldContactUSI, OldContactUniqueId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.ContactUSI, j0.ContactUniqueId, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Contact j0
            ON d.ContactUSI = j0.ContactUSI
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentContactAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentContactAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentContactAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentContactAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentContactAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentDisciplineIncidentBehaviorAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentDisciplineIncidentBehaviorAssociation_TR_DeleteTracking] ON [edfi].[StudentDisciplineIncidentBehaviorAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentDisciplineIncidentBehaviorAssociation](OldBehaviorDescriptorId, OldBehaviorDescriptorNamespace, OldBehaviorDescriptorCodeValue, OldIncidentIdentifier, OldSchoolId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BehaviorDescriptorId, j0.Namespace, j0.CodeValue, d.IncidentIdentifier, d.SchoolId, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.BehaviorDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentDisciplineIncidentBehaviorAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentDisciplineIncidentBehaviorAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentDisciplineIncidentBehaviorAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentDisciplineIncidentBehaviorAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentDisciplineIncidentBehaviorAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentDisciplineIncidentNonOffenderAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentDisciplineIncidentNonOffenderAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentDisciplineIncidentNonOffenderAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentDisciplineIncidentNonOffenderAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentDisciplineIncidentNonOffenderAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentDisciplineIncidentNonOffenderAssociation_TR_DeleteTracking] ON [edfi].[StudentDisciplineIncidentNonOffenderAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentDisciplineIncidentNonOffenderAssociation](OldIncidentIdentifier, OldSchoolId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.IncidentIdentifier, d.SchoolId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationAssociation_TR_DeleteTracking] ON [edfi].[StudentEducationOrganizationAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentEducationOrganizationAssociation](OldEducationOrganizationId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentEducationOrganizationAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentEducationOrganizationAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentEducationOrganizationAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationResponsibilityAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationResponsibilityAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentEducationOrganizationResponsibilityAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentEducationOrganizationResponsibilityAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentEducationOrganizationResponsibilityAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationResponsibilityAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationResponsibilityAssociation_TR_DeleteTracking] ON [edfi].[StudentEducationOrganizationResponsibilityAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentEducationOrganizationResponsibilityAssociation](OldBeginDate, OldEducationOrganizationId, OldResponsibilityDescriptorId, OldResponsibilityDescriptorNamespace, OldResponsibilityDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.EducationOrganizationId, d.ResponsibilityDescriptorId, j0.Namespace, j0.CodeValue, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ResponsibilityDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentGradebookEntry_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentGradebookEntry_TR_UpdateChangeVersion] ON [edfi].[StudentGradebookEntry] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentGradebookEntry]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentGradebookEntry] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StudentGradebookEntry(
        OldGradebookEntryIdentifier, OldNamespace, OldStudentUSI, OldStudentUniqueId, 
        NewGradebookEntryIdentifier, NewNamespace, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.GradebookEntryIdentifier, d.Namespace, d.StudentUSI, dj0.StudentUniqueId, 
        i.GradebookEntryIdentifier, i.Namespace, i.StudentUSI, ij0.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Student dj0
            ON d.StudentUSI = dj0.StudentUSI
        INNER JOIN edfi.Student ij0
            ON i.StudentUSI = ij0.StudentUSI

    WHERE
        d.GradebookEntryIdentifier <> i.GradebookEntryIdentifier OR d.Namespace <> i.Namespace OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentGradebookEntry_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentGradebookEntry_TR_DeleteTracking] ON [edfi].[StudentGradebookEntry] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentGradebookEntry](OldGradebookEntryIdentifier, OldNamespace, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.GradebookEntryIdentifier, d.Namespace, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentHealth_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentHealth_TR_DeleteTracking] ON [edfi].[StudentHealth] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentHealth](OldEducationOrganizationId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentHealth_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentHealth_TR_UpdateChangeVersion] ON [edfi].[StudentHealth] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentHealth]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentHealth] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentInterventionAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentInterventionAssociation_TR_DeleteTracking] ON [edfi].[StudentInterventionAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentInterventionAssociation](OldEducationOrganizationId, OldInterventionIdentificationCode, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.InterventionIdentificationCode, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentInterventionAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentInterventionAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentInterventionAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentInterventionAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentInterventionAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentInterventionAttendanceEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentInterventionAttendanceEvent_TR_UpdateChangeVersion] ON [edfi].[StudentInterventionAttendanceEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentInterventionAttendanceEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentInterventionAttendanceEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentInterventionAttendanceEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentInterventionAttendanceEvent_TR_DeleteTracking] ON [edfi].[StudentInterventionAttendanceEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentInterventionAttendanceEvent](OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEducationOrganizationId, OldEventDate, OldInterventionIdentificationCode, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AttendanceEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.EducationOrganizationId, d.EventDate, d.InterventionIdentificationCode, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.AttendanceEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentProgramAttendanceEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentProgramAttendanceEvent_TR_DeleteTracking] ON [edfi].[StudentProgramAttendanceEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentProgramAttendanceEvent](OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEducationOrganizationId, OldEventDate, OldProgramEducationOrganizationId, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AttendanceEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.EducationOrganizationId, d.EventDate, d.ProgramEducationOrganizationId, d.ProgramName, d.ProgramTypeDescriptorId, j1.Namespace, j1.CodeValue, d.StudentUSI, j2.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.AttendanceEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Student j2
            ON d.StudentUSI = j2.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentProgramAttendanceEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentProgramAttendanceEvent_TR_UpdateChangeVersion] ON [edfi].[StudentProgramAttendanceEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentProgramAttendanceEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentProgramAttendanceEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentProgramEvaluation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentProgramEvaluation_TR_UpdateChangeVersion] ON [edfi].[StudentProgramEvaluation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentProgramEvaluation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentProgramEvaluation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentProgramEvaluation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentProgramEvaluation_TR_DeleteTracking] ON [edfi].[StudentProgramEvaluation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentProgramEvaluation](OldEvaluationDate, OldProgramEducationOrganizationId, OldProgramEvaluationPeriodDescriptorId, OldProgramEvaluationPeriodDescriptorNamespace, OldProgramEvaluationPeriodDescriptorCodeValue, OldProgramEvaluationTitle, OldProgramEvaluationTypeDescriptorId, OldProgramEvaluationTypeDescriptorNamespace, OldProgramEvaluationTypeDescriptorCodeValue, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EvaluationDate, d.ProgramEducationOrganizationId, d.ProgramEvaluationPeriodDescriptorId, j0.Namespace, j0.CodeValue, d.ProgramEvaluationTitle, d.ProgramEvaluationTypeDescriptorId, j1.Namespace, j1.CodeValue, d.ProgramName, d.ProgramTypeDescriptorId, j2.Namespace, j2.CodeValue, d.StudentUSI, j3.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramEvaluationPeriodDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Descriptor j1
            ON d.ProgramEvaluationTypeDescriptorId = j1.DescriptorId
        INNER JOIN edfi.Descriptor j2
            ON d.ProgramTypeDescriptorId = j2.DescriptorId
        INNER JOIN edfi.Student j3
            ON d.StudentUSI = j3.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSchoolAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSchoolAssociation_TR_DeleteTracking] ON [edfi].[StudentSchoolAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentSchoolAssociation](OldEntryDate, OldSchoolId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EntryDate, d.SchoolId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSchoolAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSchoolAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentSchoolAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentSchoolAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentSchoolAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StudentSchoolAssociation(
        OldEntryDate, OldSchoolId, OldStudentUSI, OldStudentUniqueId, 
        NewEntryDate, NewSchoolId, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.EntryDate, d.SchoolId, d.StudentUSI, dj0.StudentUniqueId, 
        i.EntryDate, i.SchoolId, i.StudentUSI, ij0.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Student dj0
            ON d.StudentUSI = dj0.StudentUSI
        INNER JOIN edfi.Student ij0
            ON i.StudentUSI = ij0.StudentUSI

    WHERE
        d.EntryDate <> i.EntryDate OR d.SchoolId <> i.SchoolId OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSchoolAttendanceEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSchoolAttendanceEvent_TR_UpdateChangeVersion] ON [edfi].[StudentSchoolAttendanceEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentSchoolAttendanceEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentSchoolAttendanceEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StudentSchoolAttendanceEvent(
        OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEventDate, OldSchoolId, OldSchoolYear, OldSessionName, OldStudentUSI, OldStudentUniqueId, 
        NewAttendanceEventCategoryDescriptorId, NewAttendanceEventCategoryDescriptorNamespace, NewAttendanceEventCategoryDescriptorCodeValue, NewEventDate, NewSchoolId, NewSchoolYear, NewSessionName, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.AttendanceEventCategoryDescriptorId, dj0.Namespace, dj0.CodeValue, d.EventDate, d.SchoolId, d.SchoolYear, d.SessionName, d.StudentUSI, dj1.StudentUniqueId, 
        i.AttendanceEventCategoryDescriptorId, ij0.Namespace, ij0.CodeValue, i.EventDate, i.SchoolId, i.SchoolYear, i.SessionName, i.StudentUSI, ij1.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Descriptor dj0
            ON d.AttendanceEventCategoryDescriptorId = dj0.DescriptorId
        INNER JOIN edfi.Student dj1
            ON d.StudentUSI = dj1.StudentUSI
        INNER JOIN edfi.Descriptor ij0
            ON i.AttendanceEventCategoryDescriptorId = ij0.DescriptorId
        INNER JOIN edfi.Student ij1
            ON i.StudentUSI = ij1.StudentUSI

    WHERE
        d.AttendanceEventCategoryDescriptorId <> i.AttendanceEventCategoryDescriptorId OR d.EventDate <> i.EventDate OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SessionName <> i.SessionName OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSchoolAttendanceEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSchoolAttendanceEvent_TR_DeleteTracking] ON [edfi].[StudentSchoolAttendanceEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentSchoolAttendanceEvent](OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEventDate, OldSchoolId, OldSchoolYear, OldSessionName, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AttendanceEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.EventDate, d.SchoolId, d.SchoolYear, d.SessionName, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.AttendanceEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSectionAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSectionAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentSectionAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentSectionAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentSectionAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StudentSectionAssociation(
        OldBeginDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, 
        NewBeginDate, NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.BeginDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, dj0.StudentUniqueId, 
        i.BeginDate, i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, i.StudentUSI, ij0.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Student dj0
            ON d.StudentUSI = dj0.StudentUSI
        INNER JOIN edfi.Student ij0
            ON i.StudentUSI = ij0.StudentUSI

    WHERE
        d.BeginDate <> i.BeginDate OR d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSectionAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSectionAssociation_TR_DeleteTracking] ON [edfi].[StudentSectionAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentSectionAssociation](OldBeginDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.BeginDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSectionAttendanceEvent_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSectionAttendanceEvent_TR_UpdateChangeVersion] ON [edfi].[StudentSectionAttendanceEvent] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentSectionAttendanceEvent]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentSectionAttendanceEvent] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.StudentSectionAttendanceEvent(
        OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEventDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, 
        NewAttendanceEventCategoryDescriptorId, NewAttendanceEventCategoryDescriptorNamespace, NewAttendanceEventCategoryDescriptorCodeValue, NewEventDate, NewLocalCourseCode, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, NewStudentUSI, NewStudentUniqueId, 
        Id, ChangeVersion)
    SELECT
        d.AttendanceEventCategoryDescriptorId, dj0.Namespace, dj0.CodeValue, d.EventDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, dj1.StudentUniqueId, 
        i.AttendanceEventCategoryDescriptorId, ij0.Namespace, ij0.CodeValue, i.EventDate, i.LocalCourseCode, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, i.StudentUSI, ij1.StudentUniqueId, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id
        INNER JOIN edfi.Descriptor dj0
            ON d.AttendanceEventCategoryDescriptorId = dj0.DescriptorId
        INNER JOIN edfi.Student dj1
            ON d.StudentUSI = dj1.StudentUSI
        INNER JOIN edfi.Descriptor ij0
            ON i.AttendanceEventCategoryDescriptorId = ij0.DescriptorId
        INNER JOIN edfi.Student ij1
            ON i.StudentUSI = ij1.StudentUSI

    WHERE
        d.AttendanceEventCategoryDescriptorId <> i.AttendanceEventCategoryDescriptorId OR d.EventDate <> i.EventDate OR d.LocalCourseCode <> i.LocalCourseCode OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName OR d.StudentUSI <> i.StudentUSI;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSectionAttendanceEvent_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSectionAttendanceEvent_TR_DeleteTracking] ON [edfi].[StudentSectionAttendanceEvent] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentSectionAttendanceEvent](OldAttendanceEventCategoryDescriptorId, OldAttendanceEventCategoryDescriptorNamespace, OldAttendanceEventCategoryDescriptorCodeValue, OldEventDate, OldLocalCourseCode, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AttendanceEventCategoryDescriptorId, j0.Namespace, j0.CodeValue, d.EventDate, d.LocalCourseCode, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.AttendanceEventCategoryDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSpecialEducationProgramEligibilityAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSpecialEducationProgramEligibilityAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentSpecialEducationProgramEligibilityAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentSpecialEducationProgramEligibilityAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSpecialEducationProgramEligibilityAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSpecialEducationProgramEligibilityAssociation_TR_DeleteTracking] ON [edfi].[StudentSpecialEducationProgramEligibilityAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentSpecialEducationProgramEligibilityAssociation](OldConsentToEvaluationReceivedDate, OldEducationOrganizationId, OldProgramEducationOrganizationId, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.ConsentToEvaluationReceivedDate, d.EducationOrganizationId, d.ProgramEducationOrganizationId, d.ProgramName, d.ProgramTypeDescriptorId, j0.Namespace, j0.CodeValue, d.StudentUSI, j1.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramTypeDescriptorId = j0.DescriptorId
        INNER JOIN edfi.Student j1
            ON d.StudentUSI = j1.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentTransportation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentTransportation_TR_DeleteTracking] ON [edfi].[StudentTransportation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentTransportation](OldStudentUSI, OldStudentUniqueId, OldTransportationEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.StudentUSI, j0.StudentUniqueId, d.TransportationEducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentTransportation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentTransportation_TR_UpdateChangeVersion] ON [edfi].[StudentTransportation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentTransportation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentTransportation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Survey_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_Survey_TR_UpdateChangeVersion] ON [edfi].[Survey] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[Survey]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[Survey] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Survey_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Survey_TR_DeleteTracking] ON [edfi].[Survey] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Survey](OldNamespace, OldSurveyIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.SurveyIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyCourseAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyCourseAssociation_TR_DeleteTracking] ON [edfi].[SurveyCourseAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyCourseAssociation](OldCourseCode, OldEducationOrganizationId, OldNamespace, OldSurveyIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.CourseCode, d.EducationOrganizationId, d.Namespace, d.SurveyIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyCourseAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyCourseAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveyCourseAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyCourseAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyCourseAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyProgramAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyProgramAssociation_TR_DeleteTracking] ON [edfi].[SurveyProgramAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyProgramAssociation](OldEducationOrganizationId, OldNamespace, OldProgramName, OldProgramTypeDescriptorId, OldProgramTypeDescriptorNamespace, OldProgramTypeDescriptorCodeValue, OldSurveyIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.Namespace, d.ProgramName, d.ProgramTypeDescriptorId, j0.Namespace, j0.CodeValue, d.SurveyIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Descriptor j0
            ON d.ProgramTypeDescriptorId = j0.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyProgramAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyProgramAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveyProgramAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyProgramAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyProgramAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyQuestion_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyQuestion_TR_UpdateChangeVersion] ON [edfi].[SurveyQuestion] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyQuestion]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyQuestion] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyQuestion_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyQuestion_TR_DeleteTracking] ON [edfi].[SurveyQuestion] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyQuestion](OldNamespace, OldQuestionCode, OldSurveyIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.QuestionCode, d.SurveyIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyQuestionResponse_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyQuestionResponse_TR_UpdateChangeVersion] ON [edfi].[SurveyQuestionResponse] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyQuestionResponse]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyQuestionResponse] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyQuestionResponse_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyQuestionResponse_TR_DeleteTracking] ON [edfi].[SurveyQuestionResponse] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyQuestionResponse](OldNamespace, OldQuestionCode, OldSurveyIdentifier, OldSurveyResponseIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.QuestionCode, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponse_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponse_TR_DeleteTracking] ON [edfi].[SurveyResponse] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyResponse](OldNamespace, OldSurveyIdentifier, OldSurveyResponseIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponse_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponse_TR_UpdateChangeVersion] ON [edfi].[SurveyResponse] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyResponse]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyResponse] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponseEducationOrganizationTargetAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponseEducationOrganizationTargetAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyResponseEducationOrganizationTargetAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyResponseEducationOrganizationTargetAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponseEducationOrganizationTargetAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponseEducationOrganizationTargetAssociation_TR_DeleteTracking] ON [edfi].[SurveyResponseEducationOrganizationTargetAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyResponseEducationOrganizationTargetAssociation](OldEducationOrganizationId, OldNamespace, OldSurveyIdentifier, OldSurveyResponseIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.Namespace, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponseStaffTargetAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponseStaffTargetAssociation_TR_DeleteTracking] ON [edfi].[SurveyResponseStaffTargetAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveyResponseStaffTargetAssociation](OldNamespace, OldStaffUSI, OldStaffUniqueId, OldSurveyIdentifier, OldSurveyResponseIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.StaffUSI, j0.StaffUniqueId, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveyResponseStaffTargetAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveyResponseStaffTargetAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveyResponseStaffTargetAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveyResponseStaffTargetAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveyResponseStaffTargetAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySection_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySection_TR_UpdateChangeVersion] ON [edfi].[SurveySection] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveySection]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveySection] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySection_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySection_TR_DeleteTracking] ON [edfi].[SurveySection] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveySection](OldNamespace, OldSurveyIdentifier, OldSurveySectionTitle, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.SurveyIdentifier, d.SurveySectionTitle, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionAssociation_TR_DeleteTracking] ON [edfi].[SurveySectionAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveySectionAssociation](OldLocalCourseCode, OldNamespace, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldSurveyIdentifier, Id, Discriminator, ChangeVersion)
    SELECT d.LocalCourseCode, d.Namespace, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.SurveyIdentifier, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveySectionAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveySectionAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveySectionAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);

    -- Handle key changes
    INSERT INTO tracked_changes_edfi.SurveySectionAssociation(
        OldLocalCourseCode, OldNamespace, OldSchoolId, OldSchoolYear, OldSectionIdentifier, OldSessionName, OldSurveyIdentifier, 
        NewLocalCourseCode, NewNamespace, NewSchoolId, NewSchoolYear, NewSectionIdentifier, NewSessionName, NewSurveyIdentifier, 
        Id, ChangeVersion)
    SELECT
        d.LocalCourseCode, d.Namespace, d.SchoolId, d.SchoolYear, d.SectionIdentifier, d.SessionName, d.SurveyIdentifier, 
        i.LocalCourseCode, i.Namespace, i.SchoolId, i.SchoolYear, i.SectionIdentifier, i.SessionName, i.SurveyIdentifier, 
        d.Id, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM deleted d INNER JOIN inserted i ON d.Id = i.Id

    WHERE
        d.LocalCourseCode <> i.LocalCourseCode OR d.Namespace <> i.Namespace OR d.SchoolId <> i.SchoolId OR d.SchoolYear <> i.SchoolYear OR d.SectionIdentifier <> i.SectionIdentifier OR d.SessionName <> i.SessionName OR d.SurveyIdentifier <> i.SurveyIdentifier;
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponse_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponse_TR_UpdateChangeVersion] ON [edfi].[SurveySectionResponse] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveySectionResponse]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveySectionResponse] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponse_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponse_TR_DeleteTracking] ON [edfi].[SurveySectionResponse] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveySectionResponse](OldNamespace, OldSurveyIdentifier, OldSurveyResponseIdentifier, OldSurveySectionTitle, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.SurveySectionTitle, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponseEducationOrganizationTargetAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponseEducationOrganizationTargetAssociation_TR_DeleteTracking] ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveySectionResponseEducationOrganizationTargetAssociation](OldEducationOrganizationId, OldNamespace, OldSurveyIdentifier, OldSurveyResponseIdentifier, OldSurveySectionTitle, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.Namespace, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.SurveySectionTitle, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponseEducationOrganizationTargetAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponseEducationOrganizationTargetAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponseStaffTargetAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponseStaffTargetAssociation_TR_UpdateChangeVersion] ON [edfi].[SurveySectionResponseStaffTargetAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[SurveySectionResponseStaffTargetAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[SurveySectionResponseStaffTargetAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_SurveySectionResponseStaffTargetAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_SurveySectionResponseStaffTargetAssociation_TR_DeleteTracking] ON [edfi].[SurveySectionResponseStaffTargetAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[SurveySectionResponseStaffTargetAssociation](OldNamespace, OldStaffUSI, OldStaffUniqueId, OldSurveyIdentifier, OldSurveyResponseIdentifier, OldSurveySectionTitle, Id, Discriminator, ChangeVersion)
    SELECT d.Namespace, d.StaffUSI, j0.StaffUniqueId, d.SurveyIdentifier, d.SurveyResponseIdentifier, d.SurveySectionTitle, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Staff j0
            ON d.StaffUSI = j0.StaffUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentAdministration_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentAdministration_TR_DeleteTracking] ON [edfi].[AssessmentAdministration] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AssessmentAdministration](OldAdministrationIdentifier, OldAssessmentIdentifier, OldAssigningEducationOrganizationId, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.AdministrationIdentifier, d.AssessmentIdentifier, d.AssigningEducationOrganizationId, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentAdministration_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentAdministration_TR_UpdateChangeVersion] ON [edfi].[AssessmentAdministration] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AssessmentAdministration]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AssessmentAdministration] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentAdministrationParticipation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentAdministrationParticipation_TR_UpdateChangeVersion] ON [edfi].[AssessmentAdministrationParticipation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AssessmentAdministrationParticipation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AssessmentAdministrationParticipation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentAdministrationParticipation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentAdministrationParticipation_TR_DeleteTracking] ON [edfi].[AssessmentAdministrationParticipation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AssessmentAdministrationParticipation](OldAdministrationIdentifier, OldAssessmentIdentifier, OldAssigningEducationOrganizationId, OldNamespace, OldParticipatingEducationOrganizationId, Id, Discriminator, ChangeVersion)
    SELECT d.AdministrationIdentifier, d.AssessmentIdentifier, d.AssigningEducationOrganizationId, d.Namespace, d.ParticipatingEducationOrganizationId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentBatteryPart_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentBatteryPart_TR_DeleteTracking] ON [edfi].[AssessmentBatteryPart] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[AssessmentBatteryPart](OldAssessmentBatteryPartName, OldAssessmentIdentifier, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT d.AssessmentBatteryPartName, d.AssessmentIdentifier, d.Namespace, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentBatteryPart_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_AssessmentBatteryPart_TR_UpdateChangeVersion] ON [edfi].[AssessmentBatteryPart] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[AssessmentBatteryPart]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[AssessmentBatteryPart] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DualCreditInstitutionDescriptor_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_DualCreditInstitutionDescriptor_TR_DeleteTracking] ON [edfi].[DualCreditInstitutionDescriptor] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Descriptor](OldDescriptorId, OldCodeValue, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT  d.DualCreditInstitutionDescriptorId, b.CodeValue, b.Namespace, b.Id, 'edfi.DualCreditInstitutionDescriptor', (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
            INNER JOIN edfi.Descriptor b ON d.DualCreditInstitutionDescriptorId = b.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_DualCreditTypeDescriptor_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_DualCreditTypeDescriptor_TR_DeleteTracking] ON [edfi].[DualCreditTypeDescriptor] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Descriptor](OldDescriptorId, OldCodeValue, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT  d.DualCreditTypeDescriptorId, b.CodeValue, b.Namespace, b.Id, 'edfi.DualCreditTypeDescriptor', (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
            INNER JOIN edfi.Descriptor b ON d.DualCreditTypeDescriptorId = b.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_Section504DisabilityDescriptor_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_Section504DisabilityDescriptor_TR_DeleteTracking] ON [edfi].[Section504DisabilityDescriptor] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[Descriptor](OldDescriptorId, OldCodeValue, OldNamespace, Id, Discriminator, ChangeVersion)
    SELECT  d.Section504DisabilityDescriptorId, b.CodeValue, b.Namespace, b.Id, 'edfi.Section504DisabilityDescriptor', (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
            INNER JOIN edfi.Descriptor b ON d.Section504DisabilityDescriptorId = b.DescriptorId
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentRegistration_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentRegistration_TR_UpdateChangeVersion] ON [edfi].[StudentAssessmentRegistration] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentAssessmentRegistration]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentAssessmentRegistration] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentRegistration_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentRegistration_TR_DeleteTracking] ON [edfi].[StudentAssessmentRegistration] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentAssessmentRegistration](OldAdministrationIdentifier, OldAssessmentIdentifier, OldAssigningEducationOrganizationId, OldEducationOrganizationId, OldNamespace, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AdministrationIdentifier, d.AssessmentIdentifier, d.AssigningEducationOrganizationId, d.EducationOrganizationId, d.Namespace, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentRegistrationBatteryPartAssociation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentRegistrationBatteryPartAssociation_TR_DeleteTracking] ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentAssessmentRegistrationBatteryPartAssociation](OldAdministrationIdentifier, OldAssessmentBatteryPartName, OldAssessmentIdentifier, OldAssigningEducationOrganizationId, OldEducationOrganizationId, OldNamespace, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.AdministrationIdentifier, d.AssessmentBatteryPartName, d.AssessmentIdentifier, d.AssigningEducationOrganizationId, d.EducationOrganizationId, d.Namespace, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentAssessmentRegistrationBatteryPartAssociation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentAssessmentRegistrationBatteryPartAssociation_TR_UpdateChangeVersion] ON [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationAssessmentAccommodation_TR_UpdateChangeVersion]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationAssessmentAccommodation_TR_UpdateChangeVersion] ON [edfi].[StudentEducationOrganizationAssessmentAccommodation] AFTER UPDATE AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [edfi].[StudentEducationOrganizationAssessmentAccommodation]
    SET ChangeVersion = (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM [edfi].[StudentEducationOrganizationAssessmentAccommodation] u
    WHERE EXISTS (SELECT 1 FROM inserted i WHERE i.id = u.id);
END
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentEducationOrganizationAssessmentAccommodation_TR_DeleteTracking]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentEducationOrganizationAssessmentAccommodation_TR_DeleteTracking] ON [edfi].[StudentEducationOrganizationAssessmentAccommodation] AFTER DELETE AS
BEGIN
    IF @@rowcount = 0 
        RETURN

    SET NOCOUNT ON

    INSERT INTO [tracked_changes_edfi].[StudentEducationOrganizationAssessmentAccommodation](OldEducationOrganizationId, OldStudentUSI, OldStudentUniqueId, Id, Discriminator, ChangeVersion)
    SELECT d.EducationOrganizationId, d.StudentUSI, j0.StudentUniqueId, d.Id, d.Discriminator, (NEXT VALUE FOR [changes].[ChangeVersionSequence])
    FROM    deleted d
        INNER JOIN edfi.Student j0
            ON d.StudentUSI = j0.StudentUSI
END
GO
PRINT N'Creating Trigger [edfi].[edfi_AssessmentSection_TR_Assessment_Update]...';


GO
-- SPDX-License-Identifier: Apache-2.0
-- Licensed to the Ed-Fi Alliance under one or more agreements.
-- The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
-- See the LICENSE and NOTICES files in the project root for more information.

CREATE TRIGGER [edfi].[edfi_AssessmentSection_TR_Assessment_Update]
ON [edfi].[AssessmentSection]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(LocalCourseCode)
       OR UPDATE(SchoolId)
       OR UPDATE(SchoolYear)
       OR UPDATE(SectionIdentifier)
       OR UPDATE(SessionName)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[Assessment] rt
        INNER JOIN inserted i
            ON rt.AssessmentIdentifier = i.AssessmentIdentifier
               AND rt.Namespace = i.Namespace;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_BellScheduleClassPeriod_TR_BellSchedule_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_BellScheduleClassPeriod_TR_BellSchedule_Update]
ON [edfi].[BellScheduleClassPeriod]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(ClassPeriodName)
       OR UPDATE(SchoolId)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[BellSchedule] rt
        INNER JOIN inserted i
            ON rt.BellScheduleName = i.BellScheduleName
               AND rt.SchoolId = i.SchoolId;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_CourseTranscriptSection_TR_CourseTranscript_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_CourseTranscriptSection_TR_CourseTranscript_Update]
ON [edfi].[CourseTranscriptSection]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(LocalCourseCode)
       OR UPDATE(SchoolId)
       OR UPDATE(SchoolYear)
       OR UPDATE(SectionIdentifier)
       OR UPDATE(SessionName)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[CourseTranscript] rt
        INNER JOIN inserted i
            ON rt.CourseAttemptResultDescriptorId = i.CourseAttemptResultDescriptorId
               AND rt.CourseCode = i.CourseCode
               AND rt.CourseEducationOrganizationId = i.CourseEducationOrganizationId
               AND rt.EducationOrganizationId = i.EducationOrganizationId
               AND rt.SchoolYear = i.SchoolYear
               AND rt.StudentUSI = i.StudentUSI
               AND rt.TermDescriptorId = i.TermDescriptorId;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_ReportCardGrade_TR_ReportCard_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_ReportCardGrade_TR_ReportCard_Update]
ON [edfi].[ReportCardGrade]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(BeginDate)
       OR UPDATE(GradeTypeDescriptorId)
       OR UPDATE(GradingPeriodDescriptorId)
       OR UPDATE(GradingPeriodName)
       OR UPDATE(GradingPeriodSchoolYear)
       OR UPDATE(LocalCourseCode)
       OR UPDATE(SchoolId)
       OR UPDATE(SchoolYear)
       OR UPDATE(SectionIdentifier)
       OR UPDATE(SessionName)
       OR UPDATE(StudentUSI)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[ReportCard] rt
        INNER JOIN inserted i
            ON rt.EducationOrganizationId = i.EducationOrganizationId
               AND rt.GradingPeriodDescriptorId = i.GradingPeriodDescriptorId
               AND rt.GradingPeriodName = i.GradingPeriodName
               AND rt.GradingPeriodSchoolId = i.GradingPeriodSchoolId
               AND rt.GradingPeriodSchoolYear = i.GradingPeriodSchoolYear
               AND rt.StudentUSI = i.StudentUSI;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_SectionClassPeriod_TR_Section_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_SectionClassPeriod_TR_Section_Update]
ON [edfi].[SectionClassPeriod]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(ClassPeriodName)
       OR UPDATE(SchoolId)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[Section] rt
        INNER JOIN inserted i
            ON rt.LocalCourseCode = i.LocalCourseCode
               AND rt.SchoolId = i.SchoolId
               AND rt.SchoolYear = i.SchoolYear
               AND rt.SectionIdentifier = i.SectionIdentifier
               AND rt.SessionName = i.SessionName;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCohortAssociationSection_TR_StudentCohortAssociation_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCohortAssociationSection_TR_StudentCohortAssociation_Update]
ON [edfi].[StudentCohortAssociationSection]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(LocalCourseCode)
       OR UPDATE(SchoolId)
       OR UPDATE(SchoolYear)
       OR UPDATE(SectionIdentifier)
       OR UPDATE(SessionName)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[StudentCohortAssociation] rt
        INNER JOIN inserted i
            ON rt.BeginDate = i.BeginDate
               AND rt.CohortIdentifier = i.CohortIdentifier
               AND rt.EducationOrganizationId = i.EducationOrganizationId
               AND rt.StudentUSI = i.StudentUSI;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentCompetencyObjectiveStudentSectionAssociation_TR_StudentCompetencyObjective_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentCompetencyObjectiveStudentSectionAssociation_TR_StudentCompetencyObjective_Update]
ON [edfi].[StudentCompetencyObjectiveStudentSectionAssociation]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(BeginDate)
       OR UPDATE(LocalCourseCode)
       OR UPDATE(SchoolId)
       OR UPDATE(SchoolYear)
       OR UPDATE(SectionIdentifier)
       OR UPDATE(SessionName)
       OR UPDATE(StudentUSI)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[StudentCompetencyObjective] rt
        INNER JOIN inserted i
            ON rt.GradingPeriodDescriptorId = i.GradingPeriodDescriptorId
               AND rt.GradingPeriodName = i.GradingPeriodName
               AND rt.GradingPeriodSchoolId = i.GradingPeriodSchoolId
               AND rt.GradingPeriodSchoolYear = i.GradingPeriodSchoolYear
               AND rt.ObjectiveEducationOrganizationId = i.ObjectiveEducationOrganizationId
               AND rt.Objective = i.Objective
               AND rt.ObjectiveGradeLevelDescriptorId = i.ObjectiveGradeLevelDescriptorId
               AND rt.StudentUSI = i.StudentUSI;
    END
END;
GO
PRINT N'Creating Trigger [edfi].[edfi_StudentSectionAttendanceEventClassPeriod_TR_StudentSectionAttendanceEvent_Update]...';


GO
CREATE TRIGGER [edfi].[edfi_StudentSectionAttendanceEventClassPeriod_TR_StudentSectionAttendanceEvent_Update]
ON [edfi].[StudentSectionAttendanceEventClassPeriod]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if any volatile foreign key values have changed
    IF UPDATE(ClassPeriodName)
       OR UPDATE(SchoolId)
    BEGIN
        -- Update the LastModifiedDate in the root table to the current UTC time
        UPDATE rt
        SET rt.LastModifiedDate = GETUTCDATE()
        FROM [edfi].[StudentSectionAttendanceEvent] rt
        INNER JOIN inserted i
            ON rt.AttendanceEventCategoryDescriptorId = i.AttendanceEventCategoryDescriptorId
               AND rt.EventDate = i.EventDate
               AND rt.LocalCourseCode = i.LocalCourseCode
               AND rt.SchoolId = i.SchoolId
               AND rt.SchoolYear = i.SchoolYear
               AND rt.SectionIdentifier = i.SectionIdentifier
               AND rt.SessionName = i.SessionName
               AND rt.StudentUSI = i.StudentUSI;
    END
END;
GO
PRINT N'Refreshing View [interop].[OperationalContextSupport]...';


GO
EXECUTE sp_refreshsqlmodule N'[interop].[OperationalContextSupport]';


GO
PRINT N'Altering View [auth].[EducationOrganizationIdToStaffUSI]...';


GO
ALTER   VIEW auth.EducationOrganizationIdToStaffUSI AS

    -- EdOrg Assignments
    SELECT  edOrgs.SourceEducationOrganizationId, seo_assign.StaffUSI
    FROM    auth.EducationOrganizationIdToEducationOrganizationId edOrgs
            INNER JOIN edfi.StaffEducationOrganizationAssignmentAssociation seo_assign
                ON edOrgs.TargetEducationOrganizationId =  seo_assign.EducationOrganizationId
    
    UNION

    -- EdOrg Employment
    SELECT  edOrgs.SourceEducationOrganizationId, seo_empl.StaffUSI
    FROM    auth.EducationOrganizationIdToEducationOrganizationId edOrgs
            INNER JOIN edfi.StaffEducationOrganizationEmploymentAssociation seo_empl
                ON edOrgs.TargetEducationOrganizationId = seo_empl.EducationOrganizationId
GO
PRINT N'Refreshing View [auth].[EducationOrganizationIdToStaffUSIIncludingDeletes]...';


GO
EXECUTE sp_refreshsqlmodule N'[auth].[EducationOrganizationIdToStaffUSIIncludingDeletes]';


GO
PRINT N'Altering View [auth].[EducationOrganizationIdToContactUSI]...';


GO
ALTER   VIEW auth.EducationOrganizationIdToContactUSI AS
    SELECT  edOrgs.SourceEducationOrganizationId, spa.ContactUSI, COUNT_BIG(*) AS Ignored
    FROM    auth.EducationOrganizationIdToEducationOrganizationId edOrgs
            INNER JOIN edfi.StudentSchoolAssociation ssa 
                ON edOrgs.TargetEducationOrganizationId = ssa.SchoolId
            INNER JOIN edfi.StudentContactAssociation spa 
                ON ssa.StudentUSI = spa.StudentUSI
    GROUP BY edOrgs.SourceEducationOrganizationId, spa.ContactUSI
GO
PRINT N'Refreshing View [auth].[EducationOrganizationIdToContactUSIIncludingDeletes]...';


GO
EXECUTE sp_refreshsqlmodule N'[auth].[EducationOrganizationIdToContactUSIIncludingDeletes]';


GO
PRINT N'Refreshing View [auth].[EducationOrganizationIdToStudentUSIThroughDeletedResponsibility]...';


GO
EXECUTE sp_refreshsqlmodule N'[auth].[EducationOrganizationIdToStudentUSIThroughDeletedResponsibility]';


GO
PRINT N'Altering View [auth].[EducationOrganizationIdToStudentUSIThroughResponsibility]...';


GO
ALTER   VIEW auth.EducationOrganizationIdToStudentUSIThroughResponsibility AS
    SELECT  edOrgs.SourceEducationOrganizationId, seora.StudentUSI
    FROM    auth.EducationOrganizationIdToEducationOrganizationId edOrgs
            INNER JOIN edfi.StudentEducationOrganizationResponsibilityAssociation seora
                ON edOrgs.TargetEducationOrganizationId = seora.EducationOrganizationId
    GROUP BY edOrgs.SourceEducationOrganizationId, seora.StudentUSI
GO
PRINT N'Altering View [auth].[EducationOrganizationIdToStudentUSI]...';


GO
ALTER   VIEW auth.EducationOrganizationIdToStudentUSI AS
    SELECT  edOrgs.SourceEducationOrganizationId, ssa.StudentUSI, COUNT_BIG(*) AS Ignored
    FROM    auth.EducationOrganizationIdToEducationOrganizationId edOrgs
        INNER JOIN edfi.StudentSchoolAssociation ssa
            ON edOrgs.TargetEducationOrganizationId = ssa.SchoolId
    GROUP BY edOrgs.SourceEducationOrganizationId, ssa.StudentUSI
GO
PRINT N'Refreshing View [auth].[EducationOrganizationIdToStudentUSIIncludingDeletes]...';


GO
EXECUTE sp_refreshsqlmodule N'[auth].[EducationOrganizationIdToStudentUSIIncludingDeletes]';


GO
PRINT N'Creating View [auth].[AssessmentWithAnACTIdentifier]...';


GO
CREATE   VIEW auth.AssessmentWithAnACTIdentifier
AS
    SELECT a.AssessmentIdentifier ,a.Namespace
    FROM edfi.Assessment a
    WHERE   a.AssessmentIdentifier LIKE 'ACT%'
GO
PRINT N'Creating View [auth].[EducationOrganizationWithACategoryContainingAnSWord]...';


GO
CREATE   VIEW auth.EducationOrganizationWithACategoryContainingAnSWord
AS
    SELECT DISTINCT EducationOrganizationId
    FROM edfi.EducationOrganizationCategory cat
        INNER JOIN edfi.Descriptor d ON cat.EducationOrganizationCategoryDescriptorId = d.DescriptorId
    WHERE CodeValue LIKE 'S%' OR CodeValue LIKE '% S%'
GO
PRINT N'Creating View [auth].[StudentWithCTECourseEnrollments]...';


GO
CREATE   VIEW auth.StudentWithCTECourseEnrollments
AS
    SELECT DISTINCT StudentUSI
    FROM edfi.StudentSectionAssociation ssa
        INNER JOIN edfi.CourseOffering co
        ON co.LocalCourseCode = ssa.LocalCourseCode
            AND co.SchoolId = ssa.SchoolId
            AND co.SchoolYear = ssa.SchoolYear
            AND co.SessionName = ssa.SessionName
        INNER JOIN edfi.CourseAcademicSubject csubj
        ON csubj.CourseCode = co.CourseCode
            AND csubj.EducationOrganizationId = co.EducationOrganizationId
        INNER JOIN edfi.descriptor d
        ON csubj.AcademicSubjectDescriptorId = d.descriptorid
    WHERE d.CodeValue = 'Career and Technical Education'
GO
PRINT N'Creating View [auth].[TransportationTypeDescriptorWithABus]...';


GO
CREATE   VIEW auth.TransportationTypeDescriptorWithABus
AS
    SELECT TransportationTypeDescriptorId
    FROM edfi.TransportationTypeDescriptor td
        INNER JOIN edfi.Descriptor d ON td.TransportationTypeDescriptorId = d.DescriptorId
    WHERE  CodeValue LIKE '%Bus%'
GO
PRINT N'Altering Function [util].[GetEdFiOdsVersion]...';


GO
ALTER FUNCTION util.GetEdFiOdsVersion()
RETURNS VARCHAR(60)
AS
BEGIN
    RETURN '7.3'
END
GO
PRINT N'Altering Function [util].[GetEdFiStandardVersion]...';


GO
ALTER FUNCTION util.GetEdFiStandardVersion()
RETURNS VARCHAR(60)
AS
BEGIN
    RETURN '5.2'
END
GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the academic weeks for a school year, optionally captured to support analyses.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek';


GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[WeekIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school label for the week.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek', @level2type = N'COLUMN', @level2name = N'WeekIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The start date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date for the academic week.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[AcademicWeek].[TotalInstructionalDays].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total instructional days during the academic week.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AcademicWeek', @level2type = N'COLUMN', @level2name = N'TotalInstructionalDays';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An accountability rating for a school or district.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[RatingTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title of the rating.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'RatingTitle';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year for which the accountability rating is assessed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[Rating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An accountability rating level, designation, or assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'Rating';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[RatingDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the rating was awarded.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'RatingDate';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[RatingOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization that assessed the rating.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'RatingOrganization';


GO
PRINT N'Creating Extended Property [edfi].[AccountabilityRating].[RatingProgram].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The program associated with the accountability rating (e.g., NCLB, AEIS).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AccountabilityRating', @level2type = N'COLUMN', @level2name = N'RatingProgram';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student''s competence, knowledge, skills, or behavior. An assessment can be used to measure differences in individuals or groups and changes in performance from one occasion to the next.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AdaptiveAssessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates that the assessment is adaptive.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AdaptiveAssessment';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The category of an assessment based on format and content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentFamily].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The assessment family this assessment is a member of.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentFamily';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentForm].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentForm';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentTitle';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[AssessmentVersion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The version identifier for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'AssessmentVersion';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[MaxRawScore].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'MaxRawScore';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[Nomenclature].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the specific nomenclature used for assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'Nomenclature';


GO
PRINT N'Creating Extended Property [edfi].[Assessment].[RevisionDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year that the conceptual design for the assessment was most recently revised substantially.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Assessment', @level2type = N'COLUMN', @level2name = N'RevisionDate';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents one of many single measures that make up an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[IdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'IdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[AssessmentItemCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Category or type of the assessment item.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'AssessmentItemCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[AssessmentItemURI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The URI (typical a URL) pointing to the entry in an assessment item bank, which describes this content item.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'AssessmentItemURI';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[ExpectedTimeAssessed].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration allotted for the assessment item expressed in minutes.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'ExpectedTimeAssessed';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[ItemText].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The text of the item.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'ItemText';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[MaxRawScore].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'MaxRawScore';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentItem].[Nomenclature].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the specific nomenclature used for assessment item.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItem', @level2type = N'COLUMN', @level2name = N'Nomenclature';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Score ranges of an assessment associated with one or more learning standards.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[ScoreRangeId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to the score range associated with one or more learning standards.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'ScoreRangeId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[AssessmentReportingMethodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The assessment reporting method defined (e.g., scale score, RIT scale score) associated with the referenced learning standard(s).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'AssessmentReportingMethodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[IdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'IdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[MaximumScore].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum score in the score range.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'MaximumScore';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentScoreRangeLearningStandard].[MinimumScore].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum score in the score range.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentScoreRangeLearningStandard', @level2type = N'COLUMN', @level2name = N'MinimumScore';


GO
PRINT N'Creating Extended Property [edfi].[BalanceSheetDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES balance sheet accounting dimension, used to track financial transactions for each fund. These financial statements only report assets, deferred outflows of resources, liabilities, deferred inflows of resources, and equity accounts. The statements are considered snapshots of how these accounts stand as of a certain point in time.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BalanceSheetDimension';


GO
PRINT N'Creating Extended Property [edfi].[BalanceSheetDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account balance sheet dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BalanceSheetDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[BalanceSheetDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account balance sheet dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BalanceSheetDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[BalanceSheetDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account balance sheet dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BalanceSheetDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the schedule of class period meeting times.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[BellScheduleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Name or title of the bell schedule.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'BellScheduleName';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[AlternateDayName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An alternate name for the day (e.g., Red, Blue).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'AlternateDayName';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[EndTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the time of day the bell schedule ends.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'EndTime';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[StartTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the time of day the bell schedule begins.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'StartTime';


GO
PRINT N'Creating Extended Property [edfi].[BellSchedule].[TotalInstructionalTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total instructional time in minutes per day for the bell schedule.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'BellSchedule', @level2type = N'COLUMN', @level2name = N'TotalInstructionalTime';


GO
PRINT N'Creating Extended Property [edfi].[Calendar].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A set of dates associated with an organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Calendar';


GO
PRINT N'Creating Extended Property [edfi].[Calendar].[CalendarCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Calendar', @level2type = N'COLUMN', @level2name = N'CalendarCode';


GO
PRINT N'Creating Extended Property [edfi].[Calendar].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Calendar', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Calendar].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year associated with the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Calendar', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Calendar].[CalendarTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the type of calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Calendar', @level2type = N'COLUMN', @level2name = N'CalendarTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CalendarDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of scheduled or unscheduled event for the day.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CalendarDate';


GO
PRINT N'Creating Extended Property [edfi].[CalendarDate].[CalendarCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CalendarDate', @level2type = N'COLUMN', @level2name = N'CalendarCode';


GO
PRINT N'Creating Extended Property [edfi].[CalendarDate].[Date].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year of the calendar event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CalendarDate', @level2type = N'COLUMN', @level2name = N'Date';


GO
PRINT N'Creating Extended Property [edfi].[CalendarDate].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CalendarDate', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[CalendarDate].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year associated with the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CalendarDate', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A valid combination of account dimensions under which financials are reported. This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'SEA populated code value for the valid combination of account dimensions under which financials are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[AccountName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A descriptive name for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'AccountName';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[AccountTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of account used in accounting such as revenue, expenditure, or balance sheet.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'AccountTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[BalanceSheetCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account balance sheet dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'BalanceSheetCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[FunctionCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account function dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'FunctionCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[FundCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account fund dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'FundCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[ObjectCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account object dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'ObjectCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[OperationalUnitCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account operational unit dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'OperationalUnitCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[ProgramCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account program dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'ProgramCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[ProjectCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account project dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'ProjectCode';


GO
PRINT N'Creating Extended Property [edfi].[ChartOfAccount].[SourceCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account source dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ChartOfAccount', @level2type = N'COLUMN', @level2name = N'SourceCode';


GO
PRINT N'Creating Extended Property [edfi].[ClassPeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ClassPeriod';


GO
PRINT N'Creating Extended Property [edfi].[ClassPeriod].[ClassPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ClassPeriod', @level2type = N'COLUMN', @level2name = N'ClassPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[ClassPeriod].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ClassPeriod', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[ClassPeriod].[OfficialAttendancePeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether this class period is used for official daily attendance. Alternatively, official daily attendance may be tied to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ClassPeriod', @level2type = N'COLUMN', @level2name = N'OfficialAttendancePeriod';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents any type of list of designated students for tracking, analysis, or intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[CohortIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or ID for the cohort.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'CohortIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[AcademicSubjectDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The academic subject associated with an academic intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'AcademicSubjectDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[CohortDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the cohort and its purpose.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'CohortDescription';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[CohortScopeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The scope of cohort (e.g., school, district, classroom).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'CohortScopeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Cohort].[CohortTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of cohort (e.g., academic intervention, classroom breakout).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Cohort', @level2type = N'COLUMN', @level2name = N'CohortTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The legal document held by the community provider that authorizes the holder to perform certain functions and or services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[CommunityProviderId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a community provider. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'CommunityProviderId';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique identifier issued by the licensing organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicensingOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization issuing the license.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicensingOrganization';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[AuthorizedFacilityCapacity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'AuthorizedFacilityCapacity';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseEffectiveDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which a license is active or becomes effective.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseEffectiveDate';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseExpirationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which a license will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseExpirationDate';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseIssueDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an active license was issued.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseIssueDate';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the status of the license.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[LicenseTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the category of the license.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'LicenseTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[OldestAgeAuthorizedToServe].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The oldest age of children a provider is authorized or licensed to serve.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'OldestAgeAuthorizedToServe';


GO
PRINT N'Creating Extended Property [edfi].[CommunityProviderLicense].[YoungestAgeAuthorizedToServe].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The youngest age of children a provider is authorized or licensed to serve.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CommunityProviderLicense', @level2type = N'COLUMN', @level2name = N'YoungestAgeAuthorizedToServe';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[Objective].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The designated title of the competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'Objective';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[ObjectiveGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The grade level for which the competency objective is targeted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[CompetencyObjectiveId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Identifier for the competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'CompetencyObjectiveId';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the student competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[CompetencyObjective].[SuccessCriteria].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CompetencyObjective', @level2type = N'COLUMN', @level2name = N'SuccessCriteria';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents a contact of a student, such as a parent, guardian or caretaker.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[ContactUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'ContactUSI';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[ContactUniqueId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'ContactUniqueId';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[GenderIdentity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The gender the contact identifies themselves as.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'GenderIdentity';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[GenerationCodeSuffix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'GenerationCodeSuffix';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[HighestCompletedLevelOfEducationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'HighestCompletedLevelOfEducationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[LastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name borne in common by members of a family.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'LastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[LoginId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The login ID for the user; used for security access control interface.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'LoginId';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[MaidenName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The individual''s maiden name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'MaidenName';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[MiddleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'MiddleName';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[PersonalTitlePrefix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A prefix used to denote the title, degree, position, or seniority of the individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'PersonalTitlePrefix';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[PersonId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'PersonId';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[PreferredFirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The first name the individual prefers, if different from their legal first name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'PreferredFirstName';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[PreferredLastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The last name the individual prefers, if different from their legal last name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'PreferredLastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[SexDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A person''s birth sex.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'SexDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Contact].[SourceSystemDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the originating record source system for the person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Contact', @level2type = N'COLUMN', @level2name = N'SourceSystemDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CourseCode';


GO
PRINT N'Creating Extended Property [edfi].[Course].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CareerPathwayDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CareerPathwayDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CourseDefinedByDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Specifies whether the course was defined by the SEA, LEA, School, or national organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CourseDefinedByDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CourseDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CourseDescription';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CourseGPAApplicabilityDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator of whether or not the course being described is included in the computation of the student''s grade point average, and if so, if it is weighted differently from regular courses.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CourseGPAApplicabilityDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[CourseTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'CourseTitle';


GO
PRINT N'Creating Extended Property [edfi].[Course].[DateCourseAdopted].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date the course was adopted by the education agency.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'DateCourseAdopted';


GO
PRINT N'Creating Extended Property [edfi].[Course].[HighSchoolCourseRequirement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication that this course may satisfy high school graduation requirements in the course''s subject area.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'HighSchoolCourseRequirement';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MaxCompletionsForCredit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Designates how many times the course may be taken with credit received by the student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MaxCompletionsForCredit';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MaximumAvailableCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MaximumAvailableCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MaximumAvailableCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MaximumAvailableCredits';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MaximumAvailableCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MaximumAvailableCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MinimumAvailableCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MinimumAvailableCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MinimumAvailableCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MinimumAvailableCredits';


GO
PRINT N'Creating Extended Property [edfi].[Course].[MinimumAvailableCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'MinimumAvailableCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Course].[NumberOfParts].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of parts identified for a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'NumberOfParts';


GO
PRINT N'Creating Extended Property [edfi].[Course].[TimeRequiredForCompletion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Course', @level2type = N'COLUMN', @level2name = N'TimeRequiredForCompletion';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents an entry in the course catalog of available courses offered by the school during a session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[CourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'CourseCode';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[InstructionalTimePlanned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'InstructionalTimePlanned';


GO
PRINT N'Creating Extended Property [edfi].[CourseOffering].[LocalCourseTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name given to a course of study offered in the school, if different from the course title.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseOffering', @level2type = N'COLUMN', @level2name = N'LocalCourseTitle';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity is the final record of a student''s performance in their courses at the end of a semester or school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseAttemptResultDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The result from the student''s attempt to take the course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseAttemptResultDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseCode';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[TermDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The term for the session during the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'TermDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[AlternativeCourseTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'AlternativeCourseTitle';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[AssigningOrganizationIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization code or name assigning the course identification code.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'AssigningOrganizationIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[AttemptedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'AttemptedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[AttemptedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'AttemptedCredits';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[AttemptedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'AttemptedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseCatalogURL].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The URL for the course catalog that defines the course identification code.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseCatalogURL';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseRepeatCodeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseRepeatCodeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[CourseTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'CourseTitle';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[EarnedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'EarnedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[EarnedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'EarnedCredits';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[EarnedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'EarnedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[ExternalEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'ExternalEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[ExternalEducationOrganizationNameOfInstitution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Name of the external institution where the student completed the course; to be used only when the reference external education organization is not available.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'ExternalEducationOrganizationNameOfInstitution';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[FinalLetterGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The final indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'FinalLetterGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[FinalNumericGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The final indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'FinalNumericGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[MethodCreditEarnedDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The method the credits were earned.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'MethodCreditEarnedDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[ResponsibleTeacherStaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'ResponsibleTeacherStaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[CourseTranscript].[WhenTakenGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Student''s grade level at time of course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CourseTranscript', @level2type = N'COLUMN', @level2name = N'WhenTakenGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The legal document giving authorization to perform teaching assignment services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[CredentialIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier or serial number assigned to the credential.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'CredentialIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[StateOfIssueStateAbbreviationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'StateOfIssueStateAbbreviationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[CredentialFieldDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The field of certification for the certificate (e.g., Mathematics, Music).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'CredentialFieldDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[CredentialTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the category of credential an individual holds.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'CredentialTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[EffectiveDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The year, month and day on which an active credential held by an individual was issued.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'EffectiveDate';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[ExpirationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an active credential held by an individual will expire.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'ExpirationDate';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[IssuanceDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an active credential was issued to an individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'IssuanceDate';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the credential.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[TeachingCredentialBasisDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'TeachingCredentialBasisDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Credential].[TeachingCredentialDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Credential', @level2type = N'COLUMN', @level2name = N'TeachingCredentialDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A natural or man-made event that causes the disruption of school-level activities and the temporary or permanent displacement of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[CrisisEventName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the crisis event that occurred. If there is no generally accepted name for this crisis event, the suggested format: Location + Crisis type + Year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent', @level2type = N'COLUMN', @level2name = N'CrisisEventName';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[CrisisDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Provides a textual description of the crisis event affecting the student. It may include details such as the nature of the crisis (e.g., natural disaster, conflict, medical emergency), its severity, location, and any other relevant information describing the crisis situation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent', @level2type = N'COLUMN', @level2name = N'CrisisDescription';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[CrisisEndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date on which the crisis ceased to affect the student. Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent', @level2type = N'COLUMN', @level2name = N'CrisisEndDate';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[CrisisStartDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The year, month and day on which the crisis affected the student. This date may not be the same as the date the crisis occurred if evacuation orders are implemented in anticipation of a crisis.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent', @level2type = N'COLUMN', @level2name = N'CrisisStartDate';


GO
PRINT N'Creating Extended Property [edfi].[CrisisEvent].[CrisisTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type or category of crisis.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'CrisisEvent', @level2type = N'COLUMN', @level2name = N'CrisisTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This is the base entity for the descriptor pattern.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[DescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'DescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[CodeValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code or abbreviation that is used to refer to the descriptor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'CodeValue';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[ShortDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A shortened description for the descriptor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'ShortDescription';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the descriptor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[PriorDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'PriorDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[EffectiveBeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'EffectiveBeginDate';


GO
PRINT N'Creating Extended Property [edfi].[Descriptor].[EffectiveEndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the period when the descriptor is in effect.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Descriptor', @level2type = N'COLUMN', @level2name = N'EffectiveEndDate';


GO
PRINT N'Creating Extended Property [edfi].[DescriptorMapping].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A mapping of a descriptor value in one namespace to a descriptor value in another namespace. This can be used to exchange known contextual mappings of enumeration values.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DescriptorMapping';


GO
PRINT N'Creating Extended Property [edfi].[DescriptorMapping].[MappedNamespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The namespace of the descriptor value to which the from descriptor value is mapped to.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DescriptorMapping', @level2type = N'COLUMN', @level2name = N'MappedNamespace';


GO
PRINT N'Creating Extended Property [edfi].[DescriptorMapping].[MappedValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptor value to which the from descriptor value is being mapped to.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DescriptorMapping', @level2type = N'COLUMN', @level2name = N'MappedValue';


GO
PRINT N'Creating Extended Property [edfi].[DescriptorMapping].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The namespace of the descriptor value that is being mapped to another value.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DescriptorMapping', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[DescriptorMapping].[Value].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptor value that is being mapped to another value.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DescriptorMapping', @level2type = N'COLUMN', @level2name = N'Value';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[DisciplineActionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier assigned by the education organization to the discipline action.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'DisciplineActionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[DisciplineDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the discipline action.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'DisciplineDate';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[ActualDisciplineActionLength].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the actual length in school days of a student''s disciplinary assignment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'ActualDisciplineActionLength';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[AssignmentSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'AssignmentSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[DisciplineActionLength].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The length of time in school days for the discipline action (e.g. removal, detention), if applicable.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'DisciplineActionLength';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[DisciplineActionLengthDifferenceReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the reason for the difference, if any, between the official and actual lengths of a student''s disciplinary assignment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'DisciplineActionLengthDifferenceReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[IEPPlacementMeetingIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student''s Individualized Education Program (IEP) team to determine appropriate placement.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'IEPPlacementMeetingIndicator';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[RelatedToZeroTolerancePolicy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'RelatedToZeroTolerancePolicy';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineAction].[ResponsibilitySchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineAction', @level2type = N'COLUMN', @level2name = N'ResponsibilitySchoolId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents an occurrence of an infraction ranging from a minor behavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[CaseNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The case number assigned to the DisciplineIncident by law enforcement or other organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'CaseNumber';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentCost].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of any quantifiable monetary loss directly resulting from the discipline incident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentCost';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the discipline incident occurred.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentDate';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description for an incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentDescription';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentLocationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies where the discipline incident occurred and whether or not it occurred on school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentLocationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[IncidentTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the time of day the incident took place.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'IncidentTime';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[ReportedToLawEnforcement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the incident was reported to law enforcement.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'ReportedToLawEnforcement';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[ReporterDescriptionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Information on the type of individual who reported the discipline incident. When known and/or if useful, use a more specific option code (e.g., "Counselor" rather than "Professional Staff").', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'ReporterDescriptionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[DisciplineIncident].[ReporterName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies the reporter of the discipline incident by name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DisciplineIncident', @level2type = N'COLUMN', @level2name = N'ReporterName';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[ContentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier for the education content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'ContentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[AdditionalAuthorsIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation "et al".', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'AdditionalAuthorsIndicator';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[ContentClassDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The predominate type or kind characterizing the learning resource.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'ContentClassDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[Cost].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An amount that has to be paid or spent to buy or obtain the education content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'Cost';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[CostRateDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The rate by which the cost applies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'CostRateDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An extended written representation of the education content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[InteractivityStyleDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'InteractivityStyleDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[LearningResourceMetadataURI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'LearningResourceMetadataURI';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[LearningStandardId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'LearningStandardId';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the education content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[PublicationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date on which this content was first published.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'PublicationDate';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[PublicationYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The year at which this content was first published.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'PublicationYear';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[Publisher].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The organization credited with publishing the resource.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'Publisher';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[ShortDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A short description or name of the entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'ShortDescription';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[TimeRequired].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Approximate or typical time that it takes to work with or through this learning resource for the typical intended target audience expressed in minutes.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'TimeRequired';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[UseRightsURL].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The URL where the owner specifies permissions for using the resource.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'UseRightsURL';


GO
PRINT N'Creating Extended Property [edfi].[EducationContent].[Version].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The version identifier for the content.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationContent', @level2type = N'COLUMN', @level2name = N'Version';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[NameOfInstitution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The full, legally accepted name of the institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization', @level2type = N'COLUMN', @level2name = N'NameOfInstitution';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[OperationalStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The current operational status of the education organization (e.g., active, inactive).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization', @level2type = N'COLUMN', @level2name = N'OperationalStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[ShortNameOfInstitution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A short name for the institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization', @level2type = N'COLUMN', @level2name = N'ShortNameOfInstitution';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganization].[WebSite].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The public web site address (URL) for the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganization', @level2type = N'COLUMN', @level2name = N'WebSite';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[InterventionPrescriptionEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation', @level2type = N'COLUMN', @level2name = N'InterventionPrescriptionEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[InterventionPrescriptionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation', @level2type = N'COLUMN', @level2name = N'InterventionPrescriptionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The begin date of the period during which the intervention prescription is available.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationInterventionPrescriptionAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the period during which the intervention prescription is available.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInterventionPrescriptionAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationNetworkAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Properties of the association between the education organization and its network(s).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationNetworkAssociation';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationNetworkAssociation].[EducationOrganizationNetworkId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a network of education organizations. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationNetworkAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationNetworkId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationNetworkAssociation].[MemberEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationNetworkAssociation', @level2type = N'COLUMN', @level2name = N'MemberEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationNetworkAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date on which the education organization joined this network.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationNetworkAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationNetworkAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date on which the education organization left this network.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationNetworkAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationPeerAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The association from an education organization to its peers.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationPeerAssociation';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationPeerAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationPeerAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EducationOrganizationPeerAssociation].[PeerEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationPeerAssociation', @level2type = N'COLUMN', @level2name = N'PeerEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The cells of a rubric, consisting of a qualitative decription, definition, or exemplar with the associated rubric evaluation level.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[EvaluationRubricRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The numeric rating associated with the evaluation rubric dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'EvaluationRubricRating';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramEvaluationElementTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or title of the program evaluation element.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationElementTitle';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramEvaluationPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the period for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramEvaluationTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An assigned unique identifier for the student program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTitle';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program evaluation conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[EvaluationCriterionDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The evaluation criterion description for the evaluation rubric dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'EvaluationCriterionDescription';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[EvaluationRubricRatingLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The rating level achieved for the evaluation rubric dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'EvaluationRubricRatingLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[EvaluationRubricDimension].[RubricDimensionSortOrder].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sort order of the rubric dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EvaluationRubricDimension', @level2type = N'COLUMN', @level2name = N'RubricDimensionSortOrder';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The association from feeder school to the receiving school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year of the first day of the feeder school association.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[FeederSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation', @level2type = N'COLUMN', @level2name = N'FeederSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year of the last day of the feeder school association.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[FeederSchoolAssociation].[FeederRelationshipDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FeederSchoolAssociation', @level2type = N'COLUMN', @level2name = N'FeederRelationshipDescription';


GO
PRINT N'Creating Extended Property [edfi].[FunctionDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES function accounting dimension representing an expenditure. The function describes the activity for which a service or material object is acquired. The functions of a school district are generally classified into five broad areas, including instruction, support services, operation of non-instructional services, facilities acquisition and construction, and debt service.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FunctionDimension';


GO
PRINT N'Creating Extended Property [edfi].[FunctionDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account function dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FunctionDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[FunctionDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account function dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FunctionDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[FunctionDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account function dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FunctionDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[FundDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES fund accounting dimension. A fund is a fiscal and accounting entity with a self-balancing set of accounts recording cash and other financial resources, together with all related liabilities and residual equities or balances, and changes therein, which are segregated for the purpose of carrying on specific activities or attaining certain objectives in accordance with special regulations, restrictions, or limitations.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FundDimension';


GO
PRINT N'Creating Extended Property [edfi].[FundDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account fund dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FundDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[FundDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account fund dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FundDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[FundDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account fund dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'FundDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association base class represents the basic relationship between students and programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the student exited the program or stopped receiving services.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[ReasonExitedDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reason the student left the program within a school or district.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'ReasonExitedDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GeneralStudentProgramAssociation].[ServedOutsideOfRegularSession].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the student received services during the summer session or between sessions.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'ServedOutsideOfRegularSession';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[GradeTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of grade reported (e.g., exam, final, grading period).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'GradeTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[GradingPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'GradingPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[GradingPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school''s descriptive name of the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'GradingPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[GradingPeriodSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the grading period school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'GradingPeriodSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[CurrentGradeAsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'As-Of date for a grade posted as the current grade.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'CurrentGradeAsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[CurrentGradeIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator that the posted grade is an interim grade for the grading period and not the final grade.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'CurrentGradeIndicator';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[DiagnosticStatement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'DiagnosticStatement';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[GradeEarnedDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the grade earned by the learner.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'GradeEarnedDescription';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[LetterGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'LetterGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[NumericGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'NumericGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[Grade].[PerformanceBaseConversionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A conversion of the level to a standard set of performance levels.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Grade', @level2type = N'COLUMN', @level2name = N'PerformanceBaseConversionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[GradebookEntryIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a gradebook entry by the source system.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'GradebookEntryIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace URI for the source of the gradebook entry.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[DateAssigned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the assignment, homework, or assessment was assigned or executed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'DateAssigned';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the assignment, homework, or classroom assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[DueDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the assignment, homework, or assessment is due.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'DueDate';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[DueTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time the assignment, homework, or assessment is due.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'DueTime';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[GradebookEntryTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of the gradebook entry.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'GradebookEntryTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[GradingPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'GradingPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[GradingPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school''s descriptive name of the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'GradingPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[MaxPoints].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum number of points  that can be earned for the submission.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'MaxPoints';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[SourceSectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'SourceSectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[GradebookEntry].[Title].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or title of the activity to be recorded in the gradebook entry.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradebookEntry', @level2type = N'COLUMN', @level2name = N'Title';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the time span for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[GradingPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'GradingPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[GradingPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school''s descriptive name of the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'GradingPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the grading period school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the first day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the last day of the grading period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[PeriodSequence].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sequential order of this period relative to other periods.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'PeriodSequence';


GO
PRINT N'Creating Extended Property [edfi].[GradingPeriod].[TotalInstructionalDays].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Total days available for educational instruction during the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriod', @level2type = N'COLUMN', @level2name = N'TotalInstructionalDays';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity is a plan outlining the required credits, credits by subject, credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[GraduationPlanTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of academic plan the student is following for graduation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'GraduationPlanTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[GraduationSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year the student is expected to graduate.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'GraduationSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[IndividualPlan].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator of whether the graduation plan is tailored for an individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'IndividualPlan';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[TotalRequiredCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'TotalRequiredCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[TotalRequiredCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'TotalRequiredCredits';


GO
PRINT N'Creating Extended Property [edfi].[GraduationPlan].[TotalRequiredCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GraduationPlan', @level2type = N'COLUMN', @level2name = N'TotalRequiredCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[InterventionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'InterventionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The start date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[DeliveryMethodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention was implemented.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'DeliveryMethodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date for the intervention implementation.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[InterventionClassDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'InterventionClassDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[MaxDosage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum duration of time in minutes that may be assigned for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'MaxDosage';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[MinDosage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum duration of time in minutes that may be assigned for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'MinDosage';


GO
PRINT N'Creating Extended Property [edfi].[Intervention].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Intervention', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[InterventionPrescriptionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'InterventionPrescriptionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[DeliveryMethodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'DeliveryMethodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[InterventionClassDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'InterventionClassDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[MaxDosage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum duration of time in minutes that is recommended for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'MaxDosage';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[MinDosage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum duration of time in minutes that is recommended for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'MinDosage';


GO
PRINT N'Creating Extended Property [edfi].[InterventionPrescription].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionPrescription', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An experimental or quasi-experimental study of an intervention technique.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[InterventionStudyIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention study.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'InterventionStudyIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[DeliveryMethodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'DeliveryMethodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[InterventionClassDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'InterventionClassDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[InterventionPrescriptionEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'InterventionPrescriptionEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[InterventionPrescriptionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'InterventionPrescriptionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[InterventionStudy].[Participants].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of participants observed in the study.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'InterventionStudy', @level2type = N'COLUMN', @level2name = N'Participants';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A statement that describes a specific competency or academic standard.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[LearningStandardId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'LearningStandardId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[CourseTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The official course title with which this learning standard is associated.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'CourseTitle';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The text of the statement. The textual content that either describes a specific competency such as "Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions." or describes a less granular group of competencies within the taxonomy of the standards document, e.g. "Understand and apply the Pythagorean Theorem," or "Geometry".', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[LearningStandardCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An additional classification of the type of a specific learning standard.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'LearningStandardCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[LearningStandardItemCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'LearningStandardItemCode';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[LearningStandardScopeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Signals the scope of usage the standard. Does not necessarily relate the standard to the governing body.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'LearningStandardScopeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The namespace of the organization or entity who governs the standard. It is recommended the namespaces observe a URI format and begin with a domain name under the governing organization or entity control.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[ParentLearningStandardId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'ParentLearningStandardId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[SuccessCriteria].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the learning standard.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'SuccessCriteria';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandard].[URI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An unambiguous reference to the statement using a network-resolvable URI.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandard', @level2type = N'COLUMN', @level2name = N'URI';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates a directional association of equivalence from a source to a target learning standard.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The namespace of the organization that has created and owns the association.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[SourceLearningStandardId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'SourceLearningStandardId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[TargetLearningStandardId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'TargetLearningStandardId';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[EffectiveDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date that the association is considered to be applicable or effective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'EffectiveDate';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[LearningStandardEquivalenceStrengthDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Captures supplemental information on the relationship. Recommended for use only when the match is partial.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'LearningStandardEquivalenceStrengthDescription';


GO
PRINT N'Creating Extended Property [edfi].[LearningStandardEquivalenceAssociation].[LearningStandardEquivalenceStrengthDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A measure that indicates the strength or quality of the equivalence relationship.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardEquivalenceAssociation', @level2type = N'COLUMN', @level2name = N'LearningStandardEquivalenceStrengthDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of account codes defined by an education organization for a fiscal year. It provides a formal record of the debits and credits relating to the specific account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[AccountName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A descriptive name for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'AccountName';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[ChartOfAccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'SEA populated code value for the valid combination of account dimensions under which financials are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'ChartOfAccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalAccount].[ChartOfAccountEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalAccount', @level2type = N'COLUMN', @level2name = N'ChartOfAccountEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of local education agency or charter management organization expense or revenue amounts.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the reported amount for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Current balance for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating Extended Property [edfi].[LocalActual].[FinancialCollectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accounting period or grouping for which the amount is collected.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalActual', @level2type = N'COLUMN', @level2name = N'FinancialCollectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of local education agency or charter management organization budget amounts.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the reported amount for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Current balance for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating Extended Property [edfi].[LocalBudget].[FinancialCollectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accounting period or grouping for which the amount is collected.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalBudget', @level2type = N'COLUMN', @level2name = N'FinancialCollectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of local education agency or charter management organization contracted staff amounts.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the reported amount for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Current balance for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating Extended Property [edfi].[LocalContractedStaff].[FinancialCollectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accounting period or grouping for which the amount is collected.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalContractedStaff', @level2type = N'COLUMN', @level2name = N'FinancialCollectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of local education agency or charter management organization encumbrance amounts.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the reported amount for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Current balance for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating Extended Property [edfi].[LocalEncumbrance].[FinancialCollectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accounting period or grouping for which the amount is collected.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalEncumbrance', @level2type = N'COLUMN', @level2name = N'FinancialCollectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The set of local education agency or charter management organization payroll amounts.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[AccountIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Code value for the valid combination of account dimensions by LEA under which financials are reported. ', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'AccountIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the reported amount for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Current balance for the account.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating Extended Property [edfi].[LocalPayroll].[FinancialCollectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accounting period or grouping for which the amount is collected.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LocalPayroll', @level2type = N'COLUMN', @level2name = N'FinancialCollectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Location].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the physical space where students gather for a particular class/section. The location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Location';


GO
PRINT N'Creating Extended Property [edfi].[Location].[ClassroomIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Location', @level2type = N'COLUMN', @level2name = N'ClassroomIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[Location].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Location', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Location].[MaximumNumberOfSeats].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The most number of seats the class can maintain.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Location', @level2type = N'COLUMN', @level2name = N'MaximumNumberOfSeats';


GO
PRINT N'Creating Extended Property [edfi].[Location].[OptimalNumberOfSeats].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of seats that is most favorable to the class.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Location', @level2type = N'COLUMN', @level2name = N'OptimalNumberOfSeats';


GO
PRINT N'Creating Extended Property [edfi].[ObjectDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES object accounting dimension representing an expenditure. Per the NCES definition, this classification is used to describe the service or commodity obtained as the result of a specific expenditure, such as salaries, benefits, tuition reimbursement, and so forth.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectDimension';


GO
PRINT N'Creating Extended Property [edfi].[ObjectDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account object dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[ObjectDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account object dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[ObjectDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account object dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents subtests that assess specific learning objectives.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[IdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'IdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[AcademicSubjectDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The subject area of the objective assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'AcademicSubjectDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description of the objective assessment (e.g., vocabulary, measurement, or geometry).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[MaxRawScore].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'MaxRawScore';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[Nomenclature].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the specific nomenclature used for this level of objective assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'Nomenclature';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[ParentIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'ParentIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[ObjectiveAssessment].[PercentOfAssessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The percentage of the assessment that tests this objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'PercentOfAssessment';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents an open staff position that the education organization is seeking to fill.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[RequisitionNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'RequisitionNumber';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[DatePosted].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date the open staff position was posted.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'DatePosted';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[DatePostingRemoved].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the posting was removed or filled.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'DatePostingRemoved';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[EmploymentStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the type of employment or contract desired for the position.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'EmploymentStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[PositionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name of an individual''s position.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'PositionTitle';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[PostingResultDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indication of whether the OpenStaffPosition was filled or retired without filling.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'PostingResultDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[ProgramAssignmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the program for which the open staff position will be assigned.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'ProgramAssignmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[OpenStaffPosition].[StaffClassificationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The titles of employment, official status, or rank of education staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OpenStaffPosition', @level2type = N'COLUMN', @level2name = N'StaffClassificationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[OperationalUnitDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES operational unit accounting dimension. This dimension is used to segregate costs by school and operational unit such as physical location, department, or other method.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OperationalUnitDimension';


GO
PRINT N'Creating Extended Property [edfi].[OperationalUnitDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account operational unit dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OperationalUnitDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[OperationalUnitDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account operational unit dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OperationalUnitDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[OperationalUnitDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account operational unit dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'OperationalUnitDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[Person].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents a human being.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Person';


GO
PRINT N'Creating Extended Property [edfi].[Person].[PersonId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Person', @level2type = N'COLUMN', @level2name = N'PersonId';


GO
PRINT N'Creating Extended Property [edfi].[Person].[SourceSystemDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the originating record source system for the person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Person', @level2type = N'COLUMN', @level2name = N'SourceSystemDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[PostSecondaryEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity captures significant postsecondary events during a student''s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student''s enrollment at a post-secondary institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'PostSecondaryEvent';


GO
PRINT N'Creating Extended Property [edfi].[PostSecondaryEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the event occurred or was recorded.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'PostSecondaryEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[PostSecondaryEvent].[PostSecondaryEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The post secondary event that is logged.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'PostSecondaryEvent', @level2type = N'COLUMN', @level2name = N'PostSecondaryEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[PostSecondaryEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'PostSecondaryEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[PostSecondaryEvent].[PostSecondaryInstitutionId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The ID of the post secondary institution. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'PostSecondaryEvent', @level2type = N'COLUMN', @level2name = N'PostSecondaryInstitutionId';


GO
PRINT N'Creating Extended Property [edfi].[Program].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Program';


GO
PRINT N'Creating Extended Property [edfi].[Program].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Program', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Program].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Program', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[Program].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Program', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Program].[ProgramId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Program', @level2type = N'COLUMN', @level2name = N'ProgramId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES program accounting dimension. A program is defined by the NCES as a plan of activities and procedures designed to accomplish a predetermined objective or set of objectives. These are often categorized into broad program areas such as regular education, special education, vocational education, other PK-12 instructional, nonpublic school, adult and continuing education, community and junior college education, community services, and co-curricular or extracurricular activities.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramDimension';


GO
PRINT N'Creating Extended Property [edfi].[ProgramDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account program dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[ProgramDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account program dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[ProgramDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account program dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An evaluation instrument applied to evaluate a student in the context of a program. Student evaluations are typically applied by a staff member based upon a rubric.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramEvaluationPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the period for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramEvaluationTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An assigned unique identifier for the student program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program evaluation conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[EvaluationMaxNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum summary numerical rating or score for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'EvaluationMaxNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[EvaluationMinNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum summary numerical rating or score for the program evaluation. If omitted, assumed to be 0.0', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'EvaluationMinNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluation].[ProgramEvaluationDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The long description of the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationDescription';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The lowest level elements or criterion of a students''s performance that is being evaluated, typically by a rubric.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationElementTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or title of the program evaluation element.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationElementTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the period for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An assigned unique identifier for the student program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program evaluation conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ElementMaxNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum summary numerical rating or score for the program evaluation element.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ElementMaxNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ElementMinNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum summary numerical rating or score for the program evaluation element. If omitted, assumed to be 0.0.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ElementMinNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ElementSortOrder].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sort order of this program evaluation element.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ElementSortOrder';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationElementDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The long description of the program evaluation element.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationElementDescription';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationElement].[ProgramEvaluationObjectiveTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or title of the program evaluation objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationElement', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationObjectiveTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A subcomponent of a ProgramEvaluation, a specific student objective or domain of performance that is being evaluated.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEvaluationObjectiveTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or title of the program evaluation objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationObjectiveTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEvaluationPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the period for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEvaluationTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An assigned unique identifier for the student program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTitle';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program evaluation conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ObjectiveMaxNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The maximum summary numerical rating or score for the program evaluation objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveMaxNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ObjectiveMinNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The minimum summary numerical rating or score for the program evaluation objective. If omitted, assumed to be 0.0', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveMinNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ObjectiveSortOrder].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The sort order of this program evaluation objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveSortOrder';


GO
PRINT N'Creating Extended Property [edfi].[ProgramEvaluationObjective].[ProgramEvaluationObjectiveDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The long description of the program evaluation objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProgramEvaluationObjective', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationObjectiveDescription';


GO
PRINT N'Creating Extended Property [edfi].[ProjectDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES project accounting dimension. The project dimension reporting code permits school districts to accumulate expenditures to meet a variety of specialized reporting requirements at the local, state, and federal levels.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProjectDimension';


GO
PRINT N'Creating Extended Property [edfi].[ProjectDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account project dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProjectDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[ProjectDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account project dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProjectDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[ProjectDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account project dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ProjectDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This educational entity represents the collection of student grades for courses taken during a grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[GradingPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'GradingPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[GradingPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school''s descriptive name of the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'GradingPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[GradingPeriodSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'GradingPeriodSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[GradingPeriodSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the grading period school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'GradingPeriodSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[NumberOfDaysAbsent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of days an individual is absent when school is in session during a given reporting period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'NumberOfDaysAbsent';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[NumberOfDaysInAttendance].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of days an individual is present when school is in session during a given reporting period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'NumberOfDaysInAttendance';


GO
PRINT N'Creating Extended Property [edfi].[ReportCard].[NumberOfDaysTardy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of days an individual is tardy during a given reporting period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCard', @level2type = N'COLUMN', @level2name = N'NumberOfDaysTardy';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[RestraintEventIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'RestraintEventIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting where the RestraintEvent was exercised.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the restraint event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[RestraintEvent].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'RestraintEvent', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SchoolYearType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier for a school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SchoolYearType';


GO
PRINT N'Creating Extended Property [edfi].[SchoolYearType].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Key for School Year', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SchoolYearType', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[SchoolYearType].[SchoolYearDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The description for the SchoolYear type.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SchoolYearType', @level2type = N'COLUMN', @level2name = N'SchoolYearDescription';


GO
PRINT N'Creating Extended Property [edfi].[SchoolYearType].[CurrentSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code for the current school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SchoolYearType', @level2type = N'COLUMN', @level2name = N'CurrentSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Section].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section';


GO
PRINT N'Creating Extended Property [edfi].[Section].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[Section].[AvailableCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'AvailableCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[Section].[AvailableCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'AvailableCredits';


GO
PRINT N'Creating Extended Property [edfi].[Section].[AvailableCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'AvailableCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting in which a student receives education and related services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[InstructionLanguageDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary language of instruction. If omitted, English is assumed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'InstructionLanguageDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[LocationClassroomIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'LocationClassroomIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[Section].[LocationSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'LocationSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[MediumOfInstructionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'MediumOfInstructionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[OfficialAttendancePeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a class period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'OfficialAttendancePeriod';


GO
PRINT N'Creating Extended Property [edfi].[Section].[PopulationServedDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of students the section is offered and tailored to.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'PopulationServedDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SectionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the section identifier.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SectionName';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SectionTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Specifies whether the section is for attendance only, credit only, or both.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SectionTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section].[SequenceOfCourse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section', @level2type = N'COLUMN', @level2name = N'SequenceOfCourse';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Captures attendance taken event for given section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[CalendarCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'CalendarCode';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[Date].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year of the calendar event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'Date';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date the section attendance taken event was submitted, which could be a different date than the instructional day.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[SectionAttendanceTakenEvent].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SectionAttendanceTakenEvent', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[Session].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A specific designated unit of time during which instruction is provided, grades are reported and academic credits are awarded to students (whenever applicable). Sessions serve as organized segments of the academic year and can be interrupted by vacations or other events.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session';


GO
PRINT N'Creating Extended Property [edfi].[Session].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Session].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Session].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[Session].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the first day of the session.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[Session].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day and year of the last day of the session.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[Session].[TermDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A descriptor value to indicate the term that the session is associated with.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'TermDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Session].[TotalInstructionalDays].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total number of instructional days in the school calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'TotalInstructionalDays';


GO
PRINT N'Creating Extended Property [edfi].[SourceDimension].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The NCES source dimension. This dimension is used to segregate costs by school and operational unit such as physical location, department, or other method.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SourceDimension';


GO
PRINT N'Creating Extended Property [edfi].[SourceDimension].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code representation of the account source dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SourceDimension', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating Extended Property [edfi].[SourceDimension].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The fiscal year for which the account source dimension is valid.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SourceDimension', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating Extended Property [edfi].[SourceDimension].[CodeName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A description of the account source dimension.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SourceDimension', @level2type = N'COLUMN', @level2name = N'CodeName';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[BirthDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual was born.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'BirthDate';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[CitizenshipStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator of whether or not the person is a U.S. citizen.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'CitizenshipStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[GenderIdentity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The gender the staff member identifies themselves as.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'GenderIdentity';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[GenerationCodeSuffix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'GenerationCodeSuffix';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[HighestCompletedLevelOfEducationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'HighestCompletedLevelOfEducationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[HighlyQualifiedTeacher].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'HighlyQualifiedTeacher';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[HispanicLatinoEthnicity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'HispanicLatinoEthnicity';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[LastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name borne in common by members of a family.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'LastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[LoginId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The login ID for the user; used for security access control interface.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'LoginId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[MaidenName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The individual''s maiden name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'MaidenName';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[MiddleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'MiddleName';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[PersonalTitlePrefix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A prefix used to denote the title, degree, position, or seniority of the individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'PersonalTitlePrefix';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[PersonId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'PersonId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[PreferredFirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The first name the individual prefers, if different from their legal first name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'PreferredFirstName';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[PreferredLastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The last name the individual prefers, if different from their legal last name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'PreferredLastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[SexDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The birth sex of the staff member.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'SexDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[SourceSystemDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the originating record source system for the person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'SourceSystemDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[StaffUniqueId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'StaffUniqueId';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[YearsOfPriorProfessionalExperience].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total number of years that an individual has previously held a similar professional position in one or more education institutions prior to the current school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'YearsOfPriorProfessionalExperience';


GO
PRINT N'Creating Extended Property [edfi].[Staff].[YearsOfPriorTeachingExperience].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The total number of years that an individual has previously held a teaching position in one or more education institutions prior to the current school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'YearsOfPriorTeachingExperience';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the recording of the dates of staff absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[AbsenceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code describing the type of absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent', @level2type = N'COLUMN', @level2name = N'AbsenceEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date for this leave event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[AbsenceEventReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Expanded reason for the staff absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent', @level2type = N'COLUMN', @level2name = N'AbsenceEventReason';


GO
PRINT N'Creating Extended Property [edfi].[StaffAbsenceEvent].[HoursAbsent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The hours the staff was absent, if not the entire working day.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAbsenceEvent', @level2type = N'COLUMN', @level2name = N'HoursAbsent';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the staff associated with a cohort of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Start date for the association of staff to this cohort.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[CohortIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or ID for the cohort.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'CohortIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'End date for the association of staff to this cohort.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffCohortAssociation].[StudentRecordAccess].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffCohortAssociation', @level2type = N'COLUMN', @level2name = N'StudentRecordAccess';


GO
PRINT N'Creating Extended Property [edfi].[StaffDisciplineIncidentAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates those staff who were victims, perpetrators, witnesses, and reporters for a discipline incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffDisciplineIncidentAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffDisciplineIncidentAssociation].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffDisciplineIncidentAssociation', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StaffDisciplineIncidentAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffDisciplineIncidentAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StaffDisciplineIncidentAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffDisciplineIncidentAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the education organization to which a staff member provides services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the start or effective date of a staff member''s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[StaffClassificationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The titles of employment, official status, or rank of education staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'StaffClassificationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[CredentialIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier or serial number assigned to the credential.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'CredentialIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[EmploymentEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'EmploymentEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[EmploymentStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the type of employment or contract.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'EmploymentStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[EmploymentHireDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'EmploymentHireDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the end or termination date of a staff member''s employment, contract, or relationship with the education organization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[FullTimeEquivalency].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'FullTimeEquivalency';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[OrderOfAssignment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Describes whether the assignment is this the staff member''s primary assignment, secondary assignment, etc.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'OrderOfAssignment';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[PositionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The descriptive name of an individual''s position.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'PositionTitle';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationAssignmentAssociation].[StateOfIssueStateAbbreviationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationAssignmentAssociation', @level2type = N'COLUMN', @level2name = N'StateOfIssueStateAbbreviationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association provides the contact information of the staff associated with the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[ContactTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title of the contact in the context of the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation', @level2type = N'COLUMN', @level2name = N'ContactTitle';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[ContactTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the type for the contact information.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation', @level2type = N'COLUMN', @level2name = N'ContactTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationContactAssociation].[ElectronicMailAddress].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The email for the contact associated with the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociation', @level2type = N'COLUMN', @level2name = N'ElectronicMailAddress';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the education organization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[EmploymentStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reflects the type of employment or contract.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'EmploymentStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[HireDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual was hired for a position.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'HireDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[AnnualWage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Annual wage associated with the employment position being reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'AnnualWage';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[CredentialIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier or serial number assigned to the credential.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'CredentialIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[Department].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The department or suborganization the employee/contractor is associated with in the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'Department';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[FullTimeEquivalency].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'FullTimeEquivalency';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[HourlyWage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Hourly wage associated with the employment position being reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'HourlyWage';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[OfferDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date at which the staff member was made an official offer for this employment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'OfferDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[SeparationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Type of employment separation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'SeparationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[SeparationReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reason for terminating the employment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'SeparationReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffEducationOrganizationEmploymentAssociation].[StateOfIssueStateAbbreviationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationEmploymentAssociation', @level2type = N'COLUMN', @level2name = N'StateOfIssueStateAbbreviationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The begin date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[StaffLeaveEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The code describing the type of leave taken.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'StaffLeaveEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the staff leave.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[Reason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Expanded reason for the staff leave.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'Reason';


GO
PRINT N'Creating Extended Property [edfi].[StaffLeave].[SubstituteAssigned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether a substitute was assigned during the period of staff leave.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffLeave', @level2type = N'COLUMN', @level2name = N'SubstituteAssigned';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the staff associated with a program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Start date for the association of staff to this program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'End date for the association of staff to this program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffProgramAssociation].[StudentRecordAccess].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffProgramAssociation', @level2type = N'COLUMN', @level2name = N'StudentRecordAccess';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the school(s) to which a staff member provides instructional services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[ProgramAssignmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the program for which the individual is assigned.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation', @level2type = N'COLUMN', @level2name = N'ProgramAssignmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[CalendarCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation', @level2type = N'COLUMN', @level2name = N'CalendarCode';


GO
PRINT N'Creating Extended Property [edfi].[StaffSchoolAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifier for a school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the class sections to which a staff member is assigned.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of a teacher''s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[ClassroomPositionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of position the staff member holds in the specific class/section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'ClassroomPositionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the last day of a staff member''s assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[HighlyQualifiedTeacher].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'HighlyQualifiedTeacher';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[PercentageContribution].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'PercentageContribution';


GO
PRINT N'Creating Extended Property [edfi].[StaffSectionAssociation].[TeacherStudentDataLinkExclusion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffSectionAssociation', @level2type = N'COLUMN', @level2name = N'TeacherStudentDataLinkExclusion';


GO
PRINT N'Creating Extended Property [edfi].[Student].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student';


GO
PRINT N'Creating Extended Property [edfi].[Student].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthCity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The city the student was born in.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthCity';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthCountryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthCountryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual was born.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthDate';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthInternationalProvince].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'For students born outside of the U.S., the Province or jurisdiction in which an individual is born.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthInternationalProvince';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthSexDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A person''s sex at birth.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthSexDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[BirthStateAbbreviationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'BirthStateAbbreviationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[CitizenshipStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator of whether or not the person is a U.S. citizen.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'CitizenshipStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[DateEnteredUS].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'For students born outside of the U.S., the date the student entered the U.S.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'DateEnteredUS';


GO
PRINT N'Creating Extended Property [edfi].[Student].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating Extended Property [edfi].[Student].[GenerationCodeSuffix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'GenerationCodeSuffix';


GO
PRINT N'Creating Extended Property [edfi].[Student].[LastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name borne in common by members of a family.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'LastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Student].[MaidenName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The individual''s maiden name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'MaidenName';


GO
PRINT N'Creating Extended Property [edfi].[Student].[MiddleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'MiddleName';


GO
PRINT N'Creating Extended Property [edfi].[Student].[MultipleBirthStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'MultipleBirthStatus';


GO
PRINT N'Creating Extended Property [edfi].[Student].[PersonalTitlePrefix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A prefix used to denote the title, degree, position, or seniority of the individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'PersonalTitlePrefix';


GO
PRINT N'Creating Extended Property [edfi].[Student].[PersonId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'PersonId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[PreferredFirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The first name the individual prefers, if different from their legal first name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'PreferredFirstName';


GO
PRINT N'Creating Extended Property [edfi].[Student].[PreferredLastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The last name the individual prefers, if different from their legal last name', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'PreferredLastSurname';


GO
PRINT N'Creating Extended Property [edfi].[Student].[SourceSystemDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the originating record source system for the person.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'SourceSystemDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Student].[StudentUniqueId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Student', @level2type = N'COLUMN', @level2name = N'StudentUniqueId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This educational entity represents the cumulative record of academic achievement for a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[TermDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The term for the session during the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'TermDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeAttemptedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeAttemptedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeAttemptedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeAttemptedCredits';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeAttemptedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeAttemptedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeEarnedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeEarnedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeEarnedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeEarnedCredits';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[CumulativeEarnedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'CumulativeEarnedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[ProjectedGraduationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month and year the student is projected to graduate.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'ProjectedGraduationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionAttemptedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionAttemptedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionAttemptedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionAttemptedCredits';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionAttemptedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionAttemptedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionEarnedCreditConversion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionEarnedCreditConversion';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionEarnedCredits].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The value of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionEarnedCredits';


GO
PRINT N'Creating Extended Property [edfi].[StudentAcademicRecord].[SessionEarnedCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of credits or units of value awarded for the completion of a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecord', @level2type = N'COLUMN', @level2name = N'SessionEarnedCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the analysis or scoring of a student''s response on an assessment. The analysis results in a value that represents a student''s performance on a set of items on a test.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[StudentAssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment administered to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'StudentAssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AdministrationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time an assessment was completed by the student. The use of ISO-8601 formats with a timezone designator (UTC or time offset) is recommended in order to prevent ambiguity due to time zones.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AdministrationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AdministrationEndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date and time an assessment administration ended.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AdministrationEndDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AdministrationEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The environment in which the test was administered.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AdministrationEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AdministrationLanguageDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The language in which an assessment is written and/or administered.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AdministrationLanguageDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[AssessedMinutes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Reported time student was assessed in minutes.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'AssessedMinutes';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[EventCircumstanceDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'EventCircumstanceDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[EventDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Describes special events that occur before during or after the assessment session that may impact use of results.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'EventDescription';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[PlatformTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The platform with which the assessment was delivered to the student during the assessment session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'PlatformTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[ReasonNotTestedDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary reason student is not tested.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'ReasonNotTestedDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[ReportedSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'ReportedSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[ReportedSchoolIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A reported school identifier for the school the enrollment at the time of the assessment used when the assigned SchoolId is not known by the assessment vendor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'ReportedSchoolIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[RetestIndicatorDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator if the test was a retake.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'RetestIndicatorDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year for which the assessment was administered to a student. Among other uses, handles cases in which a student takes a prior-year exam in a subsequent school year during an exam re-test.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[SerialNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique number for the assessment form or answer document.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'SerialNumber';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessment].[WhenAssessedGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The grade level of a student when assessed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessment', @level2type = N'COLUMN', @level2name = N'WhenAssessedGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The association of individual StudentAssessments with EducationOrganizations indicating administration, enrollment, or attribution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[EducationOrganizationAssociationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of association being represented.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationAssociationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[StudentAssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment administered to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'StudentAssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentEducationOrganizationAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year associated with the association..', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association represents the cohort(s) for which a student is designated.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the student was first identified as part of the cohort.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[CohortIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or ID for the cohort.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation', @level2type = N'COLUMN', @level2name = N'CohortIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentCohortAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the student was removed as part of the cohort.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity represents the competency assessed or evaluated for the student against a specific competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[GradingPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'GradingPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[GradingPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school''s descriptive name of the grading period.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'GradingPeriodName';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[GradingPeriodSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'GradingPeriodSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[GradingPeriodSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the grading period school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'GradingPeriodSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[ObjectiveEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[Objective].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The designated title of the competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'Objective';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[ObjectiveGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The grade level for which the competency objective is targeted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'ObjectiveGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[CompetencyLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The competency level assessed for the student for the referenced competency objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'CompetencyLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentCompetencyObjective].[DiagnosticStatement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjective', @level2type = N'COLUMN', @level2name = N'DiagnosticStatement';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association relates students to their parents, guardians, or caretakers.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[ContactUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'ContactUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[ContactPriority].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The numeric order of the preferred sequence or priority of contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'ContactPriority';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[ContactRestrictions].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'ContactRestrictions';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[EmergencyContactStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the person is a designated emergency contact for the student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'EmergencyContactStatus';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[LegalGuardian].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the person is a legal guardian for the student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'LegalGuardian';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[LivesWith].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the student lives with the associated contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'LivesWith';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[PrimaryContactStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of whether the person is a primary contact for the student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'PrimaryContactStatus';


GO
PRINT N'Creating Extended Property [edfi].[StudentContactAssociation].[RelationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The nature of an individual''s relationship to a student, primarily used to capture family relationships.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentContactAssociation', @level2type = N'COLUMN', @level2name = N'RelationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association describes the behavior of students involved in a discipline incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[BehaviorDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Describes behavior by category.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation', @level2type = N'COLUMN', @level2name = N'BehaviorDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociation].[BehaviorDetailedDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Specifies a more granular level of detail of a behavior involved in the incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociation', @level2type = N'COLUMN', @level2name = N'BehaviorDetailedDescription';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates those students who were involved and not perpetrators for a discipline incident.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentNonOffenderAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentNonOffenderAssociation', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentNonOffenderAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentNonOffenderAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentNonOffenderAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association represents student information as reported in the context of the student''s relationship to the education organization. Enrollment relationship semantics are covered by StudentSchoolAssociation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[BarrierToInternetAccessInResidenceDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the barrier to having internet access in the student’s primary place of residence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'BarrierToInternetAccessInResidenceDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[GenderIdentity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The student''s gender as last reported to the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'GenderIdentity';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[HispanicLatinoEthnicity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'HispanicLatinoEthnicity';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[InternetAccessInResidence].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether the student is able to access the internet in their primary place of residence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'InternetAccessInResidence';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[InternetAccessTypeInResidenceDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary type of internet service used in the student’s primary place of residence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'InternetAccessTypeInResidenceDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[InternetPerformanceInResidenceDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether the student can complete the full range of learning activities, including video streaming and assignment upload, without interruptions caused by poor internet performance in their primary place of residence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'InternetPerformanceInResidenceDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[LimitedEnglishProficiencyDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'LimitedEnglishProficiencyDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[LoginId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The login ID for the user; used for security access control interface.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'LoginId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[PrimaryLearningDeviceAccessDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether the primary learning device is shared or not shared with another individual.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'PrimaryLearningDeviceAccessDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[PrimaryLearningDeviceAwayFromSchoolDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of device the student uses most often to complete learning activities away from school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'PrimaryLearningDeviceAwayFromSchoolDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[PrimaryLearningDeviceProviderDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The provider of the primary learning device.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'PrimaryLearningDeviceProviderDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[ProfileThumbnail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Locator reference for the student photo. The specification for that reference is left to local definition.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'ProfileThumbnail';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[SexDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The student''s birth sex as reported to the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'SexDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssociation].[SupporterMilitaryConnectionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Military connection of the person/people whom the student is a dependent of.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociation', @level2type = N'COLUMN', @level2name = N'SupporterMilitaryConnectionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates a relationship between a student and an education organization other than an enrollment relationship, and generally indicating some kind of responsibility of the education organization for the student. Enrollment relationship semantics are covered by StudentSchoolAssociation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the start date of an education organization''s responsibility for a student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[ResponsibilityDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indications of an education organization''s responsibility for a student, such as accountability, attendance, funding, etc.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation', @level2type = N'COLUMN', @level2name = N'ResponsibilityDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationResponsibilityAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the end date of an education organization''s responsibility for a student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationResponsibilityAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity holds a student''s grade or competency level for a gradebook entry.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[GradebookEntryIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to a gradebook entry by the source system.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'GradebookEntryIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace URI for the source of the gradebook entry.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[AssignmentLateStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Status of whether the assignment was submitted after the due date and/or marked as.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'AssignmentLateStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[CompetencyLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The competency level assessed for the student for the referenced learning objective.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'CompetencyLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[DateFulfilled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date an assignment was turned in or the date of an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'DateFulfilled';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[DiagnosticStatement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'DiagnosticStatement';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[LetterGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'LetterGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[NumericGradeEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'NumericGradeEarned';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[PointsEarned].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The points earned for the submission. With extra credit, the points earned may exceed the max points.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'PointsEarned';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[SubmissionStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The status of the student''s submission.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'SubmissionStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentGradebookEntry].[TimeFulfilled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time an assignment was turned in on the date fulfilled.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentGradebookEntry', @level2type = N'COLUMN', @level2name = N'TimeFulfilled';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity stores the student health records.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[AsOfDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date of last update of the student''s health record.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth', @level2type = N'COLUMN', @level2name = N'AsOfDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[NonMedicalImmunizationExemptionDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The year, month and day of the nonmedical exemption from vaccination claimed by the student''s parent or guardian.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth', @level2type = N'COLUMN', @level2name = N'NonMedicalImmunizationExemptionDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentHealth].[NonMedicalImmunizationExemptionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of nonmedical exemption from vaccination claimed by the student''s parent or guardian.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHealth', @level2type = N'COLUMN', @level2name = N'NonMedicalImmunizationExemptionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the students participating in an intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[InterventionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'InterventionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[CohortIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name or ID for the cohort.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'CohortIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[CohortEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'CohortEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[DiagnosticStatement].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'DiagnosticStatement';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAssociation].[Dosage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration of time in minutes for which the student was assigned to participate in the intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAssociation', @level2type = N'COLUMN', @level2name = N'Dosage';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the recording of whether a student is in attendance for an intervention service.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[AttendanceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date for this attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[InterventionIdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an intervention.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'InterventionIdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[AttendanceEventReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reported reason for a student''s absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventReason';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[EventDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount of time in days for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentInterventionAttendanceEvent].[InterventionDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration in minutes of the intervention attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentInterventionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'InterventionDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the recording of whether a student is in attendance to receive or participate in program services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[AttendanceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date for this attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[AttendanceEventReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reported reason for a student''s absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventReason';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[EventDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount of time in days for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramAttendanceEvent].[ProgramAttendanceDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration in minutes of the program attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ProgramAttendanceDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The evaluation results for a student as evaluated in the context of a program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[EvaluationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the evaluation was conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'EvaluationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramEvaluationPeriodDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the period for the program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationPeriodDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramEvaluationTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An assigned unique identifier for the student program evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTitle';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program evaluation conducted.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[EvaluationDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The actual number of minutes to conduct the evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'EvaluationDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[StaffEvaluatorStaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'StaffEvaluatorStaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[SummaryEvaluationComment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Any comments about the summary evaluation to be captured.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'SummaryEvaluationComment';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[SummaryEvaluationNumericRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The numerical summary rating or score for the evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'SummaryEvaluationNumericRating';


GO
PRINT N'Creating Extended Property [edfi].[StudentProgramEvaluation].[SummaryEvaluationRatingLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The summary rating level achieved based upon the rating or score.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramEvaluation', @level2type = N'COLUMN', @level2name = N'SummaryEvaluationRatingLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association represents the school in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EntryDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student''s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EntryDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[CalendarCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'CalendarCode';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[ClassOfSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Projected high school graduation year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'ClassOfSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EmployedWhileEnrolled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EmployedWhileEnrolled';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EnrollmentTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of enrollment reflected by the StudentSchoolAssociation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EnrollmentTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EntryGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EntryGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EntryGradeLevelReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EntryGradeLevelReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[EntryTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The process by which a student enters a school during a given academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'EntryTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[ExitWithdrawDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The recorded exit or withdraw date for the student.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'ExitWithdrawDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[ExitWithdrawTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The circumstances under which the student exited from membership in an educational institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'ExitWithdrawTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[FullTimeEquivalency].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The full-time equivalent ratio for the student’s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'FullTimeEquivalency';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[GraduationPlanTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of academic plan the student is following for graduation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'GraduationPlanTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[GraduationSchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year the student is expected to graduate.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'GraduationSchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[NextYearGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The anticipated grade level for the student for the next school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'NextYearGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[NextYearSchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'NextYearSchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[PrimarySchool].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if a given enrollment record should be considered the primary record for a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'PrimarySchool';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[RepeatGradeIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'RepeatGradeIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[ResidencyStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'ResidencyStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[SchoolChoice].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether the student enrolled in this school under the provisions for public school choice', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolChoice';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[SchoolChoiceBasisDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The legal basis for the school choice enrollment according to local, state or federal policy or regulation. (The descriptor provides the list of available bases specific to the state', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolChoiceBasisDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[SchoolChoiceTransfer].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolChoiceTransfer';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year associated with the student''s enrollment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAssociation].[TermCompletionIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Idicates whether or not a student completed the most recent school term.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociation', @level2type = N'COLUMN', @level2name = N'TermCompletionIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the recording of whether a student is in attendance for a school day.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[AttendanceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date for this attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[ArrivalTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time of day the student arrived for the attendance event in ISO 8601 format.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ArrivalTime';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[AttendanceEventReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reported reason for a student''s absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventReason';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[DepartureTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time of day the student departed for the attendance event in ISO 8601 format.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'DepartureTime';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[EventDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount of time in days for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentSchoolAttendanceEvent].[SchoolAttendanceDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration in minutes of the school attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SchoolAttendanceDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association indicates the course sections to which a student is assigned.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[AttemptStatusDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication of the student''s completion status for the section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'AttemptStatusDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[DualCreditEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'DualCreditEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[DualCreditIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the student assigned to the section is to receive dual credit upon successful completion.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'DualCreditIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[DualCreditInstitutionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Descriptor for the postsecondary institution offering college credit. This descriptor may be used to select a postsecondary institution that is not defined as an education organization, and/or select a general type of postsecondary institution.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'DualCreditInstitutionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[DualCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'For a student taking a dual credit course in a college or high school setting, indicates the type of dual credit program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'DualCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[DualHighSchoolCreditIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether successful completion of the course will result in credits toward high school graduation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'DualHighSchoolCreditIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the withdrawal or exit of the student from the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[HomeroomIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the section is the student''s homeroom. Homeroom period may the convention for taking daily attendance.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'HomeroomIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[RepeatIdentifierDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An indication as to whether a student has previously taken a given course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'RepeatIdentifierDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAssociation].[TeacherStudentDataLinkExclusion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'TeacherStudentDataLinkExclusion';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This event entity represents the recording of whether a student is in attendance for a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[AttendanceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[EventDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date for this attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[ArrivalTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time of day the student arrived for the attendance event in ISO 8601 format.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'ArrivalTime';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[AttendanceEventReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reported reason for a student''s absence.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'AttendanceEventReason';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[DepartureTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The time of day the student departed for the attendance event in ISO 8601 format.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'DepartureTime';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[EducationalEnvironmentDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EducationalEnvironmentDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[EventDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount of time in days for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'EventDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentSectionAttendanceEvent].[SectionAttendanceDuration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The duration in minutes of the section attendance event.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEvent', @level2type = N'COLUMN', @level2name = N'SectionAttendanceDuration';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association represents the special education program(s) that a student participates in or receives services from. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for special education programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[IdeaEligibility].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'IdeaEligibility';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[IEPBeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The effective date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'IEPBeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[IEPEndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The end date of the most recent IEP.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'IEPEndDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[IEPReviewDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the last IEP review.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'IEPReviewDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[LastEvaluationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of the last special education evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'LastEvaluationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[MedicallyFragile].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'MedicallyFragile';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[MultiplyDisabled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether the student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'MultiplyDisabled';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[ReductionInHoursPerWeekComparedToPeers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Records the number of hours reduced for the shortened school day for the IEP student as compared to peers in regular education.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'ReductionInHoursPerWeekComparedToPeers';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SchoolHoursPerWeek].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicate the total number of hours of instructional time per week for the school that the student attends.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SchoolHoursPerWeek';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[ShortenedSchoolDayIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicator that the student''s IEP requires a shortened school day.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'ShortenedSchoolDayIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SpecialEducationExitDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The  month, day and year on which a person stops receiving special education services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SpecialEducationExitDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SpecialEducationExitExplained].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Explanation on why a person stops receiving special education services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SpecialEducationExitExplained';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SpecialEducationExitReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reason why a person stops receiving special education services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SpecialEducationExitReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SpecialEducationHoursPerWeek].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The number of hours per week for special education instruction and therapy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SpecialEducationHoursPerWeek';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramAssociation].[SpecialEducationSettingDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The major instructional setting (more than 50 percent of a student''s special education program).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'SpecialEducationSettingDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Captures details regarding the evaluation process for eligibility of students for special education services under IDEA Part C or Part B.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[ConsentToEvaluationReceivedDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the date on which the local education agency received written consent for the evaluation from the student''s parent or guardian. This is the first day of the evaluation timeframe.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'ConsentToEvaluationReceivedDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[ConsentToEvaluationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date on which the student''s parent gave a consent (Parent Consent Date).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'ConsentToEvaluationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EligibilityConferenceDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year when the eligibility conference is held between the parent(s)/guardian(s) and the educational organization responsible staff member(s) to review and make decision on special education related services eligibility.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EligibilityConferenceDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EligibilityDelayReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The reason why the eligibility determination was completed beyond the required timeframe.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EligibilityDelayReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EligibilityDeterminationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the month, day, and year the local education agency (LEA) held the admission, review, and dismissal committee meeting regarding the child''s eligibility determination for special education and related services. An individualized education plan (IEP) would be developed and implemented for a child admitted into special education on this same date.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EligibilityDeterminationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EligibilityEvaluationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the month, day, and year when the written individual evaluation report was completed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EligibilityEvaluationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EligibilityEvaluationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if this is an initial evaluation or a reevaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EligibilityEvaluationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EvaluationCompleteIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the evaluation completed status.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EvaluationCompleteIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EvaluationDelayDays].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the number of student absences, if any, beginning the first instructional day following the date on which the local education agency (LEA) received written parental or guardian consent for the evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EvaluationDelayDays';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EvaluationDelayReasonDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Refers to the justification as to why the evaluation report was completed beyond the state-established timeframe. This descriptor field will have allowed reasons as descriptor values.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EvaluationDelayReasonDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[EvaluationLateReason].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Refers to additional information for delay in doing the evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'EvaluationLateReason';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[IDEAIndicator].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether or not the student was determined eligible as a result of an evaluation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'IDEAIndicator';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[IDEAPartDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates if the evaluation is done under Part B IDEA or Part C IDEA.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'IDEAPartDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[OriginalECIServicesDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, date, and year when an infant or toddler, from birth through age 2, began participating in the early childhood intervention (ECI) program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'OriginalECIServicesDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[TransitionConferenceDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the month, day, and year when the transition conference was held (for a child receiving early childhood intervention (ECI) services) among the lead agency, the family, and the local education agency (LEA) where the child resides to discuss the child''s potential eligibility for early childhood special education (ECSE) services.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'TransitionConferenceDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSpecialEducationProgramEligibilityAssociation].[TransitionNotificationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the month, day, and year the LEA Notification of Potentially Eligible for Special Education Services was sent by the early childhood intervention (ECI) contractor to the local education agency (LEA) to notify them that a child enrolled in ECI will shortly reach the age of eligibility for Part B services and the child is potentially eligible for services under Part B, early childhood special education (ECSE). The LEA Notification constitutes a referral to the LEA for an initial evaluation and eligibility determination of the child which the parent or guardian may opt out from the referral.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramEligibilityAssociation', @level2type = N'COLUMN', @level2name = N'TransitionNotificationDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This entity captures a student''s specific transportation arrangement.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[TransportationEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation', @level2type = N'COLUMN', @level2name = N'TransportationEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[SpecialAccomodationRequirements].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Specific requirements needed to accommodate a student''s physical needs which may include special equipment installed in a vehicle or a special arrangement for transportation.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation', @level2type = N'COLUMN', @level2name = N'SpecialAccomodationRequirements';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[TransportationPublicExpenseEligibilityTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The primary type of eligibility for transporting a student at public expense.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation', @level2type = N'COLUMN', @level2name = N'TransportationPublicExpenseEligibilityTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentTransportation].[TransportationTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The mode or type of transportation utilized by a student to commute to and from school', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTransportation', @level2type = N'COLUMN', @level2name = N'TransportationTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A survey to identified or anonymous respondents.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[NumberAdministered].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Number of persons to whom this survey was administered.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'NumberAdministered';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The school year associated with the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SurveyCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The category or type of survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SurveyCategoryDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Survey].[SurveyTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title of the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Survey', @level2type = N'COLUMN', @level2name = N'SurveyTitle';


GO
PRINT N'Creating Extended Property [edfi].[SurveyCourseAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The course associated with the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyCourseAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveyCourseAssociation].[CourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a course.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyCourseAssociation', @level2type = N'COLUMN', @level2name = N'CourseCode';


GO
PRINT N'Creating Extended Property [edfi].[SurveyCourseAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyCourseAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[SurveyCourseAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyCourseAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyCourseAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyCourseAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The program associated with the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[SurveyProgramAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyProgramAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The questions for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[QuestionCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifying code for the question, unique for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'QuestionCode';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[QuestionFormDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The form or type of question.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'QuestionFormDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[QuestionText].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The text of the question.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'QuestionText';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestion].[SurveySectionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or label for the survey section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestion', @level2type = N'COLUMN', @level2name = N'SurveySectionTitle';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The response to a survey question.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[QuestionCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifying code for the question, unique for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'QuestionCode';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[Comment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Additional information provided by the responder about the question in the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'Comment';


GO
PRINT N'Creating Extended Property [edfi].[SurveyQuestionResponse].[NoResponse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates there was no response to the question.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyQuestionResponse', @level2type = N'COLUMN', @level2name = N'NoResponse';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Responses to a Survey for named or anonymous persons.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[ContactUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'ContactUSI';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[ElectronicMailAddress].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Email address of the respondent.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'ElectronicMailAddress';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[FullName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Full name of the respondent.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'FullName';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[Location].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Location of the respondent, often a city, district, or school.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'Location';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[ResponseDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date of the survey response.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'ResponseDate';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[ResponseTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The amount of time in seconds it took for the respondent to complete the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'ResponseTime';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponse].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponse', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association provides information about the survey being taken and the education organization the survey is about.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseEducationOrganizationTargetAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseEducationOrganizationTargetAssociation].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseStaffTargetAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The association provides information about the survey being taken and who the survey is about.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseStaffTargetAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseStaffTargetAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseStaffTargetAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseStaffTargetAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveyResponseStaffTargetAssociation].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveyResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySection].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The section of questions for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySection';


GO
PRINT N'Creating Extended Property [edfi].[SurveySection].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySection', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveySection].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySection', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySection].[SurveySectionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or label for the survey section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySection', @level2type = N'COLUMN', @level2name = N'SurveySectionTitle';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The section associated with the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[LocalCourseCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'LocalCourseCode';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[SchoolYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the school year.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'SchoolYear';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[SectionIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The local identifier assigned to a section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'SectionIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[SessionName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier for the calendar for the academic session.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'SessionName';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Optional information about the responses provided for a section of a survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[SurveySectionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or label for the survey section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse', @level2type = N'COLUMN', @level2name = N'SurveySectionTitle';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponse].[SectionRating].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric rating computed from the survey responses for the section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponse', @level2type = N'COLUMN', @level2name = N'SectionRating';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association provides information about the survey section and the education organization the survey section is about.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation].[SurveySectionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or label for the survey section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseEducationOrganizationTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveySectionTitle';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association provides information about the survey section and the staff the survey section is about.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the survey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[StaffUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a staff.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'StaffUSI';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[SurveyIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The unique survey identifier from the survey tool.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[SurveyResponseIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier of the survey typically from the survey application.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveyResponseIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[SurveySectionResponseStaffTargetAssociation].[SurveySectionTitle].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or label for the survey section.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'SurveySectionResponseStaffTargetAssociation', @level2type = N'COLUMN', @level2name = N'SurveySectionTitle';


GO
PRINT N'Altering Extended Property [edfi].[AssessmentContentStandard].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The beginning of the period during which this learning standard document is intended for use.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentContentStandard', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[AssessmentContentStandard].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The end of the period during which this learning standard document is intended for use.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentContentStandard', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[AssessmentItemResultDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The analyzed result of a student''s response to an assessment item.. For example:
    Correct
    Incorrect
    Met standard
    ...', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentItemResultDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[AssessmentPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[AssessmentPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[AttendanceEventCategoryDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This descriptor holds the category of the attendance event (e.g., tardy).', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AttendanceEventCategoryDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[ContactAddressPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ContactAddressPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[ContactAddressPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ContactAddressPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[ContactInternationalAddress].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ContactInternationalAddress', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[ContactInternationalAddress].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ContactInternationalAddress', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[ContinuationOfServicesReasonDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ContinuationOfServicesReasonDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationAddressPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationAddressPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationAddressPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationAddressPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationIndicatorPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationIndicatorPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationIndicatorPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationIndicatorPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationInternationalAddress].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInternationalAddress', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[EducationOrganizationInternationalAddress].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'EducationOrganizationInternationalAddress', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociationProgramParticipationStatus', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus].[StatusBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date the student''s program participation status began.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociationProgramParticipationStatus', @level2type = N'COLUMN', @level2name = N'StatusBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus].[StatusEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date the student''s program participation status ended.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GeneralStudentProgramAssociationProgramParticipationStatus', @level2type = N'COLUMN', @level2name = N'StatusEndDate';


GO
PRINT N'Altering Extended Property [edfi].[GradeLearningStandardGrade].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradeLearningStandardGrade', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[GradeLevelDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the set of grade levels.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradeLevelDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[GradingPeriodDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the state''s name of the period for which grades are reported.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'GradingPeriodDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[LearningStandardContentStandard].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The beginning of the period during which this learning standard document is intended for use.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardContentStandard', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[LearningStandardContentStandard].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The end of the period during which this learning standard document is intended for use.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LearningStandardContentStandard', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[LimitedEnglishProficiencyDescriptor].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'LimitedEnglishProficiencyDescriptor';


GO
PRINT N'Altering Extended Property [edfi].[ReportCardGrade].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'ReportCardGrade', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffAddressPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAddressPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffAddressPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffAddressPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociationAddressPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffEducationOrganizationContactAssociationAddressPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffEducationOrganizationContactAssociationAddressPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffInternationalAddress].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffInternationalAddress', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffInternationalAddress].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffInternationalAddress', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffRecognition].[RecognitionAwardDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffRecognition', @level2type = N'COLUMN', @level2name = N'RecognitionAwardDate';


GO
PRINT N'Altering Extended Property [edfi].[StaffRecognition].[RecognitionAwardExpiresDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StaffRecognition', @level2type = N'COLUMN', @level2name = N'RecognitionAwardExpiresDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordAcademicHonor].[HonorAwardDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date the honor was awarded.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordAcademicHonor', @level2type = N'COLUMN', @level2name = N'HonorAwardDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordAcademicHonor].[HonorAwardExpiresDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Date on which the honor expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordAcademicHonor', @level2type = N'COLUMN', @level2name = N'HonorAwardExpiresDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordDiploma].[DiplomaAwardDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the student met  graduation requirements and was awarded a diploma.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordDiploma', @level2type = N'COLUMN', @level2name = N'DiplomaAwardDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordDiploma].[DiplomaAwardExpiresDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Date on which the diploma expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordDiploma', @level2type = N'COLUMN', @level2name = N'DiplomaAwardExpiresDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordRecognition].[RecognitionAwardDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date the recognition was awarded or earned.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordRecognition', @level2type = N'COLUMN', @level2name = N'RecognitionAwardDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAcademicRecordRecognition].[RecognitionAwardExpiresDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Date on which the recognition expires.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAcademicRecordRecognition', @level2type = N'COLUMN', @level2name = N'RecognitionAwardExpiresDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAssessmentItem].[TimeAssessed].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The overall time that a student actually spent on the assessment item expressed in minutes.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentItem', @level2type = N'COLUMN', @level2name = N'TimeAssessed';


GO
PRINT N'Altering Extended Property [edfi].[StudentAssessmentPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentAssessmentPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the assessment is to be administered.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCohortAssociationSection].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the student was first identified as part of the cohort.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCohortAssociationSection', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjectiveGeneralStudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCompetencyObjectiveStudentSectionAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCompetencyObjectiveStudentSectionAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCTEProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCTEProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCTEProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the career and technical education (CTE) program that a student participates in. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for CTE programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCTEProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentCTEProgramAssociationCTEProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCTEProgramAssociationCTEProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCTEProgramAssociationCTEProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCTEProgramAssociationCTEProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentCTEProgramAssociationCTEProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentCTEProgramAssociationCTEProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationAddressPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationAddressPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationAddressPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationAddressPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationDisplacedStudent].[DisplacedStudentEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date marking the end of the period during which a student is considered displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationDisplacedStudent', @level2type = N'COLUMN', @level2name = N'DisplacedStudentEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationDisplacedStudent].[DisplacedStudentStartDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The date on which a student is officially identified as displaced due to a crisis event.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationDisplacedStudent', @level2type = N'COLUMN', @level2name = N'DisplacedStudentStartDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationInternationalAddress].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The first date the address is valid. For physical addresses, the date the individual moved to that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationInternationalAddress', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationInternationalAddress].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The last date the address is valid. For physical addresses, the date the individual moved from that address.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationInternationalAddress', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationStudentCharacteristicPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationStudentCharacteristicPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationStudentCharacteristicPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationStudentIndicatorPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentEducationOrganizationAssociationStudentIndicatorPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssociationStudentIndicatorPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentHomelessProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHomelessProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentHomelessProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the McKinney-Vento Homeless Program program(s) that a student participates in or from which the student receives services. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for homeless programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHomelessProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentHomelessProgramAssociationHomelessProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHomelessProgramAssociationHomelessProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentHomelessProgramAssociationHomelessProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHomelessProgramAssociationHomelessProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentHomelessProgramAssociationHomelessProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentHomelessProgramAssociationHomelessProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the Title III Language Instruction for Limited English Proficient and Immigrant Students program(s) that a student participates in or from which the student receives services. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for language instruction programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentLanguageInstructionProgramAssociationLanguageInstructionProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentMigrantEducationProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentMigrantEducationProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentMigrantEducationProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the migrant education program(s) that a student participates in or receives services from. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for migrant education programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentMigrantEducationProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentMigrantEducationProgramAssociationMigrantEducationProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentMigrantEducationProgramAssociationMigrantEducationProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentMigrantEducationProgramAssociationMigrantEducationProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentMigrantEducationProgramAssociationMigrantEducationProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentNeglectedOrDelinquentProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentNeglectedOrDelinquentProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentNeglectedOrDelinquentProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the Title I Part D Neglected or Delinquent program(s) that a student participates in or from which the student receives services. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for Title I Part D Neglected or Delinquent programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentNeglectedOrDelinquentProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentNeglectedOrDelinquentProgramAssociationNeglectedOrDelinquentProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentProgramAssociationService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAssociationService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentProgramAssociationService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAssociationService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentProgramAssociationService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentProgramAssociationService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolAssociationAlternativeGraduationPlan].[EntryDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student''s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociationAlternativeGraduationPlan', @level2type = N'COLUMN', @level2name = N'EntryDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolAssociationEducationPlan].[EntryDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student''s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolAssociationEducationPlan', @level2type = N'COLUMN', @level2name = N'EntryDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolFoodServiceProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolFoodServiceProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolFoodServiceProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the school food services program(s), such as the Free or Reduced Lunch program, that a student participates in or from which the student receives services. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for school food service programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolFoodServiceProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSchoolFoodServiceProgramAssociationSchoolFoodServiceProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSectionAssociationProgram].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Month, day, and year of the student''s entry or assignment to the section.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAssociationProgram', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSectionAttendanceEventClassPeriod].[AttendanceEventCategoryDescriptorId].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSectionAttendanceEventClassPeriod', @level2type = N'COLUMN', @level2name = N'AttendanceEventCategoryDescriptorId';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationDisability].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationDisability', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationDisabilityDesignation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationDisabilityDesignation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationServiceProvider].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationSpecialEducationProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationSpecialEducationProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationSpecialEducationProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentTitleIPartAProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTitleIPartAProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentTitleIPartAProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'This association represents the Title I Part A program(s) that a student participates in or from which the student receives services. The association is a subclass of the GeneralStudentProgramAssociation specifically designed for Title I Part A programs.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTitleIPartAProgramAssociation';


GO
PRINT N'Altering Extended Property [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTitleIPartAProgramAssociationTitleIPartAProgramService', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService].[ServiceBeginDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'First date the Student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTitleIPartAProgramAssociationTitleIPartAProgramService', @level2type = N'COLUMN', @level2name = N'ServiceBeginDate';


GO
PRINT N'Altering Extended Property [edfi].[StudentTitleIPartAProgramAssociationTitleIPartAProgramService].[ServiceEndDate].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'Last date the Student was in this option for the current school year.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentTitleIPartAProgramAssociationTitleIPartAProgramService', @level2type = N'COLUMN', @level2name = N'ServiceEndDate';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The anticipated administration of an assessment under the purview of an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministration';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministration].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministration', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministration].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministration', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministration].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministration', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministration].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministration', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A reference to the parts of the assessment battery that are offered in this administration of the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationAssessmentBatteryPart].[AssessmentBatteryPartName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the part of an assessment battery.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationAssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AssessmentBatteryPartName';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies the point of contact for the administration of an assessment under the purview of an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipation].[ParticipatingEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipation', @level2type = N'COLUMN', @level2name = N'ParticipatingEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Pre-identified contacts for education organizations administering the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[ParticipatingEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'ParticipatingEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[ElectronicMailAddress].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The email address for the contact.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'ElectronicMailAddress';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The contact''s first name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[LastSurname].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The contact''s last name.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'LastSurname';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact].[LoginId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The login ID for the user; used for security access control interface.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationParticipationAdministrationPointOfContact', @level2type = N'COLUMN', @level2name = N'LoginId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The anticipated dates for the assessment or administration window.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the start of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentAdministrationPeriod].[EndDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year for the end of the period.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentAdministrationPeriod', @level2type = N'COLUMN', @level2name = N'EndDate';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPart].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The parts organized for administering an assessessment which together provide a comprehensive assessment of the students.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPart';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPart].[AssessmentBatteryPartName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the part of an assessment battery.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AssessmentBatteryPartName';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPart].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPart].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPart', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPartObjectiveAssessment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A reference to the objective assessment(s) that are administered by the assessment battery part.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPartObjectiveAssessment';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPartObjectiveAssessment].[AssessmentBatteryPartName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the part of an assessment battery.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPartObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'AssessmentBatteryPartName';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPartObjectiveAssessment].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPartObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPartObjectiveAssessment].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPartObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[AssessmentBatteryPartObjectiveAssessment].[IdentificationCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an objective assessment by a school, school system, a state, or other agency or entity.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'AssessmentBatteryPartObjectiveAssessment', @level2type = N'COLUMN', @level2name = N'IdentificationCode';


GO
PRINT N'Creating Extended Property [edfi].[DualCreditInstitutionDescriptor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Custom descriptor of college institutions or categories of institutions participating in the dual credit program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DualCreditInstitutionDescriptor';


GO
PRINT N'Creating Extended Property [edfi].[DualCreditInstitutionDescriptor].[DualCreditInstitutionDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DualCreditInstitutionDescriptor', @level2type = N'COLUMN', @level2name = N'DualCreditInstitutionDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[DualCreditTypeDescriptor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates the type of the dual credit program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DualCreditTypeDescriptor';


GO
PRINT N'Creating Extended Property [edfi].[DualCreditTypeDescriptor].[DualCreditTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'DualCreditTypeDescriptor', @level2type = N'COLUMN', @level2name = N'DualCreditTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[Section504DisabilityDescriptor].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This descriptor defines the reason(s) why student qualifies for Section 504 consideration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section504DisabilityDescriptor';


GO
PRINT N'Creating Extended Property [edfi].[Section504DisabilityDescriptor].[Section504DisabilityDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'Section504DisabilityDescriptor', @level2type = N'COLUMN', @level2name = N'Section504DisabilityDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies an assessment registration that a student is expected to participate in including the testing organization, reporting organization and assessment delivery details.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[AssessmentGradeLevelDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The grade level or primary instructional level at which the student is to be assessed.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'AssessmentGradeLevelDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[EntryDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which an individual enters and begins to receive instructional services in a school for each school year. The EntryDate value should be the date the student enrolled, or when the student''s enrollment materially changed, such as with a grade promotion.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'EntryDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[PlatformTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The environment or format in which the assessment is expected to be administered.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'PlatformTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[ReportingEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'ReportingEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[ScheduledEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'ScheduledEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[ScheduledStudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'ScheduledStudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistration].[TestingEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistration', @level2type = N'COLUMN', @level2name = N'TestingEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentAccommodation].[AccommodationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'AccommodationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Key/value pairs which may be used to facilitate customization of an assessment or to support vendor reporting/analysis.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[CustomizationKey].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'An agreed upon identifier for the custom information.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'CustomizationKey';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationAssessmentCustomization].[CustomizationValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Custom value for the indicated CustomizationKey.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationAssessmentCustomization', @level2type = N'COLUMN', @level2name = N'CustomizationValue';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The association to the part(s) of the assessment battery that the student is to be tested for this administration of the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[AssessmentBatteryPartName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the part of an assessment battery.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'AssessmentBatteryPartName';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used for the specific part of the assessment battery on how is presented, how it is administered, or how the test taker is allowed to respond.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[AdministrationIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The title or name of the assessment in the context of its administration.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'AdministrationIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[AssessmentBatteryPartName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The name of the part of an assessment battery.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'AssessmentBatteryPartName';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[AssessmentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique number or alphanumeric code assigned to an assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'AssessmentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[AssigningEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'AssigningEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[Namespace].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Namespace for the assessment.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'Namespace';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation].[AccommodationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used for the specific part of the assessment battery on how is presented, how it is administered, or how the test taker is allowed to respond.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentAssessmentRegistrationBatteryPartAssociationAccommodation', @level2type = N'COLUMN', @level2name = N'AccommodationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies the type(s) of weapon used by the student during a discipline incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[BehaviorDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Describes behavior by category.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon', @level2type = N'COLUMN', @level2name = N'BehaviorDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[IncidentIdentifier].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire discipline incident even if it included multiple offenses and multiple offenders.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon', @level2type = N'COLUMN', @level2name = N'IncidentIdentifier';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[SchoolId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to a school. It must be distinct from any other identifier assigned to educational organizations, such as a LocalEducationAgencyId, to prevent duplication.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon', @level2type = N'COLUMN', @level2name = N'SchoolId';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon].[WeaponDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Identifies the type(s) of weapon used by the student during a discipline incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentDisciplineIncidentBehaviorAssociationWeapon', @level2type = N'COLUMN', @level2name = N'WeaponDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The accommodation(s) required or expected for administering assessments as determined by the education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodation';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation].[AccommodationDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The special variation(s) to be used in how assessments (in general) are presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation', @level2type = N'COLUMN', @level2name = N'AccommodationDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This association identifies student that qualifies for the Section 504 of the Rehabilitation Act of 1973.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[BeginDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The earliest date the student is involved with the program. Typically, this is the date the student becomes eligible for the program.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'BeginDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[EducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'EducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[ProgramEducationOrganizationId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier assigned to an education organization.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramEducationOrganizationId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[ProgramName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramName';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[ProgramTypeDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The type of program.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'ProgramTypeDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[StudentUSI].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A unique alphanumeric code assigned to a student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'StudentUSI';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[AccommodationPlan].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether student has a Section 504 accommodation plan.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'AccommodationPlan';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[Section504DisabilityDescriptorId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Defines one or more disabilities student has that qualifies them for a Section 504 plan.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'Section504DisabilityDescriptorId';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[Section504Eligibility].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates whether student has a disability, either temporary or permenant, that qualifies student for Section 504 consideration. Selection of FALSE for this boolean is equivalent to marking student as ''Did Not Qualify''.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'Section504Eligibility';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[Section504EligibilityDecisionDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the Section 504 eligibility decision is made.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'Section504EligibilityDecisionDate';


GO
PRINT N'Creating Extended Property [edfi].[StudentSection504ProgramAssociation].[Section504MeetingDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The month, day, and year on which the meeting with student''s parent/guardian held to discuss the 504 eligibility of the student.', @level0type = N'SCHEMA', @level0name = N'edfi', @level1type = N'TABLE', @level1name = N'StudentSection504ProgramAssociation', @level2type = N'COLUMN', @level2name = N'Section504MeetingDate';


GO
PRINT N'Refreshing Procedure [edfi].[SetCurrentSchoolYear]...';


GO
EXECUTE sp_refreshsqlmodule N'[edfi].[SetCurrentSchoolYear]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
ALTER TABLE [edfi].[AcademicWeek] WITH CHECK CHECK CONSTRAINT [FK_AcademicWeek_School];

ALTER TABLE [edfi].[SessionAcademicWeek] WITH CHECK CHECK CONSTRAINT [FK_SessionAcademicWeek_AcademicWeek];

ALTER TABLE [edfi].[AccountabilityRating] WITH CHECK CHECK CONSTRAINT [FK_AccountabilityRating_EducationOrganization];

ALTER TABLE [edfi].[AccountabilityRating] WITH CHECK CHECK CONSTRAINT [FK_AccountabilityRating_SchoolYearType];

ALTER TABLE [edfi].[AssessmentSection] WITH CHECK CHECK CONSTRAINT [FK_AssessmentSection_Assessment];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_Assessment];

ALTER TABLE [edfi].[Assessment] WITH CHECK CHECK CONSTRAINT [FK_Assessment_AssessmentCategoryDescriptor];

ALTER TABLE [edfi].[Assessment] WITH CHECK CHECK CONSTRAINT [FK_Assessment_EducationOrganization];

ALTER TABLE [edfi].[AssessmentAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAcademicSubject_Assessment];

ALTER TABLE [edfi].[AssessmentAssessedGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAssessedGradeLevel_Assessment];

ALTER TABLE [edfi].[AssessmentContentStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentContentStandard_Assessment];

ALTER TABLE [edfi].[AssessmentIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_AssessmentIdentificationCode_Assessment];

ALTER TABLE [edfi].[AssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItem_Assessment];

ALTER TABLE [edfi].[ObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessment_Assessment];

ALTER TABLE [edfi].[AssessmentLanguage] WITH CHECK CHECK CONSTRAINT [FK_AssessmentLanguage_Assessment];

ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH CHECK CHECK CONSTRAINT [FK_AssessmentPerformanceLevel_Assessment];

ALTER TABLE [edfi].[AssessmentPeriod] WITH CHECK CHECK CONSTRAINT [FK_AssessmentPeriod_Assessment];

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanRequiredAssessment_Assessment];

ALTER TABLE [edfi].[AssessmentPlatformType] WITH CHECK CHECK CONSTRAINT [FK_AssessmentPlatformType_Assessment];

ALTER TABLE [edfi].[AssessmentProgram] WITH CHECK CHECK CONSTRAINT [FK_AssessmentProgram_Assessment];

ALTER TABLE [edfi].[AssessmentScore] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScore_Assessment];

ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_Assessment];

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentItem_AssessmentItem];

ALTER TABLE [edfi].[AssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItem_AssessmentItemCategoryDescriptor];

ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItemLearningStandard_AssessmentItem];

ALTER TABLE [edfi].[AssessmentItemPossibleResponse] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItemPossibleResponse_AssessmentItem];

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem];

ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_AssessmentScoreRangeLearningStandard];

ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_AssessmentReportingMethodDescriptor];

ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScoreRangeLearningStandard_ObjectiveAssessment];

ALTER TABLE [edfi].[BalanceSheetDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_BalanceSheetDimensionReportingTag_BalanceSheetDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_BalanceSheetDimension];

ALTER TABLE [edfi].[BellSchedule] WITH CHECK CHECK CONSTRAINT [FK_BellSchedule_School];

ALTER TABLE [edfi].[BellScheduleClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_BellScheduleClassPeriod_BellSchedule];

ALTER TABLE [edfi].[BellScheduleDate] WITH CHECK CHECK CONSTRAINT [FK_BellScheduleDate_BellSchedule];

ALTER TABLE [edfi].[BellScheduleGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_BellScheduleGradeLevel_BellSchedule];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_Calendar];

ALTER TABLE [edfi].[Calendar] WITH CHECK CHECK CONSTRAINT [FK_Calendar_CalendarTypeDescriptor];

ALTER TABLE [edfi].[Calendar] WITH CHECK CHECK CONSTRAINT [FK_Calendar_School];

ALTER TABLE [edfi].[Calendar] WITH CHECK CHECK CONSTRAINT [FK_Calendar_SchoolYearType];

ALTER TABLE [edfi].[CalendarDate] WITH CHECK CHECK CONSTRAINT [FK_CalendarDate_Calendar];

ALTER TABLE [edfi].[CalendarGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_CalendarGradeLevel_Calendar];

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociation_Calendar];

ALTER TABLE [edfi].[CalendarDateCalendarEvent] WITH CHECK CHECK CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarDate];

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK CHECK CONSTRAINT [FK_SectionAttendanceTakenEvent_CalendarDate];

ALTER TABLE [edfi].[LocalAccount] WITH CHECK CHECK CONSTRAINT [FK_LocalAccount_ChartOfAccount];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_AccountTypeDescriptor];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_EducationOrganization];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_FunctionDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_FundDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_ObjectDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_OperationalUnitDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_ProgramDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_ProjectDimension];

ALTER TABLE [edfi].[ChartOfAccount] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccount_SourceDimension];

ALTER TABLE [edfi].[ChartOfAccountReportingTag] WITH CHECK CHECK CONSTRAINT [FK_ChartOfAccountReportingTag_ChartOfAccount];

ALTER TABLE [edfi].[BellScheduleClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_BellScheduleClassPeriod_ClassPeriod];

ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_ClassPeriod];

ALTER TABLE [edfi].[ClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_ClassPeriod_School];

ALTER TABLE [edfi].[ClassPeriodMeetingTime] WITH CHECK CHECK CONSTRAINT [FK_ClassPeriodMeetingTime_ClassPeriod];

ALTER TABLE [edfi].[SectionClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_SectionClassPeriod_ClassPeriod];

ALTER TABLE [edfi].[StaffCohortAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffCohortAssociation_Cohort];

ALTER TABLE [edfi].[StudentCohortAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCohortAssociation_Cohort];

ALTER TABLE [edfi].[Cohort] WITH CHECK CHECK CONSTRAINT [FK_Cohort_AcademicSubjectDescriptor];

ALTER TABLE [edfi].[Cohort] WITH CHECK CHECK CONSTRAINT [FK_Cohort_CohortScopeDescriptor];

ALTER TABLE [edfi].[Cohort] WITH CHECK CHECK CONSTRAINT [FK_Cohort_CohortTypeDescriptor];

ALTER TABLE [edfi].[Cohort] WITH CHECK CHECK CONSTRAINT [FK_Cohort_EducationOrganization];

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAssociation_Cohort];

ALTER TABLE [edfi].[CohortProgram] WITH CHECK CHECK CONSTRAINT [FK_CohortProgram_Cohort];

ALTER TABLE [edfi].[CommunityProviderLicense] WITH CHECK CHECK CONSTRAINT [FK_CommunityProviderLicense_CommunityProvider];

ALTER TABLE [edfi].[CommunityProviderLicense] WITH CHECK CHECK CONSTRAINT [FK_CommunityProviderLicense_LicenseStatusDescriptor];

ALTER TABLE [edfi].[CommunityProviderLicense] WITH CHECK CHECK CONSTRAINT [FK_CommunityProviderLicense_LicenseTypeDescriptor];

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjective_CompetencyObjective];

ALTER TABLE [edfi].[CompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_CompetencyObjective_EducationOrganization];

ALTER TABLE [edfi].[CompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_CompetencyObjective_GradeLevelDescriptor];

ALTER TABLE [edfi].[ContactLanguage] WITH CHECK CHECK CONSTRAINT [FK_ContactLanguage_Contact];

ALTER TABLE [edfi].[ContactOtherName] WITH CHECK CHECK CONSTRAINT [FK_ContactOtherName_Contact];

ALTER TABLE [edfi].[ContactPersonalIdentificationDocument] WITH CHECK CHECK CONSTRAINT [FK_ContactPersonalIdentificationDocument_Contact];

ALTER TABLE [edfi].[SurveyResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponse_Contact];

ALTER TABLE [edfi].[ContactTelephone] WITH CHECK CHECK CONSTRAINT [FK_ContactTelephone_Contact];

ALTER TABLE [edfi].[StudentContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentContactAssociation_Contact];

ALTER TABLE [edfi].[Contact] WITH CHECK CHECK CONSTRAINT [FK_Contact_LevelOfEducationDescriptor];

ALTER TABLE [edfi].[Contact] WITH CHECK CHECK CONSTRAINT [FK_Contact_Person];

ALTER TABLE [edfi].[Contact] WITH CHECK CHECK CONSTRAINT [FK_Contact_SexDescriptor];

ALTER TABLE [edfi].[ContactAddress] WITH CHECK CHECK CONSTRAINT [FK_ContactAddress_Contact];

ALTER TABLE [edfi].[ContactElectronicMail] WITH CHECK CHECK CONSTRAINT [FK_ContactElectronicMail_Contact];

ALTER TABLE [edfi].[ContactInternationalAddress] WITH CHECK CHECK CONSTRAINT [FK_ContactInternationalAddress_Contact];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_CareerPathwayDescriptor];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_CourseDefinedByDescriptor];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_CourseGPAApplicabilityDescriptor];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_CreditTypeDescriptor];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_CreditTypeDescriptor1];

ALTER TABLE [edfi].[Course] WITH CHECK CHECK CONSTRAINT [FK_Course_EducationOrganization];

ALTER TABLE [edfi].[CourseAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_CourseAcademicSubject_Course];

ALTER TABLE [edfi].[CourseCompetencyLevel] WITH CHECK CHECK CONSTRAINT [FK_CourseCompetencyLevel_Course];

ALTER TABLE [edfi].[CourseIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_CourseIdentificationCode_Course];

ALTER TABLE [edfi].[CourseLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_CourseLearningStandard_Course];

ALTER TABLE [edfi].[CourseLevelCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_CourseLevelCharacteristic_Course];

ALTER TABLE [edfi].[CourseOfferedGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_CourseOfferedGradeLevel_Course];

ALTER TABLE [edfi].[CourseOffering] WITH CHECK CHECK CONSTRAINT [FK_CourseOffering_Course];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_Course];

ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_Course];

ALTER TABLE [edfi].[SurveyCourseAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyCourseAssociation_Course];

ALTER TABLE [edfi].[CourseOffering] WITH CHECK CHECK CONSTRAINT [FK_CourseOffering_Session];

ALTER TABLE [edfi].[CourseOffering] WITH CHECK CHECK CONSTRAINT [FK_CourseOffering_School];

ALTER TABLE [edfi].[CourseOfferingCourseLevelCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_CourseOfferingCourseLevelCharacteristic_CourseOffering];

ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] WITH CHECK CHECK CONSTRAINT [FK_CourseOfferingCurriculumUsed_CourseOffering];

ALTER TABLE [edfi].[CourseOfferingOfferedGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_CourseOfferingOfferedGradeLevel_CourseOffering];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_CourseOffering];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_CourseAttemptResultDescriptor];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_CourseRepeatCodeDescriptor];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_CreditTypeDescriptor1];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_EducationOrganization];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_GradeLevelDescriptor];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_MethodCreditEarnedDescriptor];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_Staff];

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscript_StudentAcademicRecord];

ALTER TABLE [edfi].[CourseTranscriptAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptAcademicSubject_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptAlternativeCourseIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptAlternativeCourseIdentificationCode_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptCourseProgram] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptCourseProgram_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptCreditCategory] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptCreditCategory_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptPartialCourseTranscriptAwards] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptPartialCourseTranscriptAwards_CourseTranscript];

ALTER TABLE [edfi].[CourseTranscriptSection] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptSection_CourseTranscript];

ALTER TABLE [edfi].[StaffCredential] WITH CHECK CHECK CONSTRAINT [FK_StaffCredential_Credential];

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Credential];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Credential];

ALTER TABLE [edfi].[Credential] WITH CHECK CHECK CONSTRAINT [FK_Credential_CredentialFieldDescriptor];

ALTER TABLE [edfi].[Credential] WITH CHECK CHECK CONSTRAINT [FK_Credential_CredentialTypeDescriptor];

ALTER TABLE [edfi].[Credential] WITH CHECK CHECK CONSTRAINT [FK_Credential_StateAbbreviationDescriptor];

ALTER TABLE [edfi].[Credential] WITH CHECK CHECK CONSTRAINT [FK_Credential_TeachingCredentialBasisDescriptor];

ALTER TABLE [edfi].[Credential] WITH CHECK CHECK CONSTRAINT [FK_Credential_TeachingCredentialDescriptor];

ALTER TABLE [edfi].[CredentialAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_CredentialAcademicSubject_Credential];

ALTER TABLE [edfi].[CredentialEndorsement] WITH CHECK CHECK CONSTRAINT [FK_CredentialEndorsement_Credential];

ALTER TABLE [edfi].[CredentialGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_CredentialGradeLevel_Credential];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_CrisisEvent];

ALTER TABLE [edfi].[CrisisEvent] WITH CHECK CHECK CONSTRAINT [FK_CrisisEvent_CrisisTypeDescriptor];

ALTER TABLE [edfi].[IDEAPartDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IDEAPartDescriptor_Descriptor];

ALTER TABLE [edfi].[OperationalStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_OperationalStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[QuestionFormDescriptor] WITH CHECK CHECK CONSTRAINT [FK_QuestionFormDescriptor_Descriptor];

ALTER TABLE [edfi].[IdentificationDocumentUseDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IdentificationDocumentUseDescriptor_Descriptor];

ALTER TABLE [edfi].[SourceSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SourceSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[RaceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RaceDescriptor_Descriptor];

ALTER TABLE [edfi].[ImmunizationTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ImmunizationTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[SpecialEducationExitReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SpecialEducationExitReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[RatingLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RatingLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[IncidentLocationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IncidentLocationDescriptor_Descriptor];

ALTER TABLE [edfi].[StateAbbreviationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StateAbbreviationDescriptor_Descriptor];

ALTER TABLE [edfi].[SpecialEducationProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SpecialEducationProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[ReasonExitedDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ReasonExitedDescriptor_Descriptor];

ALTER TABLE [edfi].[AssignmentLateStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssignmentLateStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[IndicatorDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IndicatorDescriptor_Descriptor];

ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SpecialEducationSettingDescriptor_Descriptor];

ALTER TABLE [edfi].[EducationPlanDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EducationPlanDescriptor_Descriptor];

ALTER TABLE [edfi].[ReasonNotTestedDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ReasonNotTestedDescriptor_Descriptor];

ALTER TABLE [edfi].[AttemptStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AttemptStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[IndicatorGroupDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IndicatorGroupDescriptor_Descriptor];

ALTER TABLE [edfi].[LearningStandardEquivalenceStrengthDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardEquivalenceStrengthDescriptor_Descriptor];

ALTER TABLE [edfi].[RecognitionTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RecognitionTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AttendanceEventCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[IndicatorLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_IndicatorLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[OtherNameTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_OtherNameTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ElectronicMailTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ElectronicMailTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[RelationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RelationDescriptor_Descriptor];

ALTER TABLE [edfi].[InstitutionTelephoneNumberTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InstitutionTelephoneNumberTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ParticipationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ParticipationDescriptor_Descriptor];

ALTER TABLE [edfi].[EligibilityDelayReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EligibilityDelayReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[RepeatIdentifierDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RepeatIdentifierDescriptor_Descriptor];

ALTER TABLE [edfi].[DiagnosisDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisDescriptor_Descriptor];

ALTER TABLE [edfi].[ContactTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ContactTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[InteractivityStyleDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InteractivityStyleDescriptor_Descriptor];

ALTER TABLE [edfi].[ParticipationStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ParticipationStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[EligibilityEvaluationTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EligibilityEvaluationTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[DiplomaLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DiplomaLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[ContentClassDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ContentClassDescriptor_Descriptor];

ALTER TABLE [edfi].[InternetAccessDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InternetAccessDescriptor_Descriptor];

ALTER TABLE [edfi].[PerformanceBaseConversionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PerformanceBaseConversionDescriptor_Descriptor];

ALTER TABLE [edfi].[LearningStandardScopeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardScopeDescriptor_Descriptor];

ALTER TABLE [edfi].[EmploymentStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EmploymentStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[DiplomaTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DiplomaTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[InternetAccessTypeInResidenceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InternetAccessTypeInResidenceDescriptor_Descriptor];

ALTER TABLE [edfi].[PerformanceLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PerformanceLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[LevelOfEducationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LevelOfEducationDescriptor_Descriptor];

ALTER TABLE [edfi].[EnrollmentTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EnrollmentTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[DisabilityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisabilityDescriptor_Descriptor];

ALTER TABLE [edfi].[CostRateDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CostRateDescriptor_Descriptor];

ALTER TABLE [edfi].[BarrierToInternetAccessInResidenceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_BarrierToInternetAccessInResidenceDescriptor_Descriptor];

ALTER TABLE [edfi].[InternetPerformanceInResidenceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InternetPerformanceInResidenceDescriptor_Descriptor];

ALTER TABLE [edfi].[LicenseStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LicenseStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[EntryGradeLevelReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EntryGradeLevelReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[DisabilityDesignationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisabilityDesignationDescriptor_Descriptor];

ALTER TABLE [edfi].[CountryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CountryDescriptor_Descriptor];

ALTER TABLE [edfi].[BehaviorDescriptor] WITH CHECK CHECK CONSTRAINT [FK_BehaviorDescriptor_Descriptor];

ALTER TABLE [edfi].[LicenseTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LicenseTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[EntryTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EntryTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[DisabilityDeterminationSourceTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisabilityDeterminationSourceTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_Descriptor];

ALTER TABLE [edfi].[EvaluationDelayReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EvaluationDelayReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[PersonalInformationVerificationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PersonalInformationVerificationDescriptor_Descriptor];

ALTER TABLE [edfi].[PlatformTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PlatformTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[StaffClassificationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StaffClassificationDescriptor_Descriptor];

ALTER TABLE [edfi].[ReporterDescriptionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ReporterDescriptionDescriptor_Descriptor];

ALTER TABLE [edfi].[PopulationServedDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PopulationServedDescriptor_Descriptor];

ALTER TABLE [edfi].[ReportingTagDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ReportingTagDescriptor_Descriptor];

ALTER TABLE [edfi].[PostingResultDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PostingResultDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseAttemptResultDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseAttemptResultDescriptor_Descriptor];

ALTER TABLE [edfi].[EventCircumstanceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EventCircumstanceDescriptor_Descriptor];

ALTER TABLE [edfi].[InterventionClassDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InterventionClassDescriptor_Descriptor];

ALTER TABLE [edfi].[ResidencyStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ResidencyStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionLengthDifferenceReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ExitWithdrawTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ResponseIndicatorDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ResponseIndicatorDescriptor_Descriptor];

ALTER TABLE [edfi].[AbsenceEventCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AbsenceEventCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseDefinedByDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseDefinedByDescriptor_Descriptor];

ALTER TABLE [edfi].[ResponsibilityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ResponsibilityDescriptor_Descriptor];

ALTER TABLE [edfi].[BusRouteDescriptor] WITH CHECK CHECK CONSTRAINT [FK_BusRouteDescriptor_Descriptor];

ALTER TABLE [edfi].[AcademicHonorCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AcademicHonorCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[PostSecondaryEventCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryEventCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseGPAApplicabilityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseGPAApplicabilityDescriptor_Descriptor];

ALTER TABLE [edfi].[AcademicSubjectDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AcademicSubjectDescriptor_Descriptor];

ALTER TABLE [edfi].[InterventionEffectivenessRatingDescriptor] WITH CHECK CHECK CONSTRAINT [FK_InterventionEffectivenessRatingDescriptor_Descriptor];

ALTER TABLE [edfi].[FinancialCollectionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_FinancialCollectionDescriptor_Descriptor];

ALTER TABLE [edfi].[DisciplineDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisciplineDescriptor_Descriptor];

ALTER TABLE [edfi].[PostSecondaryInstitutionLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryInstitutionLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseIdentificationSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[AccommodationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AccommodationDescriptor_Descriptor];

ALTER TABLE [edfi].[PrimaryLearningDeviceAccessDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PrimaryLearningDeviceAccessDescriptor_Descriptor];

ALTER TABLE [edfi].[PrimaryLearningDeviceAwayFromSchoolDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PrimaryLearningDeviceAwayFromSchoolDescriptor_Descriptor];

ALTER TABLE [edfi].[LocaleDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LocaleDescriptor_Descriptor];

ALTER TABLE [edfi].[RestraintEventReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RestraintEventReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[PrimaryLearningDeviceProviderDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PrimaryLearningDeviceProviderDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseLevelCharacteristicDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseLevelCharacteristicDescriptor_Descriptor];

ALTER TABLE [edfi].[TeachingCredentialBasisDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TeachingCredentialBasisDescriptor_Descriptor];

ALTER TABLE [edfi].[ResultDatatypeTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ResultDatatypeTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[CalendarEventDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CalendarEventDescriptor_Descriptor];

ALTER TABLE [edfi].[ProficiencyDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProficiencyDescriptor_Descriptor];

ALTER TABLE [edfi].[AccountTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AccountTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[TeachingCredentialDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TeachingCredentialDescriptor_Descriptor];

ALTER TABLE [edfi].[RetestIndicatorDescriptor] WITH CHECK CHECK CONSTRAINT [FK_RetestIndicatorDescriptor_Descriptor];

ALTER TABLE [edfi].[DisciplineIncidentParticipationCodeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncidentParticipationCodeDescriptor_Descriptor];

ALTER TABLE [edfi].[AchievementCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AchievementCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[TechnicalSkillsAssessmentDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TechnicalSkillsAssessmentDescriptor_Descriptor];

ALTER TABLE [edfi].[LocalEducationAgencyCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LocalEducationAgencyCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CalendarTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CalendarTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[AdditionalCreditTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AdditionalCreditTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[TelephoneNumberTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TelephoneNumberTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[DisplacedStudentStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DisplacedStudentStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[CareerPathwayDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CareerPathwayDescriptor_Descriptor];

ALTER TABLE [edfi].[AddressTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AddressTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[TermDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TermDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramAssignmentDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramAssignmentDescriptor_Descriptor];

ALTER TABLE [edfi].[SchoolCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SchoolCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[EducationalEnvironmentDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EducationalEnvironmentDescriptor_Descriptor];

ALTER TABLE [edfi].[CharterApprovalAgencyTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CharterApprovalAgencyTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[AdministrationEnvironmentDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AdministrationEnvironmentDescriptor_Descriptor];

ALTER TABLE [edfi].[TitleIPartAParticipantDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TitleIPartAParticipantDescriptor_Descriptor];

ALTER TABLE [edfi].[SchoolChoiceBasisDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SchoolChoiceBasisDescriptor_Descriptor];

ALTER TABLE [edfi].[CharterStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CharterStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AdministrativeFundingControlDescriptor_Descriptor];

ALTER TABLE [edfi].[TitleIPartAProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TitleIPartAProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[SchoolChoiceImplementStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SchoolChoiceImplementStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramCharacteristicDescriptor_Descriptor];

ALTER TABLE [edfi].[AncestryEthnicOriginDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AncestryEthnicOriginDescriptor_Descriptor];

ALTER TABLE [edfi].[TitleIPartASchoolDesignationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TitleIPartASchoolDesignationDescriptor_Descriptor];

ALTER TABLE [edfi].[SchoolFoodServiceProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SchoolFoodServiceProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[TransportationPublicExpenseEligibilityTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TransportationPublicExpenseEligibilityTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[TransportationTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TransportationTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[CourseRepeatCodeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CourseRepeatCodeDescriptor_Descriptor];

ALTER TABLE [edfi].[TravelDayofWeekDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TravelDayofWeekDescriptor_Descriptor];

ALTER TABLE [edfi].[SchoolTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SchoolTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[CitizenshipStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CitizenshipStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[TravelDirectionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TravelDirectionDescriptor_Descriptor];

ALTER TABLE [edfi].[TribalAffiliationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_TribalAffiliationDescriptor_Descriptor];

ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolDescriptor] WITH CHECK CHECK CONSTRAINT [FK_MagnetSpecialProgramEmphasisSchoolDescriptor_Descriptor];

ALTER TABLE [edfi].[StudentCharacteristicDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StudentCharacteristicDescriptor_Descriptor];

ALTER TABLE [edfi].[VisaDescriptor] WITH CHECK CHECK CONSTRAINT [FK_VisaDescriptor_Descriptor];

ALTER TABLE [edfi].[MediumOfInstructionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_MediumOfInstructionDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StaffIdentificationSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[GradebookEntryTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntryTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[WeaponDescriptor] WITH CHECK CHECK CONSTRAINT [FK_WeaponDescriptor_Descriptor];

ALTER TABLE [edfi].[MethodCreditEarnedDescriptor] WITH CHECK CHECK CONSTRAINT [FK_MethodCreditEarnedDescriptor_Descriptor];

ALTER TABLE [edfi].[MigrantEducationProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_MigrantEducationProgramServiceDescriptor_Descriptor];

ALTER TABLE [interop].[OperationalContextDescriptorUsage] WITH CHECK CHECK CONSTRAINT [FK_OperationalContextDescriptorUsage_Descriptor];

ALTER TABLE [edfi].[ClassroomPositionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ClassroomPositionDescriptor_Descriptor];

ALTER TABLE [edfi].[ModelEntityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ModelEntityDescriptor_Descriptor];

ALTER TABLE [edfi].[GradeLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GradeLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StudentIdentificationSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[MonitoredDescriptor] WITH CHECK CHECK CONSTRAINT [FK_MonitoredDescriptor_Descriptor];

ALTER TABLE [edfi].[GradePointAverageTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GradePointAverageTypeDescriptor_Descriptor];

ALTER TABLE [interop].[DescriptorEquivalenceGroupAssignment] WITH CHECK CHECK CONSTRAINT [FK_DescriptorEquivalenceGroupAssignment_Descriptor];

ALTER TABLE [edfi].[NeglectedOrDelinquentProgramDescriptor] WITH CHECK CHECK CONSTRAINT [FK_NeglectedOrDelinquentProgramDescriptor_Descriptor];

ALTER TABLE [edfi].[GradeTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GradeTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[NeglectedOrDelinquentProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_NeglectedOrDelinquentProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[SectionCharacteristicDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SectionCharacteristicDescriptor_Descriptor];

ALTER TABLE [edfi].[NetworkPurposeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_NetworkPurposeDescriptor_Descriptor];

ALTER TABLE [edfi].[CohortScopeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CohortScopeDescriptor_Descriptor];

ALTER TABLE [edfi].[NonMedicalImmunizationExemptionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_NonMedicalImmunizationExemptionDescriptor_Descriptor];

ALTER TABLE [edfi].[StaffLeaveEventCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_StaffLeaveEventCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CohortTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CohortTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[GradingPeriodDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GradingPeriodDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentItemCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItemCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CohortYearTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CohortYearTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[SubmissionStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SubmissionStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramEvaluationPeriodDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationPeriodDescriptor_Descriptor];

ALTER TABLE [edfi].[EducationOrganizationAssociationTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationAssociationTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[SupporterMilitaryConnectionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SupporterMilitaryConnectionDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramEvaluationTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentItemResultDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItemResultDescriptor_Descriptor];

ALTER TABLE [edfi].[EducationOrganizationCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[SectionTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SectionTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[SurveyCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SurveyCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[SeparationDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SeparationDescriptor_Descriptor];

ALTER TABLE [edfi].[CompetencyLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CompetencyLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramSponsorDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramSponsorDescriptor_Descriptor];

ALTER TABLE [edfi].[CredentialFieldDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CredentialFieldDescriptor_Descriptor];

ALTER TABLE [edfi].[SeparationReasonDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SeparationReasonDescriptor_Descriptor];

ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgramTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgramTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgressDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgressDescriptor_Descriptor];

ALTER TABLE [edfi].[SurveyLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SurveyLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[CredentialTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CredentialTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[ProgressLevelDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProgressLevelDescriptor_Descriptor];

ALTER TABLE [edfi].[LanguageDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LanguageDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentPeriodDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentPeriodDescriptor_Descriptor];

ALTER TABLE [edfi].[CreditCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CreditCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[LanguageInstructionProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LanguageInstructionProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[CreditTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CreditTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[LanguageUseDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LanguageUseDescriptor_Descriptor];

ALTER TABLE [edfi].[AssessmentReportingMethodDescriptor] WITH CHECK CHECK CONSTRAINT [FK_AssessmentReportingMethodDescriptor_Descriptor];

ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[SexDescriptor] WITH CHECK CHECK CONSTRAINT [FK_SexDescriptor_Descriptor];

ALTER TABLE [edfi].[ProviderCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProviderCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[CrisisTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CrisisTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_GunFreeSchoolsActReportingStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[ProviderProfitabilityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProviderProfitabilityDescriptor_Descriptor];

ALTER TABLE [edfi].[CTEProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CTEProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[HomelessPrimaryNighttimeResidenceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_HomelessPrimaryNighttimeResidenceDescriptor_Descriptor];

ALTER TABLE [edfi].[ProviderStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_ProviderStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[CurriculumUsedDescriptor] WITH CHECK CHECK CONSTRAINT [FK_CurriculumUsedDescriptor_Descriptor];

ALTER TABLE [edfi].[LearningStandardCategoryDescriptor] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardCategoryDescriptor_Descriptor];

ALTER TABLE [edfi].[HomelessProgramServiceDescriptor] WITH CHECK CHECK CONSTRAINT [FK_HomelessProgramServiceDescriptor_Descriptor];

ALTER TABLE [edfi].[PublicationStatusDescriptor] WITH CHECK CHECK CONSTRAINT [FK_PublicationStatusDescriptor_Descriptor];

ALTER TABLE [edfi].[DeliveryMethodDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DeliveryMethodDescriptor_Descriptor];

ALTER TABLE [edfi].[DescriptorMappingModelEntity] WITH CHECK CHECK CONSTRAINT [FK_DescriptorMappingModelEntity_DescriptorMapping];

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK CHECK CONSTRAINT [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonDescriptor];

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK CHECK CONSTRAINT [FK_DisciplineAction_School];

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK CHECK CONSTRAINT [FK_DisciplineAction_School1];

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK CHECK CONSTRAINT [FK_DisciplineAction_Student];

ALTER TABLE [edfi].[DisciplineActionDiscipline] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineAction];

ALTER TABLE [edfi].[DisciplineActionStaff] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionStaff_DisciplineAction];

ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_DisciplineAction];

ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffDisciplineIncidentAssociation_DisciplineIncident];

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncident_IncidentLocationDescriptor];

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncident_ReporterDescriptionDescriptor];

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncident_School];

ALTER TABLE [edfi].[DisciplineIncidentBehavior] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncidentBehavior_DisciplineIncident];

ALTER TABLE [edfi].[DisciplineIncidentExternalParticipant] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncidentExternalParticipant_DisciplineIncident];

ALTER TABLE [edfi].[DisciplineIncidentWeapon] WITH CHECK CHECK CONSTRAINT [FK_DisciplineIncidentWeapon_DisciplineIncident];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_DisciplineIncident];

ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_DisciplineIncident];

ALTER TABLE [edfi].[InterventionEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionEducationContent_EducationContent];

ALTER TABLE [edfi].[EducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContent_ContentClassDescriptor];

ALTER TABLE [edfi].[EducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContent_CostRateDescriptor];

ALTER TABLE [edfi].[EducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContent_InteractivityStyleDescriptor];

ALTER TABLE [edfi].[EducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContent_LearningStandard];

ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_EducationContentAppropriateGradeLevel_EducationContent];

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionEducationContent_EducationContent];

ALTER TABLE [edfi].[EducationContentAppropriateSex] WITH CHECK CHECK CONSTRAINT [FK_EducationContentAppropriateSex_EducationContent];

ALTER TABLE [edfi].[EducationContentAuthor] WITH CHECK CHECK CONSTRAINT [FK_EducationContentAuthor_EducationContent];

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent];

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH CHECK CHECK CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent1];

ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] WITH CHECK CHECK CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent];

ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] WITH CHECK CHECK CONSTRAINT [FK_EducationContentDerivativeSourceURI_EducationContent];

ALTER TABLE [edfi].[EducationContentLanguage] WITH CHECK CHECK CONSTRAINT [FK_EducationContentLanguage_EducationContent];

ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyEducationContent_EducationContent];

ALTER TABLE [edfi].[LearningStandardContentStandard] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardContentStandard_EducationOrganization];

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization1];

ALTER TABLE [edfi].[StudentProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluation_EducationOrganization];

ALTER TABLE [edfi].[StateEducationAgency] WITH CHECK CHECK CONSTRAINT [FK_StateEducationAgency_EducationOrganization];

ALTER TABLE [edfi].[OrganizationDepartment] WITH CHECK CHECK CONSTRAINT [FK_OrganizationDepartment_EducationOrganization];

ALTER TABLE [edfi].[OrganizationDepartment] WITH CHECK CHECK CONSTRAINT [FK_OrganizationDepartment_EducationOrganization1];

ALTER TABLE [edfi].[EducationServiceCenter] WITH CHECK CHECK CONSTRAINT [FK_EducationServiceCenter_EducationOrganization];

ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_EducationOrganization];

ALTER TABLE [edfi].[ReportCard] WITH CHECK CHECK CONSTRAINT [FK_ReportCard_EducationOrganization];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_EducationOrganization];

ALTER TABLE [edfi].[Intervention] WITH CHECK CHECK CONSTRAINT [FK_Intervention_EducationOrganization];

ALTER TABLE [edfi].[LocalAccount] WITH CHECK CHECK CONSTRAINT [FK_LocalAccount_EducationOrganization];

ALTER TABLE [edfi].[PostSecondaryInstitution] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryInstitution_EducationOrganization];

ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_EducationOrganization];

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization];

ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganization];

ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_EducationOrganization];

ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_EducationOrganization];

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK CHECK CONSTRAINT [FK_LocalEducationAgency_EducationOrganization];

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescription_EducationOrganization];

ALTER TABLE [edfi].[Program] WITH CHECK CHECK CONSTRAINT [FK_Program_EducationOrganization];

ALTER TABLE [edfi].[School] WITH CHECK CHECK CONSTRAINT [FK_School_EducationOrganization];

ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_GeneralStudentProgramAssociation_EducationOrganization];

ALTER TABLE [edfi].[StudentHealth] WITH CHECK CHECK CONSTRAINT [FK_StudentHealth_EducationOrganization];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EducationOrganization];

ALTER TABLE [edfi].[AssessmentContentStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentContentStandard_EducationOrganization];

ALTER TABLE [edfi].[StudentTransportation] WITH CHECK CHECK CONSTRAINT [FK_StudentTransportation_EducationOrganization];

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudy_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganization] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganization_OperationalStatusDescriptor];

ALTER TABLE [edfi].[EducationOrganizationAddress] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationAddress_EducationOrganization];

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlan_EducationOrganization];

ALTER TABLE [edfi].[CommunityOrganization] WITH CHECK CHECK CONSTRAINT [FK_CommunityOrganization_EducationOrganization];

ALTER TABLE [edfi].[CommunityProvider] WITH CHECK CHECK CONSTRAINT [FK_CommunityProvider_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationCategory] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganization];

ALTER TABLE [edfi].[Survey] WITH CHECK CHECK CONSTRAINT [FK_Survey_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationIndicator] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationIndicator_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationInternationalAddress_EducationOrganization];

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPosition_EducationOrganization];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationNetwork] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationNetwork_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganization];

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription];

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH CHECK CHECK CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork];

ALTER TABLE [edfi].[EvaluationRubricDimension] WITH CHECK CHECK CONSTRAINT [FK_EvaluationRubricDimension_RatingLevelDescriptor];

ALTER TABLE [edfi].[EvaluationRubricDimension] WITH CHECK CHECK CONSTRAINT [FK_EvaluationRubricDimension_ProgramEvaluationElement];

ALTER TABLE [edfi].[FeederSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_FeederSchoolAssociation_School];

ALTER TABLE [edfi].[FeederSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_FeederSchoolAssociation_School1];

ALTER TABLE [edfi].[FunctionDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_FunctionDimensionReportingTag_FunctionDimension];

ALTER TABLE [edfi].[FundDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_FundDimensionReportingTag_FundDimension];

ALTER TABLE [edfi].[StudentSchoolFoodServiceProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolFoodServiceProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_GeneralStudentProgramAssociation_Program];

ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_GeneralStudentProgramAssociation_ReasonExitedDescriptor];

ALTER TABLE [edfi].[GeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_GeneralStudentProgramAssociation_Student];

ALTER TABLE [edfi].[GeneralStudentProgramAssociationProgramParticipationStatus] WITH CHECK CHECK CONSTRAINT [FK_GeneralStudentProgramAssociationProgramParticipationStatus_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentHomelessProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentHomelessProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentLanguageInstructionProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentCTEProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCTEProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentNeglectedOrDelinquentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentNeglectedOrDelinquentProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[ReportCardGrade] WITH CHECK CHECK CONSTRAINT [FK_ReportCardGrade_Grade];

ALTER TABLE [edfi].[Grade] WITH CHECK CHECK CONSTRAINT [FK_Grade_GradeTypeDescriptor];

ALTER TABLE [edfi].[Grade] WITH CHECK CHECK CONSTRAINT [FK_Grade_GradingPeriod];

ALTER TABLE [edfi].[Grade] WITH CHECK CHECK CONSTRAINT [FK_Grade_PerformanceBaseConversionDescriptor];

ALTER TABLE [edfi].[Grade] WITH CHECK CHECK CONSTRAINT [FK_Grade_StudentSectionAssociation];

ALTER TABLE [edfi].[GradeLearningStandardGrade] WITH CHECK CHECK CONSTRAINT [FK_GradeLearningStandardGrade_Grade];

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_StudentGradebookEntry_GradebookEntry];

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntry_GradebookEntryTypeDescriptor];

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntry_GradingPeriod];

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntry_Section];

ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntryLearningStandard_GradebookEntry];

ALTER TABLE [edfi].[ReportCard] WITH CHECK CHECK CONSTRAINT [FK_ReportCard_GradingPeriod];

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjective_GradingPeriod];

ALTER TABLE [edfi].[GradingPeriod] WITH CHECK CHECK CONSTRAINT [FK_GradingPeriod_GradingPeriodDescriptor];

ALTER TABLE [edfi].[GradingPeriod] WITH CHECK CHECK CONSTRAINT [FK_GradingPeriod_School];

ALTER TABLE [edfi].[GradingPeriod] WITH CHECK CHECK CONSTRAINT [FK_GradingPeriod_SchoolYearType];

ALTER TABLE [edfi].[SessionGradingPeriod] WITH CHECK CHECK CONSTRAINT [FK_SessionGradingPeriod_GradingPeriod];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_GraduationPlan];

ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_GraduationPlan];

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlan_CreditTypeDescriptor];

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlan_GraduationPlanTypeDescriptor];

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlan_SchoolYearType];

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanCreditsByCourse_GraduationPlan];

ALTER TABLE [edfi].[GraduationPlanCreditsByCreditCategory] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanCreditsByCreditCategory_GraduationPlan];

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanCreditsBySubject_GraduationPlan];

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH CHECK CHECK CONSTRAINT [FK_GraduationPlanRequiredAssessment_GraduationPlan];

ALTER TABLE [edfi].[Intervention] WITH CHECK CHECK CONSTRAINT [FK_Intervention_DeliveryMethodDescriptor];

ALTER TABLE [edfi].[Intervention] WITH CHECK CHECK CONSTRAINT [FK_Intervention_InterventionClassDescriptor];

ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_InterventionAppropriateGradeLevel_Intervention];

ALTER TABLE [edfi].[InterventionAppropriateSex] WITH CHECK CHECK CONSTRAINT [FK_InterventionAppropriateSex_Intervention];

ALTER TABLE [edfi].[InterventionDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_InterventionDiagnosis_Intervention];

ALTER TABLE [edfi].[InterventionEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionEducationContent_Intervention];

ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH CHECK CHECK CONSTRAINT [FK_InterventionInterventionPrescription_Intervention];

ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionLearningResourceMetadataURI_Intervention];

ALTER TABLE [edfi].[InterventionMeetingTime] WITH CHECK CHECK CONSTRAINT [FK_InterventionMeetingTime_Intervention];

ALTER TABLE [edfi].[InterventionPopulationServed] WITH CHECK CHECK CONSTRAINT [FK_InterventionPopulationServed_Intervention];

ALTER TABLE [edfi].[InterventionStaff] WITH CHECK CHECK CONSTRAINT [FK_InterventionStaff_Intervention];

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAssociation_Intervention];

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAttendanceEvent_Intervention];

ALTER TABLE [edfi].[InterventionURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionURI_Intervention];

ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH CHECK CHECK CONSTRAINT [FK_InterventionInterventionPrescription_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescription_DeliveryMethodDescriptor];

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescription_InterventionClassDescriptor];

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionDiagnosis_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionEducationContent_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionPopulationServed_InterventionPrescription];

ALTER TABLE [edfi].[InterventionPrescriptionURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionPrescriptionURI_InterventionPrescription];

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudy_InterventionPrescription];

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudy_DeliveryMethodDescriptor];

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudy_InterventionClassDescriptor];

ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyAppropriateSex] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyAppropriateSex_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyEducationContent_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyPopulationServed] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyPopulationServed_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyStateAbbreviation_InterventionStudy];

ALTER TABLE [edfi].[InterventionStudyURI] WITH CHECK CHECK CONSTRAINT [FK_InterventionStudyURI_InterventionStudy];

ALTER TABLE [edfi].[LearningStandardContentStandard] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardContentStandard_LearningStandard];

ALTER TABLE [edfi].[AssessmentScoreRangeLearningStandardLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentScoreRangeLearningStandardLearningStandard_LearningStandard];

ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard];

ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandard1];

ALTER TABLE [edfi].[LearningStandardGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardGradeLevel_LearningStandard];

ALTER TABLE [edfi].[LearningStandardIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardIdentificationCode_LearningStandard];

ALTER TABLE [edfi].[CourseLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_CourseLearningStandard_LearningStandard];

ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_GradebookEntryLearningStandard_LearningStandard];

ALTER TABLE [edfi].[GradeLearningStandardGrade] WITH CHECK CHECK CONSTRAINT [FK_GradeLearningStandardGrade_LearningStandard];

ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_AssessmentItemLearningStandard_LearningStandard];

ALTER TABLE [edfi].[ProgramLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_ProgramLearningStandard_LearningStandard];

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_LearningStandard];

ALTER TABLE [edfi].[LearningStandard] WITH CHECK CHECK CONSTRAINT [FK_LearningStandard_LearningStandard];

ALTER TABLE [edfi].[LearningStandard] WITH CHECK CHECK CONSTRAINT [FK_LearningStandard_LearningStandardCategoryDescriptor];

ALTER TABLE [edfi].[LearningStandard] WITH CHECK CHECK CONSTRAINT [FK_LearningStandard_LearningStandardScopeDescriptor];

ALTER TABLE [edfi].[LearningStandardAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardAcademicSubject_LearningStandard];

ALTER TABLE [edfi].[LearningStandardEquivalenceAssociation] WITH CHECK CHECK CONSTRAINT [FK_LearningStandardEquivalenceAssociation_LearningStandardEquivalenceStrengthDescriptor];

ALTER TABLE [edfi].[LocalAccountReportingTag] WITH CHECK CHECK CONSTRAINT [FK_LocalAccountReportingTag_LocalAccount];

ALTER TABLE [edfi].[LocalActual] WITH CHECK CHECK CONSTRAINT [FK_LocalActual_LocalAccount];

ALTER TABLE [edfi].[LocalBudget] WITH CHECK CHECK CONSTRAINT [FK_LocalBudget_LocalAccount];

ALTER TABLE [edfi].[LocalContractedStaff] WITH CHECK CHECK CONSTRAINT [FK_LocalContractedStaff_LocalAccount];

ALTER TABLE [edfi].[LocalEncumbrance] WITH CHECK CHECK CONSTRAINT [FK_LocalEncumbrance_LocalAccount];

ALTER TABLE [edfi].[LocalPayroll] WITH CHECK CHECK CONSTRAINT [FK_LocalPayroll_LocalAccount];

ALTER TABLE [edfi].[LocalActual] WITH CHECK CHECK CONSTRAINT [FK_LocalActual_FinancialCollectionDescriptor];

ALTER TABLE [edfi].[LocalBudget] WITH CHECK CHECK CONSTRAINT [FK_LocalBudget_FinancialCollectionDescriptor];

ALTER TABLE [edfi].[LocalContractedStaff] WITH CHECK CHECK CONSTRAINT [FK_LocalContractedStaff_FinancialCollectionDescriptor];

ALTER TABLE [edfi].[LocalContractedStaff] WITH CHECK CHECK CONSTRAINT [FK_LocalContractedStaff_Staff];

ALTER TABLE [edfi].[LocalEncumbrance] WITH CHECK CHECK CONSTRAINT [FK_LocalEncumbrance_FinancialCollectionDescriptor];

ALTER TABLE [edfi].[LocalPayroll] WITH CHECK CHECK CONSTRAINT [FK_LocalPayroll_FinancialCollectionDescriptor];

ALTER TABLE [edfi].[LocalPayroll] WITH CHECK CHECK CONSTRAINT [FK_LocalPayroll_Staff];

ALTER TABLE [edfi].[Location] WITH CHECK CHECK CONSTRAINT [FK_Location_School];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_Location];

ALTER TABLE [edfi].[ObjectDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_ObjectDimensionReportingTag_ObjectDimension];

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment];

ALTER TABLE [edfi].[ObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessment_AcademicSubjectDescriptor];

ALTER TABLE [edfi].[ObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessment_ObjectiveAssessment];

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment];

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment];

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment];

ALTER TABLE [edfi].[ObjectiveAssessmentScore] WITH CHECK CHECK CONSTRAINT [FK_ObjectiveAssessmentScore_ObjectiveAssessment];

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPosition_EmploymentStatusDescriptor];

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPosition_PostingResultDescriptor];

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPosition_ProgramAssignmentDescriptor];

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPosition_StaffClassificationDescriptor];

ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPositionAcademicSubject_OpenStaffPosition];

ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition];

ALTER TABLE [edfi].[OperationalUnitDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_OperationalUnitDimensionReportingTag_OperationalUnitDimension];

ALTER TABLE [edfi].[Staff] WITH CHECK CHECK CONSTRAINT [FK_Staff_Person];

ALTER TABLE [edfi].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_Person];

ALTER TABLE [edfi].[Person] WITH CHECK CHECK CONSTRAINT [FK_Person_SourceSystemDescriptor];

ALTER TABLE [edfi].[PostSecondaryEvent] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryEventCategoryDescriptor];

ALTER TABLE [edfi].[PostSecondaryEvent] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryInstitution];

ALTER TABLE [edfi].[PostSecondaryEvent] WITH CHECK CHECK CONSTRAINT [FK_PostSecondaryEvent_Student];

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAttendanceEvent_Program];

ALTER TABLE [edfi].[StudentSectionAssociationProgram] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociationProgram_Program];

ALTER TABLE [edfi].[RestraintEventProgram] WITH CHECK CHECK CONSTRAINT [FK_RestraintEventProgram_Program];

ALTER TABLE [edfi].[Program] WITH CHECK CHECK CONSTRAINT [FK_Program_ProgramTypeDescriptor];

ALTER TABLE [edfi].[ProgramCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_ProgramCharacteristic_Program];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Program];

ALTER TABLE [edfi].[ProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluation_Program];

ALTER TABLE [edfi].[CourseTranscriptCourseProgram] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptCourseProgram_Program];

ALTER TABLE [edfi].[CohortProgram] WITH CHECK CHECK CONSTRAINT [FK_CohortProgram_Program];

ALTER TABLE [edfi].[StaffProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffProgramAssociation_Program];

ALTER TABLE [edfi].[SectionProgram] WITH CHECK CHECK CONSTRAINT [FK_SectionProgram_Program];

ALTER TABLE [edfi].[ProgramLearningStandard] WITH CHECK CHECK CONSTRAINT [FK_ProgramLearningStandard_Program];

ALTER TABLE [edfi].[ProgramSponsor] WITH CHECK CHECK CONSTRAINT [FK_ProgramSponsor_Program];

ALTER TABLE [edfi].[SurveyProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyProgramAssociation_Program];

ALTER TABLE [edfi].[AssessmentProgram] WITH CHECK CHECK CONSTRAINT [FK_AssessmentProgram_Program];

ALTER TABLE [edfi].[ProgramDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_ProgramDimensionReportingTag_ProgramDimension];

ALTER TABLE [edfi].[StudentProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluation_ProgramEvaluation];

ALTER TABLE [edfi].[ProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationPeriodDescriptor];

ALTER TABLE [edfi].[ProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluation_ProgramEvaluationTypeDescriptor];

ALTER TABLE [edfi].[ProgramEvaluationElement] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluation];

ALTER TABLE [edfi].[ProgramEvaluationLevel] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationLevel_ProgramEvaluation];

ALTER TABLE [edfi].[ProgramEvaluationObjective] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationObjective_ProgramEvaluation];

ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_ProgramEvaluationElement];

ALTER TABLE [edfi].[ProgramEvaluationElement] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationElement_ProgramEvaluationObjective];

ALTER TABLE [edfi].[ProgramEvaluationElementProgramEvaluationLevel] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationElementProgramEvaluationLevel_ProgramEvaluationElement];

ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_ProgramEvaluationObjective];

ALTER TABLE [edfi].[ProgramEvaluationObjectiveProgramEvaluationLevel] WITH CHECK CHECK CONSTRAINT [FK_ProgramEvaluationObjectiveProgramEvaluationLevel_ProgramEvaluationObjective];

ALTER TABLE [edfi].[ProjectDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_ProjectDimensionReportingTag_ProjectDimension];

ALTER TABLE [edfi].[ReportCard] WITH CHECK CHECK CONSTRAINT [FK_ReportCard_Student];

ALTER TABLE [edfi].[ReportCardGrade] WITH CHECK CHECK CONSTRAINT [FK_ReportCardGrade_ReportCard];

ALTER TABLE [edfi].[ReportCardGradePointAverage] WITH CHECK CHECK CONSTRAINT [FK_ReportCardGradePointAverage_ReportCard];

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ReportCard];

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordReportCard_ReportCard];

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK CHECK CONSTRAINT [FK_RestraintEvent_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK CHECK CONSTRAINT [FK_RestraintEvent_School];

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK CHECK CONSTRAINT [FK_RestraintEvent_Student];

ALTER TABLE [edfi].[RestraintEventProgram] WITH CHECK CHECK CONSTRAINT [FK_RestraintEventProgram_RestraintEvent];

ALTER TABLE [edfi].[RestraintEventReason] WITH CHECK CHECK CONSTRAINT [FK_RestraintEventReason_RestraintEvent];

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK CHECK CONSTRAINT [FK_RestraintEvent_DisciplineIncident];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_SchoolYearType];

ALTER TABLE [edfi].[StateEducationAgencyAccountability] WITH CHECK CHECK CONSTRAINT [FK_StateEducationAgencyAccountability_SchoolYearType];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType1];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_SchoolYearType];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_SchoolYearType];

ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_SchoolYearType];

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH CHECK CHECK CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolYearType];

ALTER TABLE [edfi].[School] WITH CHECK CHECK CONSTRAINT [FK_School_SchoolYearType];

ALTER TABLE [edfi].[Survey] WITH CHECK CHECK CONSTRAINT [FK_Survey_SchoolYearType];

ALTER TABLE [edfi].[StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentLanguageInstructionProgramAssociationEnglishLanguageProficiencyAssessment_SchoolYearType];

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociation_SchoolYearType];

ALTER TABLE [edfi].[Session] WITH CHECK CHECK CONSTRAINT [FK_Session_SchoolYearType];

ALTER TABLE [edfi].[AssessmentSection] WITH CHECK CHECK CONSTRAINT [FK_AssessmentSection_Section];

ALTER TABLE [edfi].[SurveySectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionAssociation_Section];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_Section];

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEvent_Section];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_CreditTypeDescriptor];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_LanguageDescriptor];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_MediumOfInstructionDescriptor];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_PopulationServedDescriptor];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_School];

ALTER TABLE [edfi].[Section] WITH CHECK CHECK CONSTRAINT [FK_Section_SectionTypeDescriptor];

ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH CHECK CHECK CONSTRAINT [FK_StudentCohortAssociationSection_Section];

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK CHECK CONSTRAINT [FK_SectionAttendanceTakenEvent_Section];

ALTER TABLE [edfi].[SectionCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_SectionCharacteristic_Section];

ALTER TABLE [edfi].[SectionClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_SectionClassPeriod_Section];

ALTER TABLE [edfi].[CourseTranscriptSection] WITH CHECK CHECK CONSTRAINT [FK_CourseTranscriptSection_Section];

ALTER TABLE [edfi].[SectionCourseLevelCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_SectionCourseLevelCharacteristic_Section];

ALTER TABLE [edfi].[SectionOfferedGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_SectionOfferedGradeLevel_Section];

ALTER TABLE [edfi].[SectionProgram] WITH CHECK CHECK CONSTRAINT [FK_SectionProgram_Section];

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSectionAssociation_Section];

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK CHECK CONSTRAINT [FK_SectionAttendanceTakenEvent_Staff];

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAttendanceEvent_Session];

ALTER TABLE [edfi].[Survey] WITH CHECK CHECK CONSTRAINT [FK_Survey_Session];

ALTER TABLE [edfi].[Session] WITH CHECK CHECK CONSTRAINT [FK_Session_School];

ALTER TABLE [edfi].[Session] WITH CHECK CHECK CONSTRAINT [FK_Session_TermDescriptor];

ALTER TABLE [edfi].[SessionAcademicWeek] WITH CHECK CHECK CONSTRAINT [FK_SessionAcademicWeek_Session];

ALTER TABLE [edfi].[SessionGradingPeriod] WITH CHECK CHECK CONSTRAINT [FK_SessionGradingPeriod_Session];

ALTER TABLE [edfi].[SourceDimensionReportingTag] WITH CHECK CHECK CONSTRAINT [FK_SourceDimensionReportingTag_SourceDimension];

ALTER TABLE [edfi].[StaffTribalAffiliation] WITH CHECK CHECK CONSTRAINT [FK_StaffTribalAffiliation_Staff];

ALTER TABLE [edfi].[StaffVisa] WITH CHECK CHECK CONSTRAINT [FK_StaffVisa_Staff];

ALTER TABLE [edfi].[StudentProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluation_Staff];

ALTER TABLE [edfi].[Staff] WITH CHECK CHECK CONSTRAINT [FK_Staff_CitizenshipStatusDescriptor];

ALTER TABLE [edfi].[Staff] WITH CHECK CHECK CONSTRAINT [FK_Staff_LevelOfEducationDescriptor];

ALTER TABLE [edfi].[Staff] WITH CHECK CHECK CONSTRAINT [FK_Staff_SexDescriptor];

ALTER TABLE [edfi].[SurveyResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponse_Staff];

ALTER TABLE [edfi].[StaffAbsenceEvent] WITH CHECK CHECK CONSTRAINT [FK_StaffAbsenceEvent_Staff];

ALTER TABLE [edfi].[StaffAddress] WITH CHECK CHECK CONSTRAINT [FK_StaffAddress_Staff];

ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_Staff];

ALTER TABLE [edfi].[StaffAncestryEthnicOrigin] WITH CHECK CHECK CONSTRAINT [FK_StaffAncestryEthnicOrigin_Staff];

ALTER TABLE [edfi].[StaffCohortAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffCohortAssociation_Staff];

ALTER TABLE [edfi].[StaffCredential] WITH CHECK CHECK CONSTRAINT [FK_StaffCredential_Staff];

ALTER TABLE [edfi].[DisciplineActionStaff] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionStaff_Staff];

ALTER TABLE [edfi].[StaffDisciplineIncidentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffDisciplineIncidentAssociation_Staff];

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Staff];

ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_Staff];

ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_Staff];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Staff];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramServiceProvider_Staff];

ALTER TABLE [edfi].[StaffElectronicMail] WITH CHECK CHECK CONSTRAINT [FK_StaffElectronicMail_Staff];

ALTER TABLE [edfi].[StaffIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_StaffIdentificationCode_Staff];

ALTER TABLE [edfi].[StaffIdentificationDocument] WITH CHECK CHECK CONSTRAINT [FK_StaffIdentificationDocument_Staff];

ALTER TABLE [edfi].[InterventionStaff] WITH CHECK CHECK CONSTRAINT [FK_InterventionStaff_Staff];

ALTER TABLE [edfi].[StaffInternationalAddress] WITH CHECK CHECK CONSTRAINT [FK_StaffInternationalAddress_Staff];

ALTER TABLE [edfi].[StaffLanguage] WITH CHECK CHECK CONSTRAINT [FK_StaffLanguage_Staff];

ALTER TABLE [edfi].[StaffLeave] WITH CHECK CHECK CONSTRAINT [FK_StaffLeave_Staff];

ALTER TABLE [edfi].[StaffOtherName] WITH CHECK CHECK CONSTRAINT [FK_StaffOtherName_Staff];

ALTER TABLE [edfi].[StaffPersonalIdentificationDocument] WITH CHECK CHECK CONSTRAINT [FK_StaffPersonalIdentificationDocument_Staff];

ALTER TABLE [edfi].[StaffProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffProgramAssociation_Staff];

ALTER TABLE [edfi].[StaffRace] WITH CHECK CHECK CONSTRAINT [FK_StaffRace_Staff];

ALTER TABLE [edfi].[StaffRecognition] WITH CHECK CHECK CONSTRAINT [FK_StaffRecognition_Staff];

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociation_Staff];

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSectionAssociation_Staff];

ALTER TABLE [edfi].[StaffTelephone] WITH CHECK CHECK CONSTRAINT [FK_StaffTelephone_Staff];

ALTER TABLE [edfi].[StaffAbsenceEvent] WITH CHECK CHECK CONSTRAINT [FK_StaffAbsenceEvent_AbsenceEventCategoryDescriptor];

ALTER TABLE [edfi].[StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode] WITH CHECK CHECK CONSTRAINT [FK_StaffDisciplineIncidentAssociationDisciplineIncidentParticipationCode_StaffDisciplineIncidentAssociation];

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor];

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation];

ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationContactAssociation_ContactTypeDescriptor];

ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationAddress] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationContactAssociationAddress_StaffEducationOrganizationContactAssociation];

ALTER TABLE [edfi].[StaffEducationOrganizationContactAssociationTelephone] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationContactAssociationTelephone_StaffEducationOrganizationContactAssociation];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationDescriptor];

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor];

ALTER TABLE [edfi].[StaffLeave] WITH CHECK CHECK CONSTRAINT [FK_StaffLeave_StaffLeaveEventCategoryDescriptor];

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor];

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociation_School];

ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation];

ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] WITH CHECK CHECK CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation];

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StaffSectionAssociation_ClassroomPositionDescriptor];

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAttendanceEvent_Student];

ALTER TABLE [edfi].[StudentProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluation_Student];

ALTER TABLE [edfi].[SurveyResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponse_Student];

ALTER TABLE [edfi].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_CitizenshipStatusDescriptor];

ALTER TABLE [edfi].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_CountryDescriptor];

ALTER TABLE [edfi].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_SexDescriptor];

ALTER TABLE [edfi].[Student] WITH CHECK CHECK CONSTRAINT [FK_Student_StateAbbreviationDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_Student];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_Student];

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAttendanceEvent_Student];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_Student];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_Student];

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEvent_Student];

ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_Student];

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_StudentGradebookEntry_Student];

ALTER TABLE [edfi].[StudentHealth] WITH CHECK CHECK CONSTRAINT [FK_StudentHealth_Student];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_Student];

ALTER TABLE [edfi].[StudentCohortAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCohortAssociation_Student];

ALTER TABLE [edfi].[StudentTransportation] WITH CHECK CHECK CONSTRAINT [FK_StudentTransportation_Student];

ALTER TABLE [edfi].[StudentIdentificationDocument] WITH CHECK CHECK CONSTRAINT [FK_StudentIdentificationDocument_Student];

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjective_Student];

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAssociation_Student];

ALTER TABLE [edfi].[StudentVisa] WITH CHECK CHECK CONSTRAINT [FK_StudentVisa_Student];

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAttendanceEvent_Student];

ALTER TABLE [edfi].[StudentContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentContactAssociation_Student];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_Student];

ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociation_Student];

ALTER TABLE [edfi].[StudentOtherName] WITH CHECK CHECK CONSTRAINT [FK_StudentOtherName_Student];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_Student];

ALTER TABLE [edfi].[StudentPersonalIdentificationDocument] WITH CHECK CHECK CONSTRAINT [FK_StudentPersonalIdentificationDocument_Student];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor1];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor2];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_CreditTypeDescriptor3];

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecord_TermDescriptor];

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordDiploma_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAcademicRecordGradePointAverage] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordGradePointAverage_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordRecognition_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH CHECK CHECK CONSTRAINT [FK_StudentAcademicRecordReportCard_StudentAcademicRecord];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_AdministrationEnvironmentDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_EventCircumstanceDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_GradeLevelDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_LanguageDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_PlatformTypeDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_ReasonNotTestedDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_RetestIndicatorDescriptor];

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessment_School];

ALTER TABLE [edfi].[StudentAssessmentAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentAccommodation_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentItem_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentPerformanceLevel_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentPeriod] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentPeriod_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentScoreResult] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentScoreResult_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment];

ALTER TABLE [edfi].[StudentAssessmentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentEducationOrganizationAssociation_EducationOrganizationAssociationTypeDescriptor];

ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH CHECK CHECK CONSTRAINT [FK_StudentCohortAssociationSection_StudentCohortAssociation];

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective];

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjective_CompetencyLevelDescriptor];

ALTER TABLE [edfi].[StudentCompetencyObjectiveGeneralStudentProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjectiveGeneralStudentProgramAssociation_StudentCompetencyObjective];

ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentCompetencyObjective];

ALTER TABLE [edfi].[StudentContactAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentContactAssociation_RelationDescriptor];

ALTER TABLE [edfi].[DisciplineActionStudentDisciplineIncidentBehaviorAssociation] WITH CHECK CHECK CONSTRAINT [FK_DisciplineActionStudentDisciplineIncidentBehaviorAssociation_StudentDisciplineIncidentBehaviorAssociation];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociation_BehaviorDescriptor];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentBehaviorAssociation];

ALTER TABLE [edfi].[StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentNonOffenderAssociationDisciplineIncidentParticipationCode_StudentDisciplineIncidentNonOffenderAssoci];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAncestryEthnicOrigin] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationAncestryEthnicOrigin_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationCohortYear] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationCohortYear_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisability] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationDisability_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationDisplacedStudent] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationDisplacedStudent_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationElectronicMail] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationElectronicMail_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationInternationalAddress] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationInternationalAddress_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationLanguage] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationLanguage_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationRace] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationRace_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentCharacteristic_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIdentificationCode_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationStudentIndicator] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationStudentIndicator_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTelephone] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationTelephone_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationTribalAffiliation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationTribalAffiliation_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_BarrierToInternetAccessInResidenceDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetAccessTypeInResidenceDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_InternetPerformanceInResidenceDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_LimitedEnglishProficiencyDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAccessDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceAwayFromSchoolDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_PrimaryLearningDeviceProviderDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_SexDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociation_SupporterMilitaryConnectionDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssociationAddress] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssociationAddress_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentEducationOrganizationResponsibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationResponsibilityAssociation_ResponsibilityDescriptor];

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_StudentGradebookEntry_AssignmentLateStatusDescriptor];

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_StudentGradebookEntry_CompetencyLevelDescriptor];

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK CHECK CONSTRAINT [FK_StudentGradebookEntry_SubmissionStatusDescriptor];

ALTER TABLE [edfi].[StudentHealth] WITH CHECK CHECK CONSTRAINT [FK_StudentHealth_NonMedicalImmunizationExemptionDescriptor];

ALTER TABLE [edfi].[StudentHealthAdditionalImmunization] WITH CHECK CHECK CONSTRAINT [FK_StudentHealthAdditionalImmunization_StudentHealth];

ALTER TABLE [edfi].[StudentHealthRequiredImmunization] WITH CHECK CHECK CONSTRAINT [FK_StudentHealthRequiredImmunization_StudentHealth];

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation];

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor];

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor];

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[StudentProgramEvaluation] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluation_RatingLevelDescriptor];

ALTER TABLE [edfi].[StudentProgramEvaluationExternalEvaluator] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluationExternalEvaluator_StudentProgramEvaluation];

ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationElement] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationElement_StudentProgramEvaluation];

ALTER TABLE [edfi].[StudentProgramEvaluationStudentEvaluationObjective] WITH CHECK CHECK CONSTRAINT [FK_StudentProgramEvaluationStudentEvaluationObjective_StudentProgramEvaluation];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_EnrollmentTypeDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_EntryTypeDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor1];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_ResidencyStatusDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_School];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_School1];

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociation_SchoolChoiceBasisDescriptor];

ALTER TABLE [edfi].[StudentSchoolAssociationAlternativeGraduationPlan] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociationAlternativeGraduationPlan_StudentSchoolAssociation];

ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation];

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor];

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSchoolAttendanceEvent_School];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_AttemptStatusDescriptor];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_RepeatIdentifierDescriptor];

ALTER TABLE [edfi].[StudentSectionAssociationProgram] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociationProgram_StudentSectionAssociation];

ALTER TABLE [edfi].[StudentCompetencyObjectiveStudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentCompetencyObjectiveStudentSectionAssociation_StudentSectionAssociation];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_DualCreditInstitutionDescriptor];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_DualCreditTypeDescriptor];

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAssociation_EducationOrganization];

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor];

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEvent_EducationalEnvironmentDescriptor];

ALTER TABLE [edfi].[StudentSectionAttendanceEventClassPeriod] WITH CHECK CHECK CONSTRAINT [FK_StudentSectionAttendanceEventClassPeriod_StudentSectionAttendanceEvent];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationExitReasonDescriptor];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationDisability] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationDisability_StudentSpecialEducationProgramAssociation];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation];

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramAssociationSpecialEducationProgramService_StudentSpecialEducationProgramAssociation];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityDelayReasonDescriptor];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EligibilityEvaluationTypeDescriptor];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_EvaluationDelayReasonDescriptor];

ALTER TABLE [edfi].[StudentSpecialEducationProgramEligibilityAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSpecialEducationProgramEligibilityAssociation_IDEAPartDescriptor];

ALTER TABLE [edfi].[StudentTransportation] WITH CHECK CHECK CONSTRAINT [FK_StudentTransportation_TransportationPublicExpenseEligibilityTypeDescriptor];

ALTER TABLE [edfi].[StudentTransportation] WITH CHECK CHECK CONSTRAINT [FK_StudentTransportation_TransportationTypeDescriptor];

ALTER TABLE [edfi].[StudentTransportationStudentBusDetails] WITH CHECK CHECK CONSTRAINT [FK_StudentTransportationStudentBusDetails_StudentTransportation];

ALTER TABLE [edfi].[SurveyResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponse_Survey];

ALTER TABLE [edfi].[SurveySection] WITH CHECK CHECK CONSTRAINT [FK_SurveySection_Survey];

ALTER TABLE [edfi].[SurveySectionAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionAssociation_Survey];

ALTER TABLE [edfi].[Survey] WITH CHECK CHECK CONSTRAINT [FK_Survey_SurveyCategoryDescriptor];

ALTER TABLE [edfi].[SurveyCourseAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyCourseAssociation_Survey];

ALTER TABLE [edfi].[SurveyProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyProgramAssociation_Survey];

ALTER TABLE [edfi].[SurveyQuestion] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestion_Survey];

ALTER TABLE [edfi].[SurveyQuestionResponseChoice] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionResponseChoice_SurveyQuestion];

ALTER TABLE [edfi].[SurveyQuestion] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestion_QuestionFormDescriptor];

ALTER TABLE [edfi].[SurveyQuestion] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestion_SurveySection];

ALTER TABLE [edfi].[SurveyQuestionMatrix] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionMatrix_SurveyQuestion];

ALTER TABLE [edfi].[SurveyQuestionResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionResponse_SurveyQuestion];

ALTER TABLE [edfi].[SurveyQuestionResponseSurveyQuestionMatrixElementResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionResponseSurveyQuestionMatrixElementResponse_SurveyQuestionResponse];

ALTER TABLE [edfi].[SurveyQuestionResponseValue] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionResponseValue_SurveyQuestionResponse];

ALTER TABLE [edfi].[SurveyQuestionResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveyQuestionResponse_SurveyResponse];

ALTER TABLE [edfi].[SurveyResponseEducationOrganizationTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponseEducationOrganizationTargetAssociation_SurveyResponse];

ALTER TABLE [edfi].[SurveyResponseStaffTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponseStaffTargetAssociation_SurveyResponse];

ALTER TABLE [edfi].[SurveyResponseSurveyLevel] WITH CHECK CHECK CONSTRAINT [FK_SurveyResponseSurveyLevel_SurveyResponse];

ALTER TABLE [edfi].[SurveySectionResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponse_SurveyResponse];

ALTER TABLE [edfi].[SurveySectionResponse] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponse_SurveySection];

ALTER TABLE [edfi].[SurveySectionResponseEducationOrganizationTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponseEducationOrganizationTargetAssociation_SurveySectionResponse];

ALTER TABLE [edfi].[SurveySectionResponseStaffTargetAssociation] WITH CHECK CHECK CONSTRAINT [FK_SurveySectionResponseStaffTargetAssociation_SurveySectionResponse];

ALTER TABLE [edfi].[AssessmentAdministration] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministration_Assessment];

ALTER TABLE [edfi].[AssessmentAdministration] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministration_EducationOrganization];

ALTER TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentAdministration];

ALTER TABLE [edfi].[AssessmentAdministrationAssessmentBatteryPart] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationAssessmentBatteryPart_AssessmentBatteryPart];

ALTER TABLE [edfi].[AssessmentAdministrationParticipation] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationParticipation_AssessmentAdministration];

ALTER TABLE [edfi].[AssessmentAdministrationParticipation] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationParticipation_EducationOrganization];

ALTER TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationParticipationAdministrationPointOfContact_AssessmentAdministrationParticipation];

ALTER TABLE [edfi].[AssessmentAdministrationParticipationAdministrationPointOfContact] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationParticipationAdministrationPointOfContact_EducationOrganization];

ALTER TABLE [edfi].[AssessmentAdministrationPeriod] WITH CHECK CHECK CONSTRAINT [FK_AssessmentAdministrationPeriod_AssessmentAdministration];

ALTER TABLE [edfi].[AssessmentBatteryPart] WITH CHECK CHECK CONSTRAINT [FK_AssessmentBatteryPart_Assessment];

ALTER TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_AssessmentBatteryPartObjectiveAssessment_AssessmentBatteryPart];

ALTER TABLE [edfi].[AssessmentBatteryPartObjectiveAssessment] WITH CHECK CHECK CONSTRAINT [FK_AssessmentBatteryPartObjectiveAssessment_ObjectiveAssessment];

ALTER TABLE [edfi].[DualCreditInstitutionDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DualCreditInstitutionDescriptor_Descriptor];

ALTER TABLE [edfi].[DualCreditTypeDescriptor] WITH CHECK CHECK CONSTRAINT [FK_DualCreditTypeDescriptor_Descriptor];

ALTER TABLE [edfi].[Section504DisabilityDescriptor] WITH CHECK CHECK CONSTRAINT [FK_Section504DisabilityDescriptor_Descriptor];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_AssessmentAdministration];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_EducationOrganization];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_EducationOrganization1];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_GradeLevelDescriptor];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_PlatformTypeDescriptor];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssessmentAccommodation];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_StudentEducationOrganizationAssociation];

ALTER TABLE [edfi].[StudentAssessmentRegistration] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistration_StudentSchoolAssociation];

ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentAccommodation_AccommodationDescriptor];

ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentAccommodation_StudentAssessmentRegistration];

ALTER TABLE [edfi].[StudentAssessmentRegistrationAssessmentCustomization] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationAssessmentCustomization_StudentAssessmentRegistration];

ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociation_AssessmentBatteryPart];

ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociation_StudentAssessmentRegistration];

ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_AccommodationDescriptor];

ALTER TABLE [edfi].[StudentAssessmentRegistrationBatteryPartAssociationAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentAssessmentRegistrationBatteryPartAssociationAccommodation_StudentAssessmentRegistrationBatteryPartAssociation];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationWeapon_StudentDisciplineIncidentBehaviorAssociation];

ALTER TABLE [edfi].[StudentDisciplineIncidentBehaviorAssociationWeapon] WITH CHECK CHECK CONSTRAINT [FK_StudentDisciplineIncidentBehaviorAssociationWeapon_WeaponDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodation_Student];

ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodation_EducationOrganization];

ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_AccommodationDescriptor];

ALTER TABLE [edfi].[StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation] WITH CHECK CHECK CONSTRAINT [FK_StudentEducationOrganizationAssessmentAccommodationGeneralAccommodation_StudentEducationOrganizationAssessmentAccommodation];

ALTER TABLE [edfi].[StudentSection504ProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSection504ProgramAssociation_GeneralStudentProgramAssociation];

ALTER TABLE [edfi].[StudentSection504ProgramAssociation] WITH CHECK CHECK CONSTRAINT [FK_StudentSection504ProgramAssociation_Section504DisabilityDescriptor];


GO
PRINT N'Updating DeployJournal Scripts';
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DeployJournal]') AND type in (N'U'))
DROP TABLE [dbo].[DeployJournal]
GO

CREATE TABLE [dbo].[DeployJournal](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ScriptName] [nvarchar](255) NOT NULL,
	[Applied] [datetime] NOT NULL,
 CONSTRAINT [PK_DeployJournal_Id] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

SET IDENTITY_INSERT [dbo].[DeployJournal] ON 
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (1, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.0010-Schemas.sql', CAST(N'2024-11-27 04:39:10.487' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (2, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.0020-Tables.sql', CAST(N'2024-11-27 04:39:12.330' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (3, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.0030-ForeignKeys.sql', CAST(N'2024-11-27 04:39:14.627' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (4, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.0040-IdColumnUniqueIndexes.sql', CAST(N'2024-11-27 04:39:15.180' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (5, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.0050-ExtendedProperties.sql', CAST(N'2024-11-27 04:39:18.553' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (6, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1002-AuthViews.sql', CAST(N'2024-11-27 04:39:18.597' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (7, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1003-CompositesHierarchicalViews.sql', CAST(N'2024-11-27 04:39:18.637' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (8, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1004-ViewIndexes.sql', CAST(N'2024-11-27 04:39:18.673' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (9, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1005-AddSQLTypes.sql', CAST(N'2024-11-27 04:39:18.677' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (10, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1006-AddSQLTypes-BigInt.sql', CAST(N'2024-11-27 04:39:18.680' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (11, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1020-Interoperability-Extension.sql', CAST(N'2024-11-27 04:39:18.717' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (12, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1021-OperationalContextView.sql', CAST(N'2024-11-27 04:39:18.730' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (13, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1022-SetVersion.sql', CAST(N'2024-11-27 04:39:18.733' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (14, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1030-AddSessionCascadeSupport.sql', CAST(N'2024-11-27 04:39:18.850' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (15, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1031-Create-SetSchoolYear-stored-procedure.sql', CAST(N'2024-11-27 04:39:18.857' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (16, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1034-RemoveDatesFromAuthViews.sql', CAST(N'2024-11-27 04:39:18.930' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (17, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1035-UpdateViewsToGoThroughStudendEdOrgResponsibiltyAssociation.sql', CAST(N'2024-11-27 04:39:18.933' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (18, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1070-RemoveDatesFromAuthViews.sql', CAST(N'2024-11-27 04:39:19.000' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (19, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1080-UpdateViewsToGoThroughStudendEdOrgResponsibiltyAssociation.sql', CAST(N'2024-11-27 04:39:19.007' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (20, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1090-MissingSecurityViews.sql', CAST(N'2024-11-27 04:39:19.010' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (21, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1100-AddMoreContextToEducationIdentifiersView.sql', CAST(N'2024-11-27 04:39:19.013' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (22, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1100-CorrectCommunityOrganizationAuthViews.sql', CAST(N'2024-11-27 04:39:19.020' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (23, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1120-RemoveCompositesHierarchicalViews.sql', CAST(N'2024-11-27 04:39:19.040' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (24, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1150-UpdatedAuthViewsToPreventDuplicatesFromStaffEdOrgAssignmentsAndEmployments.sql', CAST(N'2024-11-27 04:39:19.047' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (25, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1160-UpdateVersionTo510.sql', CAST(N'2024-11-27 04:39:19.050' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (26, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1170-UpdatedAuthViewsToRemoveJoin.sql', CAST(N'2024-11-27 04:39:19.053' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (27, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1180-Add-OrgDeptId-to-EdOrgIdentifiers.sql', CAST(N'2024-11-27 04:39:19.060' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (28, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1190-UpdateVersionTo520.sql', CAST(N'2024-11-27 04:39:19.063' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (29, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1200-AuthViewsSupportOrgDeptId.sql', CAST(N'2024-11-27 04:39:19.077' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (30, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1290-RemoveAllUnusedAuthorizationViews.sql', CAST(N'2024-11-27 04:39:19.200' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (31, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1300-CreateEdOrgToEdOrgTable.sql', CAST(N'2024-11-27 04:39:19.203' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (32, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1302-CreateEdOrgToEdOrgTriggers.sql', CAST(N'2024-11-27 04:39:19.250' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (33, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1303-AuthViewEducationOrganizationIdToStudentUSI.sql', CAST(N'2024-11-27 04:39:19.250' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (34, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1304-AuthViewEducationOrganizationIdToContactUSI.sql', CAST(N'2024-11-27 04:39:19.253' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (35, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1305-AuthViewsEducationOrganizationIdToStaffUSI.sql', CAST(N'2024-11-27 04:39:19.257' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (36, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1306-AuthViewEducationOrganizationIdToStudentUSIThroughResponsibility.sql', CAST(N'2024-11-27 04:39:19.260' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (37, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1320-UpdateVersionTo53.sql', CAST(N'2024-11-27 04:39:19.263' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (38, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1340-AuthViewIndexedEducationOrganizationIdToStudentUSI.sql', CAST(N'2024-11-27 04:39:19.270' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (39, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1350-AuthViewIndexedEducationOrganizationIdToContactUSI.sql', CAST(N'2024-11-27 04:39:19.277' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (40, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1360-UpdateVersionTo60.sql', CAST(N'2024-11-27 04:39:19.280' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (41, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1370-AddEducationOrganizationIdToEducationOrganizationIdIndex.sql', CAST(N'2024-11-27 04:39:19.283' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (42, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1380-UpdateVersionTo61.sql', CAST(N'2024-11-27 04:39:19.287' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (43, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1390-UpdateVersionTo70.sql', CAST(N'2024-11-27 04:39:19.290' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (44, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1400-Alter-EducationOrganizationId-to-bigint.sql', CAST(N'2024-11-27 04:39:19.340' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (45, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1410-CreateIndex-EdOrgIdsRelationship-AuthPerformance.sql', CAST(N'2024-11-27 04:39:19.717' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (46, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1420-UpdateEdFiStandardVersionTo50.sql', CAST(N'2024-11-27 04:39:19.720' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (47, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1430-UpdateVersionTo71.sql', CAST(N'2024-11-27 04:39:19.727' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (48, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1440-UpdateEdFiStandardVersionTo51.sql', CAST(N'2024-11-27 04:39:19.730' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (49, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1450-UpdateVersionTo72.sql', CAST(N'2024-11-27 04:39:19.733' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (50, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1460-AggregateIdColumns.sql', CAST(N'2024-11-27 04:39:20.070' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (51, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1465-UpdateIndex-EdOrgIdsRelationship-AuthPerformance.sql', CAST(N'2024-11-27 04:39:20.447' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (52, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1470-UpdateVersionTo73.sql', CAST(N'2024-11-27 04:39:20.450' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (53, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1480-UpdateEdFiStandardVersionTo52.sql', CAST(N'2024-11-27 04:39:20.453' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (54, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.1490-RemoveClusteredIndexesFromAuthView.sql', CAST(N'2024-11-27 04:39:20.473' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (55, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Data.Ods.0020-SchoolYears.sql', CAST(N'2024-11-27 04:39:20.547' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (56, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0010-CreateChangesSchema.sql', CAST(N'2024-11-27 04:39:20.567' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (57, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0020-CreateChangeVersionSequence.sql', CAST(N'2024-11-27 04:39:20.573' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (58, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0030-AddColumnChangeVersionForTables.sql', CAST(N'2024-11-27 04:39:21.450' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (59, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0070-AddIndexChangeVersionForTables.sql', CAST(N'2024-11-27 04:39:21.990' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (60, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0110-AddSnapshot-Tables.sql', CAST(N'2024-11-27 04:39:22.010' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (61, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0120-AddSnapshotIdColumnUniqueIndexes.sql', CAST(N'2024-11-27 04:39:22.023' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (62, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0130-AddSnapshotExtendedProperties.sql', CAST(N'2024-11-27 04:39:22.070' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (63, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0200-CreateTrackedChangeTables.sql', CAST(N'2024-11-27 04:39:22.893' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (64, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0210-CreateTriggersForChangeVersionAndKeyChanges.sql', CAST(N'2024-11-27 04:39:23.110' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (65, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0220-CreateTriggersForDeleteTracking.sql', CAST(N'2024-11-27 04:39:24.073' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (66, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.0230-CreateIndirectUpdateCascadeTriggers.sql', CAST(N'2024-11-27 04:39:24.087' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (67, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.1010-CreateGetMaxChangeVersionFunction.sql', CAST(N'2024-11-27 04:39:24.093' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (68, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.1020-AuthViewsIncludingDeletes.sql', CAST(N'2024-11-27 04:39:24.100' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (69, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.1030-DropSnapshot-Table.sql', CAST(N'2024-11-27 04:39:24.110' AS DateTime))
GO
INSERT [dbo].[DeployJournal] ([Id], [ScriptName], [Applied]) VALUES (70, N'EdFi.Ods.Standard.Standard.5.2.0.Artifacts.MsSql.Structure.Ods.Changes.1040-AuthViewStudentResponsibilityIncludingDeletes.sql', CAST(N'2024-11-27 04:39:24.113' AS DateTime))
GO
SET IDENTITY_INSERT [dbo].[DeployJournal] OFF 
GO

PRINT N'Update complete.';
GO